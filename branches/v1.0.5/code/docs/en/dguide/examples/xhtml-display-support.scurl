||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from COM.CURL.WSDK.XHTML.ELABORATION}
{import * from COM.CURL.WSDK.XHTML, using-name = "XHTML"}
{import * from CURL.LANGUAGE.REGEXP}

|| local (X)HTML elaboration
|| --------------------
{define-proc public {elaborate-xhtml-fragment in:String}:Visual
    || wrap fragment, and close obvious empty tags
    || -- (in case its really HTML)
    let xstr:String =
        ("<html xmlns='http://www.w3.org/1999/xhtml'><head/><body>" 
         & {regexp-subst "<br>", in, "<br/>", replace-all? = true}
         & "</body></html>")
    let display:#Graphic
    {try
        let xh:xhtmlHandler = {xhtmlHandler xstr}
        {if-non-null src = {xh.to-CurlSource} then            
            let xhtml-display:xhDisplayFrame = 
                {xhDisplayFrame
                    {evaluate src,
                        package = {OpenPackage XHTML}}}
            set display = xhtml-display}
     catch e:Exception do
||--        {output {message Unable to elaborate XHTML: {value e}}}
    }
    {return
        {if-non-null display 
         then display 
         else {get-html-text in}}}
}
{define-class  public xhDisplayFrame {inherits xhCurlMLLinkAttributes, Frame}  
  {nonlocal-option public link-handler:#Graphic}
  {constructor public {default ...}
    {construct-super.Frame ...}
    set self.link-handler = self
    {self.add-event-handler
        {on e:xhStatusLineEvent do
            {self.set-status-line e.message}
            {e.consume}}}
    {self.add-event-handler
        {on e:xhBrowseUrlEvent do
            {{get-the-applet}.browse-url {url e.location}, target = e.target}
            {e.consume}}}
  }
  {method {set-status-line message:String}:void
    {{get-the-applet}.set-status message}
  }
}
