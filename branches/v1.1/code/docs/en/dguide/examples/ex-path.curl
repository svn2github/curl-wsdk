||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0 applet}
{applet manifest = "../manifest.mcurl"}
{import * from COM.CURL.WSDK.XML-DOCUMENT-MODEL}
{import * from COM.CURL.WSDK.XML-DISPLAY}

|| prefix declarations
{define-proc {dwim-prefix-declarations
                 subject:XDMElement,
                 context:XDMNamespaceContext = xml-namespace-context
             }:void
    {subject.walk-children 
        || walk descendants and self
        include-self? = true,
        include-descendants? = true,
        {proc {n:XDMNode}:bool
            {type-switch n
             case e:XDMElement do
                || check declared prefixes
                {if-non-null ps = e.namespace-declarations then
                    {for p in {ps.get-prefixes} do
                        {if-non-null ns = {ps.get-uri p} then
                            {if {context.get-uri p} == null 
                             then
                                || extend global declarations accordingly
                                {context.declare-prefix? p, ns}}}}}}
            || continue walking
            {return true}}}
}

{document-style PlainDocument}
{set-document-properties
    hstretch? = true,
    vstretch? = true
}

{persistent-data "Settings"}
{value
    || defaults 
    let base-url:Url = {{get-the-applet}.url.parent.canonicalize}
    let restore-settings?:bool = true
    let factory-settings:XDMElement =
        {XDMElement "settings",
            {XDMElement "filename", "wsdk-dguide.rss"},
            {XDMElement "path", "*"}
        }
    let settings:XDMElement = {factory-settings.clone}
    || TODO: list model
    || - recent files
    || - recent paths
    {if-non-null settings-xml =
        {if restore-settings? then
            {get-persistent-data "settings", error-if-missing? = false}
         else null}
     then
        {try
            set settings = 
                {build-xml preserve-whitespace? = false, 
                    settings-xml}.root
         catch e:Exception do
            {popup-message {message Ignoring faulty settings}}}}
    let settings-context:XDMDataBindingContext =
        {XDMDataBindingContext model = settings}
    {on-applet-suspend do
        {set-persistent-data "settings",
            {settings.to-XML}}
        {commit-persistent-data}}

    || model
    let xmldoc:#XDMDocument = null
    let xml:#XDMElement = null    
    || model tree
    let tm:XDMTreeModel = 
        {XDMTreeModel null}
    let tc:XDMTreeControl = 
        {XDMTreeControl tm,
            tree-connector-color = "silver",
            selection-policy = "multiple"}
    
    || subset
    let xs:XDMNodeSet = {XDMNodeSet}
    || subset tree
    let stm:XDMTreeModel = 
        {XDMTreeModel null}
    let stc:XDMTreeControl = 
        {XDMTreeControl stm,
            tree-connector-color = "silver",
            xdm-text-breakable? = true,
            selection-policy = "multiple"} 
    
    || actions
    let search-status:TextDisplay = {TextDisplay}
    let search-command:ComboBox =
        {ComboBox
            {bind value to "path"},
            width = 4in,
            vorigin = 70%,
            {on ValueFinished at c:ComboBox do
                {with-busy-cursor
                    || clear highlighted nodes
                    {tc.clear-categories category = "highlight"}
                    {tc.select-nothing}
                    {if c.value.empty? then
                        set stm.root = null
                     else
                        {try
                            || apply specified xpath
                            let w:StopWatch = {StopWatch}
                            {w.start}
                            set xs = {xml.search c.value}
                            {w.stop}
                            set search-status.value =
                                {message Found {value xs.size} nodes in {w.elapsed}}
                            set stm.root = xs asa XDMTreeNode
                            {stc.expand-node {non-null stm.root}}
                            || note new setting
                            {c.update-data-binding "value"}
                            || remember new query
                            {if {c.find c.value} < 0 then
                                {c.append c.value}}
                         catch e:Exception do
                            set search-status.value = e.message
                            {popup-message e}}
                    }}}}
    let load:{proc-type {Url}:void} =
        {proc {loc:Url}:void
            {try
                || load document
                set xmldoc =    
                    {build-xml loc, preserve-whitespace? = false}
                set xml = xmldoc.root
                || populate displays
                set tm.root = xml asa XDMTreeNode
                {tc.expand-node {non-null tm.root}}
                || augment global prefix declarations
                {dwim-prefix-declarations {non-null xml}}
                || reset path
||--                {search-command.clear-items}
                {search-command.set-value-with-events "*"}
             catch e:Exception do
                {popup-message e}}}
    let load-command:ComboBox =
        {ComboBox
            {bind value to "filename"},
            vorigin = 70%,
            {on ValueFinished at c:ComboBox do
                {with-busy-cursor
                    {load {base-url.concat c.value}}
                    || note new setting
                    {c.update-data-binding "value"}
                    || remember new query
                    {if {c.find c.value} < 0 then
                        {c.append c.value}}}}} 
    
    || display
    let pane-style:Arguments =
        {Arguments
            border-width = 3px,
            border-style = "ridge"} 
    let display-full:Graphic =
        {VBox
            margin = 3px,
            width = 2in,
            tc,
            {Fill}}
    let display-subset:Graphic =
        {VBox
            margin = 3px,
            {HBox
                spacing = 3pt,
                margin = 3pt,
                {text XPath:},
                search-command,
                {CommandButton
                    label = {message Select},
                    {on Action do
                        || select corresponding tree nodes
                        {with-busy-cursor do
                            {tc.collapse-node {non-null tm.root},
                                collapse-descendants? = true}
                            {for x in xs do
                                let n:XDMTreeNode = tm[x]
                                {tc.select-nodes additive? = true, n}}}}},
                {CommandButton
                    label = {message Highlight},
                    {on Action do
                        || highlight corresponding tree nodes
                        {with-busy-cursor do
                            || clear this category
                            {tc.clear-categories category = "highlight"}                            
                            {for x in xs do
                                let n:XDMTreeNode = tm[x]
                                || assure node is visible
                                {if-non-null p = n.parent then
                                    {tc.expand-node p,
                                        expand-ancestors? = true}}
                                {tc.set-category n, "highlight"}
                            }}}},
                {Fill}},
            {ScrollBox
                hstretch? = true,
                hscroll? = false,
                stc},
            {Fill}, 
            search-status} 
    
    || behavior
    let expand-action:EventHandler =
        {on Action at c:TreeControl do
            {if-non-null node = c.current-node then
                {with-busy-cursor
                    {if {c.expanded-nodes.member? node} then
                        {c.collapse-node node,
                            collapse-descendants? = true}
                     else
                        {c.expand-node node,
                            expand-descendants? = true}}}}}
    {tc.add-event-handler expand-action}
    {stc.add-event-handler expand-action}
    
    || arrangement
    let main:PanedWindow =
        {PanedWindow orientation = "horizontal"}
    {main.add-pane 
        {ScrollBox
            margin = 1px,
            hstretch? = true,
            vstretch? = true,
            {splice pane-style},
            display-full}}
    {main.add-pane 
        {Frame 
            margin = 1px,
            hstretch? = true,
            vstretch? = true,
            {splice pane-style},
            display-subset}}
    {main.set-pane-sizes {{Array-of double} 30%, 70%}}
    
    || initialize
    {after 0s do
        {load-command.handle-event {ValueFinished}}}
    
    || layout
    {VBox
        data-binding-context = settings-context,
        margin = 3pt,
        spacing = 3pt,
        {splice pane-style},
        {HBox
            spacing = 3pt,
            margin = 3pt,
            {title XDMPath Display},
            {Fill width = .5in},
            {text File:},
            load-command,
            {CommandButton 
                label = {message Choose},
                {on Action do
                    {if-non-null loc = 
                        {choose-file 
                            title = {message XML Document}, 
                            style = FileDialogStyle.read,
                            default-location = base-url,  
                            filters =
                                {{Array-of FileDialogFilter}
                                    {FileDialogFilter "XML files", 
                                        {{Array-of FileDialogTypeFilter} 
                                            {FileDialogTypeFilter "xml"}, 
                                            {FileDialogTypeFilter "xhtml"}, 
                                            {FileDialogTypeFilter "xsd"}, 
                                            {FileDialogTypeFilter "rss"}, 
                                            {FileDialogTypeFilter "wsdl"}}}}}
                     then
                        {load-command.set-value-with-events
                            {loc.name-relative-to-url base-url}}}}},
            {Fill},
||--            {CommandButton
||--                label = {message DEBUG},
||--                {on Action do
||--                    let path:String = {settings.search "path"}.as-String
||--                    {dump search-command.value} 
||--                    {dump load-command.value}
||--                    {dump path}
||--                }},
            {CommandButton
                label = {message Factory Settings},
                {on Action do
                    set settings = {factory-settings.clone}
                    set settings-context.model = settings
                    {load-command.handle-event {ValueFinished}}
                }}},
        {hrule},        
        main
    }

}
