{curl 6.0 package}
{package COM.CURL.WSDL.AmazonSearch}
|| This file was generated with COM.CURL.WSDK.WSDL
|| WSDL file: http://soap.amazon.com/schemas3/AmazonWebServices.wsdl

{import * from COM.CURL.WSDK.SOAP}
{define-class public AmazonSearchService {inherits WSDLHTTPRPCPostClient}

  {method public {keyword-search-request keyword-search-request:#KeywordRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                keyword-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "KeywordSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "KeywordRequest"},
                    curl-type = KeywordRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "KeywordSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-keyword-search-request keyword-search-request:#KeywordRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                keyword-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "KeywordSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "KeywordRequest"},
                    curl-type = KeywordRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "KeywordSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {text-stream-search-request text-stream-search-request:#TextStreamRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                text-stream-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "TextStreamSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "TextStreamRequest"},
                    curl-type = TextStreamRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "TextStreamSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-text-stream-search-request text-stream-search-request:#TextStreamRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                text-stream-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "TextStreamSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "TextStreamRequest"},
                    curl-type = TextStreamRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "TextStreamSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {power-search-request power-search-request:#PowerRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                power-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "PowerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "PowerRequest"},
                    curl-type = PowerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "PowerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-power-search-request power-search-request:#PowerRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                power-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "PowerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "PowerRequest"},
                    curl-type = PowerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "PowerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {browse-node-search-request browse-node-search-request:#BrowseNodeRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                browse-node-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "BrowseNodeSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "BrowseNodeRequest"},
                    curl-type = BrowseNodeRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "BrowseNodeSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-browse-node-search-request browse-node-search-request:#BrowseNodeRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                browse-node-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "BrowseNodeSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "BrowseNodeRequest"},
                    curl-type = BrowseNodeRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "BrowseNodeSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {asin-search-request asin-search-request:#AsinRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                asin-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AsinSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AsinRequest"},
                    curl-type = AsinRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AsinSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-asin-search-request asin-search-request:#AsinRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                asin-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AsinSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AsinRequest"},
                    curl-type = AsinRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AsinSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {blended-search-request blended-search-request:#BlendedRequest}:(_return:#ProductLineArray)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                blended-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "BlendedSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "BlendedRequest"},
                    curl-type = BlendedRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ProductLine[]"},
                    curl-type = ProductLineArray,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "BlendedSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductLineArray
    }
  }


  {method public {async-blended-search-request blended-search-request:#BlendedRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                blended-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "BlendedSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "BlendedRequest"},
                    curl-type = BlendedRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ProductLine[]"},
                    curl-type = ProductLineArray,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "BlendedSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {upc-search-request upc-search-request:#UpcRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                upc-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "UpcSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "UpcRequest"},
                    curl-type = UpcRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "UpcSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-upc-search-request upc-search-request:#UpcRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                upc-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "UpcSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "UpcRequest"},
                    curl-type = UpcRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "UpcSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {sku-search-request sku-search-request:#SkuRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                sku-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SkuSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SkuRequest"},
                    curl-type = SkuRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SkuSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-sku-search-request sku-search-request:#SkuRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                sku-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SkuSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SkuRequest"},
                    curl-type = SkuRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SkuSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {author-search-request author-search-request:#AuthorRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                author-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AuthorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AuthorRequest"},
                    curl-type = AuthorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AuthorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-author-search-request author-search-request:#AuthorRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                author-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AuthorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AuthorRequest"},
                    curl-type = AuthorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AuthorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {artist-search-request artist-search-request:#ArtistRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                artist-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ArtistSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ArtistRequest"},
                    curl-type = ArtistRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ArtistSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-artist-search-request artist-search-request:#ArtistRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                artist-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ArtistSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ArtistRequest"},
                    curl-type = ArtistRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ArtistSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {actor-search-request actor-search-request:#ActorRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                actor-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ActorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ActorRequest"},
                    curl-type = ActorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ActorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-actor-search-request actor-search-request:#ActorRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                actor-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ActorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ActorRequest"},
                    curl-type = ActorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ActorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {manufacturer-search-request manufacturer-search-request:#ManufacturerRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                manufacturer-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ManufacturerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ManufacturerRequest"},
                    curl-type = ManufacturerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ManufacturerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-manufacturer-search-request manufacturer-search-request:#ManufacturerRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                manufacturer-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ManufacturerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ManufacturerRequest"},
                    curl-type = ManufacturerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ManufacturerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {director-search-request director-search-request:#DirectorRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                director-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "DirectorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "DirectorRequest"},
                    curl-type = DirectorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "DirectorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-director-search-request director-search-request:#DirectorRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                director-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "DirectorSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "DirectorRequest"},
                    curl-type = DirectorRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "DirectorSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {exchange-search-request exchange-search-request:#ExchangeRequest}:(_return:#ListingProductDetails)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                exchange-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ExchangeSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ExchangeRequest"},
                    curl-type = ExchangeRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ListingProductDetails"},
                    curl-type = ListingProductDetails,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ExchangeSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ListingProductDetails
    }
  }


  {method public {async-exchange-search-request exchange-search-request:#ExchangeRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                exchange-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ExchangeSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ExchangeRequest"},
                    curl-type = ExchangeRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ListingProductDetails"},
                    curl-type = ListingProductDetails,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ExchangeSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {list-mania-search-request list-mania-search-request:#ListManiaRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                list-mania-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ListManiaSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ListManiaRequest"},
                    curl-type = ListManiaRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ListManiaSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-list-mania-search-request list-mania-search-request:#ListManiaRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                list-mania-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ListManiaSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ListManiaRequest"},
                    curl-type = ListManiaRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ListManiaSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {wishlist-search-request wishlist-search-request:#WishlistRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                wishlist-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "WishlistSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "WishlistRequest"},
                    curl-type = WishlistRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "WishlistSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-wishlist-search-request wishlist-search-request:#WishlistRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                wishlist-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "WishlistSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "WishlistRequest"},
                    curl-type = WishlistRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "WishlistSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {seller-profile-search-request seller-profile-search-request:#SellerProfileRequest}:(_return:#SellerProfile)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                seller-profile-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerProfileSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerProfileRequest"},
                    curl-type = SellerProfileRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerProfile"},
                    curl-type = SellerProfile,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SellerProfileSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #SellerProfile
    }
  }


  {method public {async-seller-profile-search-request seller-profile-search-request:#SellerProfileRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                seller-profile-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerProfileSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerProfileRequest"},
                    curl-type = SellerProfileRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerProfile"},
                    curl-type = SellerProfile,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SellerProfileSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {seller-search-request seller-search-request:#SellerRequest}:(_return:#SellerSearch)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                seller-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerRequest"},
                    curl-type = SellerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerSearch"},
                    curl-type = SellerSearch,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SellerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #SellerSearch
    }
  }


  {method public {async-seller-search-request seller-search-request:#SellerRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                seller-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerRequest"},
                    curl-type = SellerRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SellerSearch"},
                    curl-type = SellerSearch,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SellerSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {marketplace-search-request marketplace-search-request:#MarketplaceRequest}:(_return:#MarketplaceSearch)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                marketplace-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "MarketplaceSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "MarketplaceRequest"},
                    curl-type = MarketplaceRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "MarketplaceSearch"},
                    curl-type = MarketplaceSearch,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "MarketplaceSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #MarketplaceSearch
    }
  }


  {method public {async-marketplace-search-request marketplace-search-request:#MarketplaceRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                marketplace-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "MarketplaceSearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "MarketplaceRequest"},
                    curl-type = MarketplaceRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "MarketplaceSearch"},
                    curl-type = MarketplaceSearch,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "MarketplaceSearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {similarity-search-request similarity-search-request:#SimilarityRequest}:(_return:#ProductInfo)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                similarity-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SimilaritySearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SimilarityRequest"},
                    curl-type = SimilarityRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SimilaritySearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ProductInfo
    }
  }


  {method public {async-similarity-search-request similarity-search-request:#SimilarityRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                similarity-search-request
            },
            {{Array-of #XMLName}
                {XMLName "", "SimilaritySearchRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "SimilarityRequest"},
                    curl-type = SimilarityRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "SimilaritySearchRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {get-shopping-cart-request get-shopping-cart-request:#GetShoppingCartRequest}:(shopping-cart:#ShoppingCart)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                get-shopping-cart-request
            },
            {{Array-of #XMLName}
                {XMLName "", "GetShoppingCartRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetShoppingCartRequest"},
                    curl-type = GetShoppingCartRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "GetShoppingCartRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ShoppingCart
    }
  }


  {method public {async-get-shopping-cart-request get-shopping-cart-request:#GetShoppingCartRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                get-shopping-cart-request
            },
            {{Array-of #XMLName}
                {XMLName "", "GetShoppingCartRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetShoppingCartRequest"},
                    curl-type = GetShoppingCartRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "GetShoppingCartRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {clear-shopping-cart-request clear-shopping-cart-request:#ClearShoppingCartRequest}:(shopping-cart:#ShoppingCart)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                clear-shopping-cart-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ClearShoppingCartRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ClearShoppingCartRequest"},
                    curl-type = ClearShoppingCartRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ClearShoppingCartRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ShoppingCart
    }
  }


  {method public {async-clear-shopping-cart-request clear-shopping-cart-request:#ClearShoppingCartRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                clear-shopping-cart-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ClearShoppingCartRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ClearShoppingCartRequest"},
                    curl-type = ClearShoppingCartRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ClearShoppingCartRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {add-shopping-cart-items-request add-shopping-cart-items-request:#AddShoppingCartItemsRequest}:(shopping-cart:#ShoppingCart)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                add-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AddShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AddShoppingCartItemsRequest"},
                    curl-type = AddShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AddShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ShoppingCart
    }
  }


  {method public {async-add-shopping-cart-items-request add-shopping-cart-items-request:#AddShoppingCartItemsRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                add-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "AddShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "AddShoppingCartItemsRequest"},
                    curl-type = AddShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "AddShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {remove-shopping-cart-items-request remove-shopping-cart-items-request:#RemoveShoppingCartItemsRequest}:(shopping-cart:#ShoppingCart)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                remove-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "RemoveShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "RemoveShoppingCartItemsRequest"},
                    curl-type = RemoveShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "RemoveShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ShoppingCart
    }
  }


  {method public {async-remove-shopping-cart-items-request remove-shopping-cart-items-request:#RemoveShoppingCartItemsRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                remove-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "RemoveShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "RemoveShoppingCartItemsRequest"},
                    curl-type = RemoveShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "RemoveShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {modify-shopping-cart-items-request modify-shopping-cart-items-request:#ModifyShoppingCartItemsRequest}:(shopping-cart:#ShoppingCart)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                modify-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ModifyShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ModifyShoppingCartItemsRequest"},
                    curl-type = ModifyShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ModifyShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #ShoppingCart
    }
  }


  {method public {async-modify-shopping-cart-items-request modify-shopping-cart-items-request:#ModifyShoppingCartItemsRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                modify-shopping-cart-items-request
            },
            {{Array-of #XMLName}
                {XMLName "", "ModifyShoppingCartItemsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ModifyShoppingCartItemsRequest"},
                    curl-type = ModifyShoppingCartItemsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "ShoppingCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                    curl-type = ShoppingCart,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "ModifyShoppingCartItemsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }


  {method public {get-transaction-details-request get-transaction-details-request:#GetTransactionDetailsRequest}:(get-transaction-details-response:#GetTransactionDetailsResponse)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute})=
        {self.soap-caller.call
            self.service-location,
            {{Array-of any}
                get-transaction-details-request
            },
            {{Array-of #XMLName}
                {XMLName "", "GetTransactionDetailsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsRequest"},
                    curl-type = GetTransactionDetailsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "GetTransactionDetailsResponse"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsResponse"},
                    curl-type = GetTransactionDetailsResponse,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "GetTransactionDetailsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
        }
    {return
        responses[0] asa #GetTransactionDetailsResponse
    }
  }


  {method public {async-get-transaction-details-request get-transaction-details-request:#GetTransactionDetailsRequest, event-handler:EventHandler, ...:EventHandler}:SOAPHTTPRPCPostAsyncWorker
    {return
        {self.soap-caller.async-call
            self.service-location,
            {{Array-of any}
                get-transaction-details-request
            },
            {{Array-of #XMLName}
                {XMLName "", "GetTransactionDetailsRequest"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsRequest"},
                    curl-type = GetTransactionDetailsRequest,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "GetTransactionDetailsResponse"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsResponse"},
                    curl-type = GetTransactionDetailsResponse,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "http://soap.amazon.com",
            request-operation = {XMLName "http://soap.amazon.com", "GetTransactionDetailsRequest"},
            default-namespace = "http://soap.amazon.com",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true,
            event-handler,
            ...
        }
    }
  }

  {method public {register-types
                 }:(type-mapper:SOAPTypeMapper,
                    element-name-to-xml-type:SOAPElementNameToXMLTypeMapper,
                    xml-type-to-curl-type:SOAPXMLTypeToCurlTypeMapper,
                    curl-type-to-xml-type:SOAPCurlTypeToXMLTypeMapper,
                    xml-type-to-element-name:SOAPXMLTypeToElementNameMapper
                   )
    let constant type-mapper:DefaultSOAPTypeMapper =
        {DefaultSOAPTypeMapper}
    let constant element-name-to-xml-type:DefaultSOAPElementNameToXMLTypeMapper =
        {DefaultSOAPElementNameToXMLTypeMapper}
    let constant xml-type-to-curl-type:DefaultSOAPXMLTypeToCurlTypeMapper =
        {DefaultSOAPXMLTypeToCurlTypeMapper}
    let constant curl-type-to-xml-type:DefaultSOAPCurlTypeToXMLTypeMapper =
        {DefaultSOAPCurlTypeToXMLTypeMapper}
    let constant xml-type-to-element-name:DefaultSOAPXMLTypeToElementNameMapper =
        {DefaultSOAPXMLTypeToElementNameMapper}
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Accessories"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = AccessoryArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ActorRequest"},
                curl-type = ActorRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "actor"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "actor",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "AddItem"},
                curl-type = AddItem,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ParentAsin"},
                {XMLName "", "Asin"},
                {XMLName "", "MerchantId"},
                {XMLName "", "ExchangeId"},
                {XMLName "", "Quantity"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "parent-asin",
                "asin",
                "merchant-id",
                "exchange-id",
                "quantity"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "ParentAsin"},
                    {XMLName "", "Asin"},
                    {XMLName "", "MerchantId"},
                    {XMLName "", "ExchangeId"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "AddItem"},
                        curl-type = AddItem
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Items"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "AddItem[]"},
                        curl-type = AddItemArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "AddItem[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "AddShoppingCartItemsRequest"},
                curl-type = AddShoppingCartItemsRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "Items"},
                {XMLName "", "locale"},
                {XMLName "", "sims"},
                {XMLName "", "MergeCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Items"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "AddItem[]"},
                    curl-type = AddItemArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "cart-id",
                "hmac",
                "items",
                "locale",
                "sims",
                "merge-cart"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "CartId"},
                    {XMLName "", "HMAC"},
                    {XMLName "", "locale"},
                    {XMLName "", "sims"},
                    {XMLName "", "MergeCart"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Artists"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = ArtistArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ArtistRequest"},
                curl-type = ArtistRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "artist"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "artist",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "AsinRequest"},
                curl-type = AsinRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "asin"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "offer"},
                {XMLName "", "offerpage"},
                {XMLName "", "locale"},
                {XMLName "", "mode"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "asin",
                "tag",
                "type",
                "devtag",
                "offer",
                "offerpage",
                "locale",
                "mode"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "offer"},
                    {XMLName "", "offerpage"},
                    {XMLName "", "locale"},
                    {XMLName "", "mode"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Authors"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = AuthorArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "AuthorRequest"},
                curl-type = AuthorRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "author"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "author",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "BlendedRequest"},
                curl-type = BlendedRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "blended"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "blended",
                "tag",
                "type",
                "devtag",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "BrowseNode"},
                curl-type = BrowseNode,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "BrowseId"},
                {XMLName "", "BrowseName"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "browse-id",
                "browse-name"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "BrowseId"},
                    {XMLName "", "BrowseName"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "BrowseNode"},
                        curl-type = BrowseNode
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "BrowseList"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "BrowseNode[]"},
                        curl-type = BrowseNodeArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "BrowseNode[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "BrowseNodeRequest"},
                curl-type = BrowseNodeRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "browse_node"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "browse-node",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ClearShoppingCartRequest"},
                curl-type = ClearShoppingCartRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "locale"},
                {XMLName "", "MergeCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "cart-id",
                "hmac",
                "locale",
                "merge-cart"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"},
                    {XMLName "", "MergeCart"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "CustomerReview"},
                curl-type = CustomerReview,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Rating"},
                {XMLName "", "Date"},
                {XMLName "", "Summary"},
                {XMLName "", "Comment"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "rating",
                "date",
                "summary",
                "comment"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Rating"},
                    {XMLName "", "Date"},
                    {XMLName "", "Summary"},
                    {XMLName "", "Comment"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "CustomerReview"},
                        curl-type = CustomerReview
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "CustomerReviews"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "CustomerReview[]"},
                        curl-type = CustomerReviewArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "CustomerReview[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Details"},
                curl-type = Details,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Url"},
                {XMLName "", "Asin"},
                {XMLName "", "ProductName"},
                {XMLName "", "Catalog"},
                {XMLName "", "KeyPhrases"},
                {XMLName "", "Artists"},
                {XMLName "", "Authors"},
                {XMLName "", "Mpn"},
                {XMLName "", "Starring"},
                {XMLName "", "Directors"},
                {XMLName "", "TheatricalReleaseDate"},
                {XMLName "", "ReleaseDate"},
                {XMLName "", "Manufacturer"},
                {XMLName "", "Distributor"},
                {XMLName "", "ImageUrlSmall"},
                {XMLName "", "ImageUrlMedium"},
                {XMLName "", "ImageUrlLarge"},
                {XMLName "", "MerchantId"},
                {XMLName "", "MinPrice"},
                {XMLName "", "MaxPrice"},
                {XMLName "", "MinSalePrice"},
                {XMLName "", "MaxSalePrice"},
                {XMLName "", "MultiMerchant"},
                {XMLName "", "MerchantSku"},
                {XMLName "", "ListPrice"},
                {XMLName "", "OurPrice"},
                {XMLName "", "UsedPrice"},
                {XMLName "", "RefurbishedPrice"},
                {XMLName "", "CollectiblePrice"},
                {XMLName "", "ThirdPartyNewPrice"},
                {XMLName "", "NumberOfOfferings"},
                {XMLName "", "ThirdPartyNewCount"},
                {XMLName "", "UsedCount"},
                {XMLName "", "CollectibleCount"},
                {XMLName "", "RefurbishedCount"},
                {XMLName "", "ThirdPartyProductInfo"},
                {XMLName "", "SalesRank"},
                {XMLName "", "BrowseList"},
                {XMLName "", "Media"},
                {XMLName "", "ReadingLevel"},
                {XMLName "", "NumberOfPages"},
                {XMLName "", "NumberOfIssues"},
                {XMLName "", "IssuesPerYear"},
                {XMLName "", "SubscriptionLength"},
                {XMLName "", "DeweyNumber"},
                {XMLName "", "RunningTime"},
                {XMLName "", "Publisher"},
                {XMLName "", "NumMedia"},
                {XMLName "", "Isbn"},
                {XMLName "", "Features"},
                {XMLName "", "MpaaRating"},
                {XMLName "", "EsrbRating"},
                {XMLName "", "AgeGroup"},
                {XMLName "", "Availability"},
                {XMLName "", "Upc"},
                {XMLName "", "Tracks"},
                {XMLName "", "Accessories"},
                {XMLName "", "Platforms"},
                {XMLName "", "Encoding"},
                {XMLName "", "ProductDescription"},
                {XMLName "", "Reviews"},
                {XMLName "", "SimilarProducts"},
                {XMLName "", "FeaturedProducts"},
                {XMLName "", "Lists"},
                {XMLName "", "Status"},
                {XMLName "", "Variations"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "KeyPhrases"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "KeyPhrase[]"},
                    curl-type = KeyPhraseArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Artists"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = ArtistArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Authors"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = AuthorArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Starring"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = StarringArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Directors"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = DirectorArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "ThirdPartyProductInfo"},
                    xml-type = {XMLName "http://soap.amazon.com", "ThirdPartyProductInfo"},
                    curl-type = ThirdPartyProductInfo
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "BrowseList"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "BrowseNode[]"},
                    curl-type = BrowseNodeArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Features"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = FeaturesArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Tracks"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Track[]"},
                    curl-type = TrackArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Accessories"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = AccessoryArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Platforms"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = PlatformArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Reviews"},
                    xml-type = {XMLName "http://soap.amazon.com", "Reviews"},
                    curl-type = Reviews
                },
                {SOAPObjectType
                    element-name = {XMLName "", "SimilarProducts"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = SimilarProductsArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "FeaturedProducts"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "FeaturedProduct[]"},
                    curl-type = FeaturedProductsArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Lists"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = ListArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Variations"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Variation[]"},
                    curl-type = VariationArray
                }
            },
            {{Array-of String}
                "url",
                "asin",
                "product-name",
                "catalog",
                "key-phrases",
                "artists",
                "authors",
                "mpn",
                "starring",
                "directors",
                "theatrical-release-date",
                "release-date",
                "manufacturer",
                "distributor",
                "image-url-small",
                "image-url-medium",
                "image-url-large",
                "merchant-id",
                "min-price",
                "max-price",
                "min-sale-price",
                "max-sale-price",
                "multi-merchant",
                "merchant-sku",
                "list-price",
                "our-price",
                "used-price",
                "refurbished-price",
                "collectible-price",
                "third-party-new-price",
                "number-of-offerings",
                "third-party-new-count",
                "used-count",
                "collectible-count",
                "refurbished-count",
                "third-party-product-info",
                "sales-rank",
                "browse-list",
                "media",
                "reading-level",
                "number-of-pages",
                "number-of-issues",
                "issues-per-year",
                "subscription-length",
                "dewey-number",
                "running-time",
                "publisher",
                "num-media",
                "isbn",
                "features",
                "mpaa-rating",
                "esrb-rating",
                "age-group",
                "availability",
                "upc",
                "tracks",
                "accessories",
                "platforms",
                "encoding",
                "product-description",
                "reviews",
                "similar-products",
                "featured-products",
                "lists",
                "status",
                "variations"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Url"},
                    {XMLName "", "Asin"},
                    {XMLName "", "ProductName"},
                    {XMLName "", "Catalog"},
                    {XMLName "", "KeyPhrases"},
                    {XMLName "", "Artists"},
                    {XMLName "", "Authors"},
                    {XMLName "", "Mpn"},
                    {XMLName "", "Starring"},
                    {XMLName "", "Directors"},
                    {XMLName "", "TheatricalReleaseDate"},
                    {XMLName "", "ReleaseDate"},
                    {XMLName "", "Manufacturer"},
                    {XMLName "", "Distributor"},
                    {XMLName "", "ImageUrlSmall"},
                    {XMLName "", "ImageUrlMedium"},
                    {XMLName "", "ImageUrlLarge"},
                    {XMLName "", "MerchantId"},
                    {XMLName "", "MinPrice"},
                    {XMLName "", "MaxPrice"},
                    {XMLName "", "MinSalePrice"},
                    {XMLName "", "MaxSalePrice"},
                    {XMLName "", "MultiMerchant"},
                    {XMLName "", "MerchantSku"},
                    {XMLName "", "ListPrice"},
                    {XMLName "", "OurPrice"},
                    {XMLName "", "UsedPrice"},
                    {XMLName "", "RefurbishedPrice"},
                    {XMLName "", "CollectiblePrice"},
                    {XMLName "", "ThirdPartyNewPrice"},
                    {XMLName "", "NumberOfOfferings"},
                    {XMLName "", "ThirdPartyNewCount"},
                    {XMLName "", "UsedCount"},
                    {XMLName "", "CollectibleCount"},
                    {XMLName "", "RefurbishedCount"},
                    {XMLName "", "ThirdPartyProductInfo"},
                    {XMLName "", "SalesRank"},
                    {XMLName "", "BrowseList"},
                    {XMLName "", "Media"},
                    {XMLName "", "ReadingLevel"},
                    {XMLName "", "NumberOfPages"},
                    {XMLName "", "NumberOfIssues"},
                    {XMLName "", "IssuesPerYear"},
                    {XMLName "", "SubscriptionLength"},
                    {XMLName "", "DeweyNumber"},
                    {XMLName "", "RunningTime"},
                    {XMLName "", "Publisher"},
                    {XMLName "", "NumMedia"},
                    {XMLName "", "Isbn"},
                    {XMLName "", "Features"},
                    {XMLName "", "MpaaRating"},
                    {XMLName "", "EsrbRating"},
                    {XMLName "", "AgeGroup"},
                    {XMLName "", "Availability"},
                    {XMLName "", "Upc"},
                    {XMLName "", "Tracks"},
                    {XMLName "", "Accessories"},
                    {XMLName "", "Platforms"},
                    {XMLName "", "Encoding"},
                    {XMLName "", "ProductDescription"},
                    {XMLName "", "Reviews"},
                    {XMLName "", "SimilarProducts"},
                    {XMLName "", "FeaturedProducts"},
                    {XMLName "", "Lists"},
                    {XMLName "", "Status"},
                    {XMLName "", "Variations"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Details"},
                        curl-type = Details
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Details"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Details[]"},
                        curl-type = DetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Details[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Directors"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = DirectorArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "DirectorRequest"},
                curl-type = DirectorRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "director"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "director",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ExchangeRequest"},
                curl-type = ExchangeRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "exchange_id"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "exchange-id",
                "tag",
                "type",
                "devtag",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "FeaturedProduct"},
                curl-type = FeaturedProduct,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Asin"},
                {XMLName "", "Comment"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "asin",
                "comment"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Asin"},
                    {XMLName "", "Comment"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "FeaturedProduct"},
                        curl-type = FeaturedProduct
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "FeaturedProducts"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "FeaturedProduct[]"},
                        curl-type = FeaturedProductsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "FeaturedProduct[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Features"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = FeaturesArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Feedback"},
                curl-type = Feedback,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "FeedbackRating"},
                {XMLName "", "FeedbackComments"},
                {XMLName "", "FeedbackDate"},
                {XMLName "", "FeedbackRater"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "feedback-rating",
                "feedback-comments",
                "feedback-date",
                "feedback-rater"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "FeedbackRating"},
                    {XMLName "", "FeedbackComments"},
                    {XMLName "", "FeedbackDate"},
                    {XMLName "", "FeedbackRater"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Feedback"},
                        curl-type = Feedback
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Feedback"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Feedback[]"},
                        curl-type = FeedbackArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Feedback[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "GetShoppingCartRequest"},
                curl-type = GetShoppingCartRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "locale"},
                {XMLName "", "sims"},
                {XMLName "", "MergeCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "cart-id",
                "hmac",
                "locale",
                "sims",
                "merge-cart"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"},
                    {XMLName "", "sims"},
                    {XMLName "", "MergeCart"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsRequest"},
                curl-type = GetTransactionDetailsRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "key"},
                {XMLName "", "OrderIds"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "OrderIds"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = OrderIdArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "key",
                "order-ids",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "GetTransactionDetailsResponse"},
                curl-type = GetTransactionDetailsResponse,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ShortSummaries"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "ShortSummaries"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ShortSummary[]"},
                    curl-type = ShortSummaryArray
                }
            },
            {{Array-of String}
                "short-summaries"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Item"},
                curl-type = Item,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ItemId"},
                {XMLName "", "ProductName"},
                {XMLName "", "Catalog"},
                {XMLName "", "Asin"},
                {XMLName "", "ExchangeId"},
                {XMLName "", "Quantity"},
                {XMLName "", "ListPrice"},
                {XMLName "", "OurPrice"},
                {XMLName "", "MerchantSku"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "item-id",
                "product-name",
                "catalog",
                "asin",
                "exchange-id",
                "quantity",
                "list-price",
                "our-price",
                "merchant-sku"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Asin"},
                    {XMLName "", "ExchangeId"},
                    {XMLName "", "ListPrice"},
                    {XMLName "", "MerchantSku"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Item"},
                        curl-type = Item
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Items"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Item[]"},
                        curl-type = ItemArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Item[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Items"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = ItemIdArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ItemQuantity"},
                curl-type = ItemQuantity,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ItemId"},
                {XMLName "", "Quantity"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "item-id",
                "quantity"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "ItemQuantity"},
                        curl-type = ItemQuantity
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Items"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "ItemQuantity[]"},
                        curl-type = ItemQuantityArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "ItemQuantity[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "KeyPhrase"},
                curl-type = KeyPhrase,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "KeyPhrase"},
                {XMLName "", "Type"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "key-phrase",
                "type"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "KeyPhrase"},
                    {XMLName "", "Type"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "KeyPhrase"},
                        curl-type = KeyPhrase
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "KeyPhrases"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "KeyPhrase[]"},
                        curl-type = KeyPhraseArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "KeyPhrase[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "KeywordRequest"},
                curl-type = KeywordRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "keyword"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "keyword",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Lists"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = ListArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ListManiaRequest"},
                curl-type = ListManiaRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "lm_id"},
                {XMLName "", "page"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "lm-id",
                "page",
                "tag",
                "type",
                "devtag",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ListingProductDetails"},
                curl-type = ListingProductDetails,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ExchangeId"},
                {XMLName "", "ListingId"},
                {XMLName "", "ExchangeTitle"},
                {XMLName "", "ExchangeDescription"},
                {XMLName "", "ExchangePrice"},
                {XMLName "", "ExchangeAsin"},
                {XMLName "", "ExchangeEndDate"},
                {XMLName "", "ExchangeTinyImage"},
                {XMLName "", "ExchangeSellerId"},
                {XMLName "", "ExchangeSellerNickname"},
                {XMLName "", "ExchangeStartDate"},
                {XMLName "", "ExchangeStatus"},
                {XMLName "", "ExchangeQuantity"},
                {XMLName "", "ExchangeQuantityAllocated"},
                {XMLName "", "ExchangeFeaturedCategory"},
                {XMLName "", "ExchangeCondition"},
                {XMLName "", "ExchangeConditionType"},
                {XMLName "", "ExchangeAvailability"},
                {XMLName "", "ExchangeOfferingType"},
                {XMLName "", "ExchangeSellerState"},
                {XMLName "", "ExchangeSellerCountry"},
                {XMLName "", "ExchangeSellerRating"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "exchange-id",
                "listing-id",
                "exchange-title",
                "exchange-description",
                "exchange-price",
                "exchange-asin",
                "exchange-end-date",
                "exchange-tiny-image",
                "exchange-seller-id",
                "exchange-seller-nickname",
                "exchange-start-date",
                "exchange-status",
                "exchange-quantity",
                "exchange-quantity-allocated",
                "exchange-featured-category",
                "exchange-condition",
                "exchange-condition-type",
                "exchange-availability",
                "exchange-offering-type",
                "exchange-seller-state",
                "exchange-seller-country",
                "exchange-seller-rating"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "ExchangeId"},
                    {XMLName "", "ListingId"},
                    {XMLName "", "ExchangeTitle"},
                    {XMLName "", "ExchangeDescription"},
                    {XMLName "", "ExchangePrice"},
                    {XMLName "", "ExchangeAsin"},
                    {XMLName "", "ExchangeEndDate"},
                    {XMLName "", "ExchangeTinyImage"},
                    {XMLName "", "ExchangeSellerId"},
                    {XMLName "", "ExchangeSellerNickname"},
                    {XMLName "", "ExchangeStartDate"},
                    {XMLName "", "ExchangeStatus"},
                    {XMLName "", "ExchangeQuantity"},
                    {XMLName "", "ExchangeQuantityAllocated"},
                    {XMLName "", "ExchangeFeaturedCategory"},
                    {XMLName "", "ExchangeCondition"},
                    {XMLName "", "ExchangeConditionType"},
                    {XMLName "", "ExchangeAvailability"},
                    {XMLName "", "ExchangeOfferingType"},
                    {XMLName "", "ExchangeSellerState"},
                    {XMLName "", "ExchangeSellerCountry"},
                    {XMLName "", "ExchangeSellerRating"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "ListingProductDetails"},
                        curl-type = ListingProductDetails
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "ListingProductDetails"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "ListingProductDetails[]"},
                        curl-type = ListingProductDetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "ListingProductDetails[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "ListingProductInfo"},
                xml-type = {XMLName "http://soap.amazon.com", "ListingProductInfo"},
                curl-type = ListingProductInfo,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ListingProductDetails"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "ListingProductDetails"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ListingProductDetails[]"},
                    curl-type = ListingProductDetailsArray
                }
            },
            {{Array-of String}
                "listing-product-details"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ManufacturerRequest"},
                curl-type = ManufacturerRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "manufacturer"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "keywords"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "manufacturer",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "keywords",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "keywords"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "MarketplaceRequest"},
                curl-type = MarketplaceRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "marketplace_search"},
                {XMLName "", "seller-id"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "page"},
                {XMLName "", "keyword"},
                {XMLName "", "keyword_search"},
                {XMLName "", "browse_id"},
                {XMLName "", "zipcode"},
                {XMLName "", "area_id"},
                {XMLName "", "geo"},
                {XMLName "", "sort"},
                {XMLName "", "listing_id"},
                {XMLName "", "desc"},
                {XMLName "", "locale"},
                {XMLName "", "index"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "marketplace-search",
                "seller-id",
                "tag",
                "type",
                "devtag",
                "page",
                "keyword",
                "keyword-search",
                "browse-id",
                "zipcode",
                "area-id",
                "geo",
                "sort",
                "listing-id",
                "desc",
                "locale",
                "index"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "keyword"},
                    {XMLName "", "keyword_search"},
                    {XMLName "", "browse_id"},
                    {XMLName "", "zipcode"},
                    {XMLName "", "area_id"},
                    {XMLName "", "geo"},
                    {XMLName "", "sort"},
                    {XMLName "", "listing_id"},
                    {XMLName "", "desc"},
                    {XMLName "", "locale"},
                    {XMLName "", "index"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "MarketplaceSearch"},
                curl-type = MarketplaceSearch,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "MarketplaceSearchDetails"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "MarketplaceSearchDetails"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "MarketplaceSearchDetails[]"},
                    curl-type = MarketplaceSearchDetailsArray
                }
            },
            {{Array-of String}
                "marketplace-search-details"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "MarketplaceSearchDetails"},
                curl-type = MarketplaceSearchDetails,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "NumberOfOpenListings"},
                {XMLName "", "ListingProductInfo"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "ListingProductInfo"},
                    xml-type = {XMLName "http://soap.amazon.com", "ListingProductInfo"},
                    curl-type = ListingProductInfo
                }
            },
            {{Array-of String}
                "number-of-open-listings",
                "listing-product-info"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "NumberOfOpenListings"},
                    {XMLName "", "ListingProductInfo"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "MarketplaceSearchDetails"},
                        curl-type = MarketplaceSearchDetails
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "MarketplaceSearchDetails"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "MarketplaceSearchDetails[]"},
                        curl-type = MarketplaceSearchDetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "MarketplaceSearchDetails[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ModifyShoppingCartItemsRequest"},
                curl-type = ModifyShoppingCartItemsRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "Items"},
                {XMLName "", "locale"},
                {XMLName "", "sims"},
                {XMLName "", "MergeCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Items"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ItemQuantity[]"},
                    curl-type = ItemQuantityArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "cart-id",
                "hmac",
                "items",
                "locale",
                "sims",
                "merge-cart"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"},
                    {XMLName "", "sims"},
                    {XMLName "", "MergeCart"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "OrderIds"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = OrderIdArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "OrderItem"},
                curl-type = OrderItem,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ItemNumber"},
                {XMLName "", "ASIN"},
                {XMLName "", "ExchangeId"},
                {XMLName "", "Quantity"},
                {XMLName "", "UnitPrice"},
                {XMLName "", "TotalPrice"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "UnitPrice"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    element-name = {XMLName "", "TotalPrice"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                }
            },
            {{Array-of String}
                "item-number",
                "asin",
                "exchange-id",
                "quantity",
                "unit-price",
                "total-price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "ASIN"},
                    {XMLName "", "ExchangeId"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "OrderItem"},
                        curl-type = OrderItem
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "OrderItems"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "OrderItem[]"},
                        curl-type = OrderItemArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "OrderItem[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Package"},
                curl-type = Package,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "TrackingNumber"},
                {XMLName "", "CarrierName"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tracking-number",
                "carrier-name"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Package"},
                        curl-type = Package
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Packages"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Package[]"},
                        curl-type = PackageArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Package[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Platforms"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = PlatformArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "PowerRequest"},
                curl-type = PowerRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "power"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "power",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "Total"},
                xml-type = {XMLName "http://soap.amazon.com", "Price"},
                curl-type = Price,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Amount"},
                {XMLName "", "CurrencyCode"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "amount",
                "currency-code"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "ProductInfo"},
                xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                curl-type = ProductInfo,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "TotalResults"},
                {XMLName "", "TotalPages"},
                {XMLName "", "ListName"},
                {XMLName "", "Details"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Details"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Details[]"},
                    curl-type = DetailsArray
                }
            },
            {{Array-of String}
                "total-results",
                "total-pages",
                "list-name",
                "details"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "TotalResults"},
                    {XMLName "", "TotalPages"},
                    {XMLName "", "ListName"},
                    {XMLName "", "Details"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ProductLine"},
                curl-type = ProductLine,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Mode"},
                {XMLName "", "RelevanceRank"},
                {XMLName "", "ProductInfo"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "ProductInfo"},
                    xml-type = {XMLName "http://soap.amazon.com", "ProductInfo"},
                    curl-type = ProductInfo
                }
            },
            {{Array-of String}
                "mode",
                "relevance-rank",
                "product-info"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Mode"},
                    {XMLName "", "RelevanceRank"},
                    {XMLName "", "ProductInfo"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "ProductLine"},
                        curl-type = ProductLine
                    },
                    {SOAPObjectType
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "ProductLine[]"},
                        curl-type = ProductLineArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "ProductLine[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "RemoveShoppingCartItemsRequest"},
                curl-type = RemoveShoppingCartItemsRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "tag"},
                {XMLName "", "devtag"},
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "Items"},
                {XMLName "", "locale"},
                {XMLName "", "sims"},
                {XMLName "", "MergeCart"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Items"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = ItemIdArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "tag",
                "devtag",
                "cart-id",
                "hmac",
                "items",
                "locale",
                "sims",
                "merge-cart"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"},
                    {XMLName "", "sims"},
                    {XMLName "", "MergeCart"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "Reviews"},
                xml-type = {XMLName "http://soap.amazon.com", "Reviews"},
                curl-type = Reviews,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "AvgCustomerRating"},
                {XMLName "", "TotalCustomerReviews"},
                {XMLName "", "CustomerReviews"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "CustomerReviews"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "CustomerReview[]"},
                    curl-type = CustomerReviewArray
                }
            },
            {{Array-of String}
                "avg-customer-rating",
                "total-customer-reviews",
                "customer-reviews"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "AvgCustomerRating"},
                    {XMLName "", "TotalCustomerReviews"},
                    {XMLName "", "CustomerReviews"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "SellerFeedback"},
                xml-type = {XMLName "http://soap.amazon.com", "SellerFeedback"},
                curl-type = SellerFeedback,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Feedback"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "Feedback"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Feedback[]"},
                    curl-type = FeedbackArray
                }
            },
            {{Array-of String}
                "feedback"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerProfile"},
                curl-type = SellerProfile,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerProfileDetails"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "SellerProfileDetails"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "SellerProfileDetails[]"},
                    curl-type = SellerProfileDetailsArray
                }
            },
            {{Array-of String}
                "seller-profile-details"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerProfileDetails"},
                curl-type = SellerProfileDetails,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerNickname"},
                {XMLName "", "OverallFeedbackRating"},
                {XMLName "", "NumberOfFeedback"},
                {XMLName "", "NumberOfCanceledBids"},
                {XMLName "", "NumberOfCanceledAuctions"},
                {XMLName "", "StoreId"},
                {XMLName "", "StoreName"},
                {XMLName "", "SellerFeedback"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "SellerFeedback"},
                    xml-type = {XMLName "http://soap.amazon.com", "SellerFeedback"},
                    curl-type = SellerFeedback
                }
            },
            {{Array-of String}
                "seller-nickname",
                "overall-feedback-rating",
                "number-of-feedback",
                "number-of-canceled-bids",
                "number-of-canceled-auctions",
                "store-id",
                "store-name",
                "seller-feedback"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "SellerNickname"},
                    {XMLName "", "OverallFeedbackRating"},
                    {XMLName "", "NumberOfFeedback"},
                    {XMLName "", "NumberOfCanceledBids"},
                    {XMLName "", "NumberOfCanceledAuctions"},
                    {XMLName "", "StoreId"},
                    {XMLName "", "StoreName"},
                    {XMLName "", "SellerFeedback"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "SellerProfileDetails"},
                        curl-type = SellerProfileDetails
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "SellerProfileDetails"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "SellerProfileDetails[]"},
                        curl-type = SellerProfileDetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "SellerProfileDetails[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerProfileRequest"},
                curl-type = SellerProfileRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "seller_id"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "page"},
                {XMLName "", "desc"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "seller-id",
                "tag",
                "type",
                "devtag",
                "page",
                "desc",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "desc"},
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerRequest"},
                curl-type = SellerRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "seller_id"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "offerstatus"},
                {XMLName "", "page"},
                {XMLName "", "seller_browse_id"},
                {XMLName "", "keyword"},
                {XMLName "", "desc"},
                {XMLName "", "locale"},
                {XMLName "", "index"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "seller-id",
                "tag",
                "type",
                "devtag",
                "offerstatus",
                "page",
                "seller-browse-id",
                "keyword",
                "desc",
                "locale",
                "index"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "seller_browse_id"},
                    {XMLName "", "keyword"},
                    {XMLName "", "desc"},
                    {XMLName "", "locale"},
                    {XMLName "", "index"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerSearch"},
                curl-type = SellerSearch,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerSearchDetails"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "SellerSearchDetails"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "SellerSearchDetails[]"},
                    curl-type = SellerSearchDetailsArray
                }
            },
            {{Array-of String}
                "seller-search-details"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SellerSearchDetails"},
                curl-type = SellerSearchDetails,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "SellerNickname"},
                {XMLName "", "StoreId"},
                {XMLName "", "StoreName"},
                {XMLName "", "NumberOfOpenListings"},
                {XMLName "", "ListingProductInfo"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "ListingProductInfo"},
                    xml-type = {XMLName "http://soap.amazon.com", "ListingProductInfo"},
                    curl-type = ListingProductInfo
                }
            },
            {{Array-of String}
                "seller-nickname",
                "store-id",
                "store-name",
                "number-of-open-listings",
                "listing-product-info"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "SellerNickname"},
                    {XMLName "", "StoreId"},
                    {XMLName "", "StoreName"},
                    {XMLName "", "NumberOfOpenListings"},
                    {XMLName "", "ListingProductInfo"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "SellerSearchDetails"},
                        curl-type = SellerSearchDetails
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "SellerSearchDetails"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "SellerSearchDetails[]"},
                        curl-type = SellerSearchDetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "SellerSearchDetails[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ShoppingCart"},
                curl-type = ShoppingCart,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "CartId"},
                {XMLName "", "HMAC"},
                {XMLName "", "PurchaseUrl"},
                {XMLName "", "Items"},
                {XMLName "", "SimilarProducts"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Items"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Item[]"},
                    curl-type = ItemArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "SimilarProducts"},
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = SimilarProductsArray
                }
            },
            {{Array-of String}
                "cart-id",
                "hmac",
                "purchase-url",
                "items",
                "similar-products"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Items"},
                    {XMLName "", "SimilarProducts"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ShortSummary"},
                curl-type = ShortSummary,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "OrderId"},
                {XMLName "", "SellerId"},
                {XMLName "", "Condition"},
                {XMLName "", "TransactionDate"},
                {XMLName "", "TransactionDateEpoch"},
                {XMLName "", "Total"},
                {XMLName "", "Subtotal"},
                {XMLName "", "Shipping"},
                {XMLName "", "Tax"},
                {XMLName "", "Promotion"},
                {XMLName "", "StoreName"},
                {XMLName "", "Packages"},
                {XMLName "", "OrderItems"},
                {XMLName "", "ErrorCode"},
                {XMLName "", "ErrorString"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Total"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Subtotal"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Shipping"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Tax"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Promotion"},
                    xml-type = {XMLName "http://soap.amazon.com", "Price"},
                    curl-type = Price
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    element-name = {XMLName "", "Packages"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "Package[]"},
                    curl-type = PackageArray
                },
                {SOAPObjectType
                    element-name = {XMLName "", "OrderItems"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "OrderItem[]"},
                    curl-type = OrderItemArray
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "order-id",
                "seller-id",
                "condition",
                "transaction-date",
                "transaction-date-epoch",
                "total",
                "subtotal",
                "shipping",
                "tax",
                "promotion",
                "store-name",
                "packages",
                "order-items",
                "error-code",
                "error-string"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Packages"},
                    {XMLName "", "OrderItems"},
                    {XMLName "", "ErrorCode"},
                    {XMLName "", "ErrorString"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "ShortSummary"},
                        curl-type = ShortSummary
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "ShortSummaries"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "ShortSummary[]"},
                        curl-type = ShortSummaryArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "ShortSummary[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "SimilarProducts"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = SimilarProductsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SimilarityRequest"},
                curl-type = SimilarityRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "asin"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "asin",
                "tag",
                "type",
                "devtag",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "SkuRequest"},
                curl-type = SkuRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "sku"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "merchant_id"},
                {XMLName "", "keywords"},
                {XMLName "", "sort"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "sku",
                "mode",
                "tag",
                "type",
                "devtag",
                "merchant-id",
                "keywords",
                "sort",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "merchant_id"},
                    {XMLName "", "keywords"},
                    {XMLName "", "sort"},
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Starring"},
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = StarringArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "TextStreamRequest"},
                curl-type = TextStreamRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "textStream"},
                {XMLName "", "page"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"},
                {XMLName "", "price"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "text-stream",
                "page",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale",
                "price"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"},
                    {XMLName "", "price"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "ThirdPartyProductDetails"},
                curl-type = ThirdPartyProductDetails,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "OfferingType"},
                {XMLName "", "SellerId"},
                {XMLName "", "SellerNickname"},
                {XMLName "", "ExchangeId"},
                {XMLName "", "OfferingPrice"},
                {XMLName "", "Condition"},
                {XMLName "", "ConditionType"},
                {XMLName "", "ExchangeAvailability"},
                {XMLName "", "SellerCountry"},
                {XMLName "", "SellerState"},
                {XMLName "", "ShipComments"},
                {XMLName "", "SellerRating"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "offering-type",
                "seller-id",
                "seller-nickname",
                "exchange-id",
                "offering-price",
                "condition",
                "condition-type",
                "exchange-availability",
                "seller-country",
                "seller-state",
                "ship-comments",
                "seller-rating"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "OfferingType"},
                    {XMLName "", "SellerId"},
                    {XMLName "", "SellerNickname"},
                    {XMLName "", "ExchangeId"},
                    {XMLName "", "OfferingPrice"},
                    {XMLName "", "Condition"},
                    {XMLName "", "ConditionType"},
                    {XMLName "", "ExchangeAvailability"},
                    {XMLName "", "SellerCountry"},
                    {XMLName "", "SellerState"},
                    {XMLName "", "ShipComments"},
                    {XMLName "", "SellerRating"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "ThirdPartyProductDetails"},
                        curl-type = ThirdPartyProductDetails
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "ThirdPartyProductDetails"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "ThirdPartyProductDetails[]"},
                        curl-type = ThirdPartyProductDetailsArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "ThirdPartyProductDetails[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                element-name = {XMLName "", "ThirdPartyProductInfo"},
                xml-type = {XMLName "http://soap.amazon.com", "ThirdPartyProductInfo"},
                curl-type = ThirdPartyProductInfo,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "ThirdPartyProductDetails"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    element-name = {XMLName "", "ThirdPartyProductDetails"},
                    xml-type = {XMLName.unchecked "http://soap.amazon.com", "ThirdPartyProductDetails[]"},
                    curl-type = ThirdPartyProductDetailsArray
                }
            },
            {{Array-of String}
                "third-party-product-details"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Track"},
                curl-type = Track,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "TrackName"},
                {XMLName "", "ByArtist"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "track-name",
                "by-artist"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "TrackName"},
                    {XMLName "", "ByArtist"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Track"},
                        curl-type = Track
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Tracks"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Track[]"},
                        curl-type = TrackArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Track[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "UpcRequest"},
                curl-type = UpcRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "upc"},
                {XMLName "", "mode"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "sort"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "upc",
                "mode",
                "tag",
                "type",
                "devtag",
                "sort",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "sort"},
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "Variation"},
                curl-type = Variation,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "Asin"},
                {XMLName "", "ClothingSize"},
                {XMLName "", "ClothingColor"},
                {XMLName "", "Price"},
                {XMLName "", "SalePrice"},
                {XMLName "", "Availability"},
                {XMLName "", "MultiMerchant"},
                {XMLName "", "MerchantSku"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "asin",
                "clothing-size",
                "clothing-color",
                "price",
                "sale-price",
                "availability",
                "multi-merchant",
                "merchant-sku"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "Asin"},
                    {XMLName "", "ClothingSize"},
                    {XMLName "", "ClothingColor"},
                    {XMLName "", "Price"},
                    {XMLName "", "SalePrice"},
                    {XMLName "", "Availability"},
                    {XMLName "", "MultiMerchant"},
                    {XMLName "", "MerchantSku"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://soap.amazon.com", "Variation"},
                        curl-type = Variation
                    },
                    {SOAPObjectType
                        element-name = {XMLName "", "Variations"},
                        xml-type = {XMLName.unchecked "http://soap.amazon.com", "Variation[]"},
                        curl-type = VariationArray,
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://soap.amazon.com", "Variation[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://soap.amazon.com", "WishlistRequest"},
                curl-type = WishlistRequest,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "wishlist_id"},
                {XMLName "", "page"},
                {XMLName "", "tag"},
                {XMLName "", "type"},
                {XMLName "", "devtag"},
                {XMLName "", "locale"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                }
            },
            {{Array-of String}
                "wishlist-id",
                "page",
                "tag",
                "type",
                "devtag",
                "locale"
            },
            optional-elements = 
                {{Set-of XMLName}
                    {XMLName "", "locale"}
              },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {return
        type-mapper,
        element-name-to-xml-type,
        xml-type-to-curl-type,
        curl-type-to-xml-type,
        xml-type-to-element-name
    }
  }

  {constructor public
    {default
        service-location:Url =
            {abs-url "http://soap.amazon.com/onca/soap3"}
    }
    {construct-super service-location,
        generated-using-version = "2"
    }
  }
}

{let public constant AccessoryArray:ClassType = {Array-of String}}

{define-class public open ActorRequest

  field public actor:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      actor:String = {required-keyword "ActorRequest.actor"} asa String,
      page:String = {required-keyword "ActorRequest.page"} asa String,
      mode:String = {required-keyword "ActorRequest.mode"} asa String,
      tag:String = {required-keyword "ActorRequest.tag"} asa String,
      type:String = {required-keyword "ActorRequest.type"} asa String,
      devtag:String = {required-keyword "ActorRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? actor} then
        set self.actor = actor}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open AddItem

  field public parent-asin:#String
  field public asin:#String
  field public merchant-id:#String
  field public exchange-id:#String
  field public quantity:String = ""
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      parent-asin:#String = {uninitialized-value-for-type #String},
      asin:#String = {uninitialized-value-for-type #String},
      merchant-id:#String = {uninitialized-value-for-type #String},
      exchange-id:#String = {uninitialized-value-for-type #String},
      quantity:String = {required-keyword "AddItem.quantity"} asa String
    }
    {if {keyword-supplied? parent-asin} then
        set self.parent-asin = parent-asin}
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? merchant-id} then
        set self.merchant-id = merchant-id}
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? quantity} then
        set self.quantity = quantity}
  }

}

{let public constant AddItemArray:ClassType = {Array-of AddItem}}

{define-class public open AddShoppingCartItemsRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public cart-id:#String
  field public hmac:#String
  field public items:AddItemArray = {uninitialized-value-for-type AddItemArray}
  field public locale:#String
  field public sims:#String
  field public merge-cart:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "AddShoppingCartItemsRequest.tag"} asa String,
      devtag:String = {required-keyword "AddShoppingCartItemsRequest.devtag"} asa String,
      cart-id:#String = {uninitialized-value-for-type #String},
      hmac:#String = {uninitialized-value-for-type #String},
      items:AddItemArray = {required-keyword "AddShoppingCartItemsRequest.items"} asa AddItemArray,
      locale:#String = {uninitialized-value-for-type #String},
      sims:#String = {uninitialized-value-for-type #String},
      merge-cart:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? items} then
        set self.items = items}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? sims} then
        set self.sims = sims}
    {if {keyword-supplied? merge-cart} then
        set self.merge-cart = merge-cart}
  }

}

{let public constant ArtistArray:ClassType = {Array-of String}}

{define-class public open ArtistRequest

  field public artist:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      artist:String = {required-keyword "ArtistRequest.artist"} asa String,
      page:String = {required-keyword "ArtistRequest.page"} asa String,
      mode:String = {required-keyword "ArtistRequest.mode"} asa String,
      tag:String = {required-keyword "ArtistRequest.tag"} asa String,
      type:String = {required-keyword "ArtistRequest.type"} asa String,
      devtag:String = {required-keyword "ArtistRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? artist} then
        set self.artist = artist}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open AsinRequest

  field public asin:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public offer:#String
  field public offerpage:#String
  field public locale:#String
  field public mode:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      asin:String = {required-keyword "AsinRequest.asin"} asa String,
      tag:String = {required-keyword "AsinRequest.tag"} asa String,
      type:String = {required-keyword "AsinRequest.type"} asa String,
      devtag:String = {required-keyword "AsinRequest.devtag"} asa String,
      offer:#String = {uninitialized-value-for-type #String},
      offerpage:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      mode:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? offer} then
        set self.offer = offer}
    {if {keyword-supplied? offerpage} then
        set self.offerpage = offerpage}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
  }

}

{let public constant AuthorArray:ClassType = {Array-of String}}

{define-class public open AuthorRequest

  field public author:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      author:String = {required-keyword "AuthorRequest.author"} asa String,
      page:String = {required-keyword "AuthorRequest.page"} asa String,
      mode:String = {required-keyword "AuthorRequest.mode"} asa String,
      tag:String = {required-keyword "AuthorRequest.tag"} asa String,
      type:String = {required-keyword "AuthorRequest.type"} asa String,
      devtag:String = {required-keyword "AuthorRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? author} then
        set self.author = author}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open BlendedRequest

  field public blended:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      blended:String = {required-keyword "BlendedRequest.blended"} asa String,
      tag:String = {required-keyword "BlendedRequest.tag"} asa String,
      type:String = {required-keyword "BlendedRequest.type"} asa String,
      devtag:String = {required-keyword "BlendedRequest.devtag"} asa String,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? blended} then
        set self.blended = blended}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open BrowseNode

  field public browse-id:#String
  field public browse-name:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      browse-id:#String = {uninitialized-value-for-type #String},
      browse-name:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? browse-id} then
        set self.browse-id = browse-id}
    {if {keyword-supplied? browse-name} then
        set self.browse-name = browse-name}
  }

}

{let public constant BrowseNodeArray:ClassType = {Array-of BrowseNode}}

{define-class public open BrowseNodeRequest

  field public browse-node:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      browse-node:String = {required-keyword "BrowseNodeRequest.browse-node"} asa String,
      page:String = {required-keyword "BrowseNodeRequest.page"} asa String,
      mode:String = {required-keyword "BrowseNodeRequest.mode"} asa String,
      tag:String = {required-keyword "BrowseNodeRequest.tag"} asa String,
      type:String = {required-keyword "BrowseNodeRequest.type"} asa String,
      devtag:String = {required-keyword "BrowseNodeRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? browse-node} then
        set self.browse-node = browse-node}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open ClearShoppingCartRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public cart-id:String = ""
  field public hmac:String = ""
  field public locale:#String
  field public merge-cart:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "ClearShoppingCartRequest.tag"} asa String,
      devtag:String = {required-keyword "ClearShoppingCartRequest.devtag"} asa String,
      cart-id:String = {required-keyword "ClearShoppingCartRequest.cart-id"} asa String,
      hmac:String = {required-keyword "ClearShoppingCartRequest.hmac"} asa String,
      locale:#String = {uninitialized-value-for-type #String},
      merge-cart:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? merge-cart} then
        set self.merge-cart = merge-cart}
  }

}

{define-class public open CustomerReview

  field public rating:#String
  field public date:#String
  field public summary:#String
  field public comment:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      rating:#String = {uninitialized-value-for-type #String},
      date:#String = {uninitialized-value-for-type #String},
      summary:#String = {uninitialized-value-for-type #String},
      comment:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? rating} then
        set self.rating = rating}
    {if {keyword-supplied? date} then
        set self.date = date}
    {if {keyword-supplied? summary} then
        set self.summary = summary}
    {if {keyword-supplied? comment} then
        set self.comment = comment}
  }

}

{let public constant CustomerReviewArray:ClassType = {Array-of CustomerReview}}

{define-class public open Details

  field public url:#String
  field public asin:#String
  field public product-name:#String
  field public catalog:#String
  field public key-phrases:#KeyPhraseArray
  field public artists:#ArtistArray
  field public authors:#AuthorArray
  field public mpn:#String
  field public starring:#StarringArray
  field public directors:#DirectorArray
  field public theatrical-release-date:#String
  field public release-date:#String
  field public manufacturer:#String
  field public distributor:#String
  field public image-url-small:#String
  field public image-url-medium:#String
  field public image-url-large:#String
  field public merchant-id:#String
  field public min-price:#String
  field public max-price:#String
  field public min-sale-price:#String
  field public max-sale-price:#String
  field public multi-merchant:#String
  field public merchant-sku:#String
  field public list-price:#String
  field public our-price:#String
  field public used-price:#String
  field public refurbished-price:#String
  field public collectible-price:#String
  field public third-party-new-price:#String
  field public number-of-offerings:#String
  field public third-party-new-count:#String
  field public used-count:#String
  field public collectible-count:#String
  field public refurbished-count:#String
  field public third-party-product-info:#ThirdPartyProductInfo
  field public sales-rank:#String
  field public browse-list:#BrowseNodeArray
  field public media:#String
  field public reading-level:#String
  field public number-of-pages:#String
  field public number-of-issues:#String
  field public issues-per-year:#String
  field public subscription-length:#String
  field public dewey-number:#String
  field public running-time:#String
  field public publisher:#String
  field public num-media:#String
  field public isbn:#String
  field public features:#FeaturesArray
  field public mpaa-rating:#String
  field public esrb-rating:#String
  field public age-group:#String
  field public availability:#String
  field public upc:#String
  field public tracks:#TrackArray
  field public accessories:#AccessoryArray
  field public platforms:#PlatformArray
  field public encoding:#String
  field public product-description:#String
  field public reviews:#Reviews
  field public similar-products:#SimilarProductsArray
  field public featured-products:#FeaturedProductsArray
  field public lists:#ListArray
  field public status:#String
  field public variations:#VariationArray
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      url:#String = {uninitialized-value-for-type #String},
      asin:#String = {uninitialized-value-for-type #String},
      product-name:#String = {uninitialized-value-for-type #String},
      catalog:#String = {uninitialized-value-for-type #String},
      key-phrases:#KeyPhraseArray = {uninitialized-value-for-type #KeyPhraseArray},
      artists:#ArtistArray = {uninitialized-value-for-type #ArtistArray},
      authors:#AuthorArray = {uninitialized-value-for-type #AuthorArray},
      mpn:#String = {uninitialized-value-for-type #String},
      starring:#StarringArray = {uninitialized-value-for-type #StarringArray},
      directors:#DirectorArray = {uninitialized-value-for-type #DirectorArray},
      theatrical-release-date:#String = {uninitialized-value-for-type #String},
      release-date:#String = {uninitialized-value-for-type #String},
      manufacturer:#String = {uninitialized-value-for-type #String},
      distributor:#String = {uninitialized-value-for-type #String},
      image-url-small:#String = {uninitialized-value-for-type #String},
      image-url-medium:#String = {uninitialized-value-for-type #String},
      image-url-large:#String = {uninitialized-value-for-type #String},
      merchant-id:#String = {uninitialized-value-for-type #String},
      min-price:#String = {uninitialized-value-for-type #String},
      max-price:#String = {uninitialized-value-for-type #String},
      min-sale-price:#String = {uninitialized-value-for-type #String},
      max-sale-price:#String = {uninitialized-value-for-type #String},
      multi-merchant:#String = {uninitialized-value-for-type #String},
      merchant-sku:#String = {uninitialized-value-for-type #String},
      list-price:#String = {uninitialized-value-for-type #String},
      our-price:#String = {uninitialized-value-for-type #String},
      used-price:#String = {uninitialized-value-for-type #String},
      refurbished-price:#String = {uninitialized-value-for-type #String},
      collectible-price:#String = {uninitialized-value-for-type #String},
      third-party-new-price:#String = {uninitialized-value-for-type #String},
      number-of-offerings:#String = {uninitialized-value-for-type #String},
      third-party-new-count:#String = {uninitialized-value-for-type #String},
      used-count:#String = {uninitialized-value-for-type #String},
      collectible-count:#String = {uninitialized-value-for-type #String},
      refurbished-count:#String = {uninitialized-value-for-type #String},
      third-party-product-info:#ThirdPartyProductInfo = {uninitialized-value-for-type #ThirdPartyProductInfo},
      sales-rank:#String = {uninitialized-value-for-type #String},
      browse-list:#BrowseNodeArray = {uninitialized-value-for-type #BrowseNodeArray},
      media:#String = {uninitialized-value-for-type #String},
      reading-level:#String = {uninitialized-value-for-type #String},
      number-of-pages:#String = {uninitialized-value-for-type #String},
      number-of-issues:#String = {uninitialized-value-for-type #String},
      issues-per-year:#String = {uninitialized-value-for-type #String},
      subscription-length:#String = {uninitialized-value-for-type #String},
      dewey-number:#String = {uninitialized-value-for-type #String},
      running-time:#String = {uninitialized-value-for-type #String},
      publisher:#String = {uninitialized-value-for-type #String},
      num-media:#String = {uninitialized-value-for-type #String},
      isbn:#String = {uninitialized-value-for-type #String},
      features:#FeaturesArray = {uninitialized-value-for-type #FeaturesArray},
      mpaa-rating:#String = {uninitialized-value-for-type #String},
      esrb-rating:#String = {uninitialized-value-for-type #String},
      age-group:#String = {uninitialized-value-for-type #String},
      availability:#String = {uninitialized-value-for-type #String},
      upc:#String = {uninitialized-value-for-type #String},
      tracks:#TrackArray = {uninitialized-value-for-type #TrackArray},
      accessories:#AccessoryArray = {uninitialized-value-for-type #AccessoryArray},
      platforms:#PlatformArray = {uninitialized-value-for-type #PlatformArray},
      encoding:#String = {uninitialized-value-for-type #String},
      product-description:#String = {uninitialized-value-for-type #String},
      reviews:#Reviews = {uninitialized-value-for-type #Reviews},
      similar-products:#SimilarProductsArray = {uninitialized-value-for-type #SimilarProductsArray},
      featured-products:#FeaturedProductsArray = {uninitialized-value-for-type #FeaturedProductsArray},
      lists:#ListArray = {uninitialized-value-for-type #ListArray},
      status:#String = {uninitialized-value-for-type #String},
      variations:#VariationArray = {uninitialized-value-for-type #VariationArray}
    }
    {if {keyword-supplied? url} then
        set self.url = url}
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? product-name} then
        set self.product-name = product-name}
    {if {keyword-supplied? catalog} then
        set self.catalog = catalog}
    {if {keyword-supplied? key-phrases} then
        set self.key-phrases = key-phrases}
    {if {keyword-supplied? artists} then
        set self.artists = artists}
    {if {keyword-supplied? authors} then
        set self.authors = authors}
    {if {keyword-supplied? mpn} then
        set self.mpn = mpn}
    {if {keyword-supplied? starring} then
        set self.starring = starring}
    {if {keyword-supplied? directors} then
        set self.directors = directors}
    {if {keyword-supplied? theatrical-release-date} then
        set self.theatrical-release-date = theatrical-release-date}
    {if {keyword-supplied? release-date} then
        set self.release-date = release-date}
    {if {keyword-supplied? manufacturer} then
        set self.manufacturer = manufacturer}
    {if {keyword-supplied? distributor} then
        set self.distributor = distributor}
    {if {keyword-supplied? image-url-small} then
        set self.image-url-small = image-url-small}
    {if {keyword-supplied? image-url-medium} then
        set self.image-url-medium = image-url-medium}
    {if {keyword-supplied? image-url-large} then
        set self.image-url-large = image-url-large}
    {if {keyword-supplied? merchant-id} then
        set self.merchant-id = merchant-id}
    {if {keyword-supplied? min-price} then
        set self.min-price = min-price}
    {if {keyword-supplied? max-price} then
        set self.max-price = max-price}
    {if {keyword-supplied? min-sale-price} then
        set self.min-sale-price = min-sale-price}
    {if {keyword-supplied? max-sale-price} then
        set self.max-sale-price = max-sale-price}
    {if {keyword-supplied? multi-merchant} then
        set self.multi-merchant = multi-merchant}
    {if {keyword-supplied? merchant-sku} then
        set self.merchant-sku = merchant-sku}
    {if {keyword-supplied? list-price} then
        set self.list-price = list-price}
    {if {keyword-supplied? our-price} then
        set self.our-price = our-price}
    {if {keyword-supplied? used-price} then
        set self.used-price = used-price}
    {if {keyword-supplied? refurbished-price} then
        set self.refurbished-price = refurbished-price}
    {if {keyword-supplied? collectible-price} then
        set self.collectible-price = collectible-price}
    {if {keyword-supplied? third-party-new-price} then
        set self.third-party-new-price = third-party-new-price}
    {if {keyword-supplied? number-of-offerings} then
        set self.number-of-offerings = number-of-offerings}
    {if {keyword-supplied? third-party-new-count} then
        set self.third-party-new-count = third-party-new-count}
    {if {keyword-supplied? used-count} then
        set self.used-count = used-count}
    {if {keyword-supplied? collectible-count} then
        set self.collectible-count = collectible-count}
    {if {keyword-supplied? refurbished-count} then
        set self.refurbished-count = refurbished-count}
    {if {keyword-supplied? third-party-product-info} then
        set self.third-party-product-info = third-party-product-info}
    {if {keyword-supplied? sales-rank} then
        set self.sales-rank = sales-rank}
    {if {keyword-supplied? browse-list} then
        set self.browse-list = browse-list}
    {if {keyword-supplied? media} then
        set self.media = media}
    {if {keyword-supplied? reading-level} then
        set self.reading-level = reading-level}
    {if {keyword-supplied? number-of-pages} then
        set self.number-of-pages = number-of-pages}
    {if {keyword-supplied? number-of-issues} then
        set self.number-of-issues = number-of-issues}
    {if {keyword-supplied? issues-per-year} then
        set self.issues-per-year = issues-per-year}
    {if {keyword-supplied? subscription-length} then
        set self.subscription-length = subscription-length}
    {if {keyword-supplied? dewey-number} then
        set self.dewey-number = dewey-number}
    {if {keyword-supplied? running-time} then
        set self.running-time = running-time}
    {if {keyword-supplied? publisher} then
        set self.publisher = publisher}
    {if {keyword-supplied? num-media} then
        set self.num-media = num-media}
    {if {keyword-supplied? isbn} then
        set self.isbn = isbn}
    {if {keyword-supplied? features} then
        set self.features = features}
    {if {keyword-supplied? mpaa-rating} then
        set self.mpaa-rating = mpaa-rating}
    {if {keyword-supplied? esrb-rating} then
        set self.esrb-rating = esrb-rating}
    {if {keyword-supplied? age-group} then
        set self.age-group = age-group}
    {if {keyword-supplied? availability} then
        set self.availability = availability}
    {if {keyword-supplied? upc} then
        set self.upc = upc}
    {if {keyword-supplied? tracks} then
        set self.tracks = tracks}
    {if {keyword-supplied? accessories} then
        set self.accessories = accessories}
    {if {keyword-supplied? platforms} then
        set self.platforms = platforms}
    {if {keyword-supplied? encoding} then
        set self.encoding = encoding}
    {if {keyword-supplied? product-description} then
        set self.product-description = product-description}
    {if {keyword-supplied? reviews} then
        set self.reviews = reviews}
    {if {keyword-supplied? similar-products} then
        set self.similar-products = similar-products}
    {if {keyword-supplied? featured-products} then
        set self.featured-products = featured-products}
    {if {keyword-supplied? lists} then
        set self.lists = lists}
    {if {keyword-supplied? status} then
        set self.status = status}
    {if {keyword-supplied? variations} then
        set self.variations = variations}
  }

}

{let public constant DetailsArray:ClassType = {Array-of Details}}

{let public constant DirectorArray:ClassType = {Array-of String}}

{define-class public open DirectorRequest

  field public director:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      director:String = {required-keyword "DirectorRequest.director"} asa String,
      page:String = {required-keyword "DirectorRequest.page"} asa String,
      mode:String = {required-keyword "DirectorRequest.mode"} asa String,
      tag:String = {required-keyword "DirectorRequest.tag"} asa String,
      type:String = {required-keyword "DirectorRequest.type"} asa String,
      devtag:String = {required-keyword "DirectorRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? director} then
        set self.director = director}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open ExchangeRequest

  field public exchange-id:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      exchange-id:String = {required-keyword "ExchangeRequest.exchange-id"} asa String,
      tag:String = {required-keyword "ExchangeRequest.tag"} asa String,
      type:String = {required-keyword "ExchangeRequest.type"} asa String,
      devtag:String = {required-keyword "ExchangeRequest.devtag"} asa String,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open FeaturedProduct

  field public asin:#String
  field public comment:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      asin:#String = {uninitialized-value-for-type #String},
      comment:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? comment} then
        set self.comment = comment}
  }

}

{let public constant FeaturedProductsArray:ClassType = {Array-of FeaturedProduct}}

{let public constant FeaturesArray:ClassType = {Array-of String}}

{define-class public open Feedback

  field public feedback-rating:#String
  field public feedback-comments:#String
  field public feedback-date:#String
  field public feedback-rater:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      feedback-rating:#String = {uninitialized-value-for-type #String},
      feedback-comments:#String = {uninitialized-value-for-type #String},
      feedback-date:#String = {uninitialized-value-for-type #String},
      feedback-rater:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? feedback-rating} then
        set self.feedback-rating = feedback-rating}
    {if {keyword-supplied? feedback-comments} then
        set self.feedback-comments = feedback-comments}
    {if {keyword-supplied? feedback-date} then
        set self.feedback-date = feedback-date}
    {if {keyword-supplied? feedback-rater} then
        set self.feedback-rater = feedback-rater}
  }

}

{let public constant FeedbackArray:ClassType = {Array-of Feedback}}

{define-class public open GetShoppingCartRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public cart-id:String = ""
  field public hmac:String = ""
  field public locale:#String
  field public sims:#String
  field public merge-cart:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "GetShoppingCartRequest.tag"} asa String,
      devtag:String = {required-keyword "GetShoppingCartRequest.devtag"} asa String,
      cart-id:String = {required-keyword "GetShoppingCartRequest.cart-id"} asa String,
      hmac:String = {required-keyword "GetShoppingCartRequest.hmac"} asa String,
      locale:#String = {uninitialized-value-for-type #String},
      sims:#String = {uninitialized-value-for-type #String},
      merge-cart:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? sims} then
        set self.sims = sims}
    {if {keyword-supplied? merge-cart} then
        set self.merge-cart = merge-cart}
  }

}

{define-class public open GetTransactionDetailsRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public key:String = ""
  field public order-ids:OrderIdArray = {uninitialized-value-for-type OrderIdArray}
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "GetTransactionDetailsRequest.tag"} asa String,
      devtag:String = {required-keyword "GetTransactionDetailsRequest.devtag"} asa String,
      key:String = {required-keyword "GetTransactionDetailsRequest.key"} asa String,
      order-ids:OrderIdArray = {required-keyword "GetTransactionDetailsRequest.order-ids"} asa OrderIdArray,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? key} then
        set self.key = key}
    {if {keyword-supplied? order-ids} then
        set self.order-ids = order-ids}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open GetTransactionDetailsResponse

  field public short-summaries:ShortSummaryArray = {uninitialized-value-for-type ShortSummaryArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      short-summaries:ShortSummaryArray = {required-keyword "GetTransactionDetailsResponse.short-summaries"} asa ShortSummaryArray
    }
    {if {keyword-supplied? short-summaries} then
        set self.short-summaries = short-summaries}
  }

}

{define-class public open Item

  field public item-id:String = ""
  field public product-name:String = ""
  field public catalog:String = ""
  field public asin:#String
  field public exchange-id:#String
  field public quantity:String = ""
  field public list-price:#String
  field public our-price:String = ""
  field public merchant-sku:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      item-id:String = {required-keyword "Item.item-id"} asa String,
      product-name:String = {required-keyword "Item.product-name"} asa String,
      catalog:String = {required-keyword "Item.catalog"} asa String,
      asin:#String = {uninitialized-value-for-type #String},
      exchange-id:#String = {uninitialized-value-for-type #String},
      quantity:String = {required-keyword "Item.quantity"} asa String,
      list-price:#String = {uninitialized-value-for-type #String},
      our-price:String = {required-keyword "Item.our-price"} asa String,
      merchant-sku:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? item-id} then
        set self.item-id = item-id}
    {if {keyword-supplied? product-name} then
        set self.product-name = product-name}
    {if {keyword-supplied? catalog} then
        set self.catalog = catalog}
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? quantity} then
        set self.quantity = quantity}
    {if {keyword-supplied? list-price} then
        set self.list-price = list-price}
    {if {keyword-supplied? our-price} then
        set self.our-price = our-price}
    {if {keyword-supplied? merchant-sku} then
        set self.merchant-sku = merchant-sku}
  }

}

{let public constant ItemArray:ClassType = {Array-of Item}}

{let public constant ItemIdArray:ClassType = {Array-of String}}

{define-class public open ItemQuantity

  field public item-id:String = ""
  field public quantity:String = ""
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      item-id:String = {required-keyword "ItemQuantity.item-id"} asa String,
      quantity:String = {required-keyword "ItemQuantity.quantity"} asa String
    }
    {if {keyword-supplied? item-id} then
        set self.item-id = item-id}
    {if {keyword-supplied? quantity} then
        set self.quantity = quantity}
  }

}

{let public constant ItemQuantityArray:ClassType = {Array-of ItemQuantity}}

{define-class public open KeyPhrase

  field public key-phrase:#String
  field public type:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      key-phrase:#String = {uninitialized-value-for-type #String},
      type:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? key-phrase} then
        set self.key-phrase = key-phrase}
    {if {keyword-supplied? type} then
        set self.type = type}
  }

}

{let public constant KeyPhraseArray:ClassType = {Array-of KeyPhrase}}

{define-class public open KeywordRequest

  field public keyword:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      keyword:String = {required-keyword "KeywordRequest.keyword"} asa String,
      page:String = {required-keyword "KeywordRequest.page"} asa String,
      mode:String = {required-keyword "KeywordRequest.mode"} asa String,
      tag:String = {required-keyword "KeywordRequest.tag"} asa String,
      type:String = {required-keyword "KeywordRequest.type"} asa String,
      devtag:String = {required-keyword "KeywordRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? keyword} then
        set self.keyword = keyword}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{let public constant ListArray:ClassType = {Array-of String}}

{define-class public open ListManiaRequest

  field public lm-id:String = ""
  field public page:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      lm-id:String = {required-keyword "ListManiaRequest.lm-id"} asa String,
      page:String = {required-keyword "ListManiaRequest.page"} asa String,
      tag:String = {required-keyword "ListManiaRequest.tag"} asa String,
      type:String = {required-keyword "ListManiaRequest.type"} asa String,
      devtag:String = {required-keyword "ListManiaRequest.devtag"} asa String,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? lm-id} then
        set self.lm-id = lm-id}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open ListingProductDetails

  field public exchange-id:#String
  field public listing-id:#String
  field public exchange-title:#String
  field public exchange-description:#String
  field public exchange-price:#String
  field public exchange-asin:#String
  field public exchange-end-date:#String
  field public exchange-tiny-image:#String
  field public exchange-seller-id:#String
  field public exchange-seller-nickname:#String
  field public exchange-start-date:#String
  field public exchange-status:#String
  field public exchange-quantity:#String
  field public exchange-quantity-allocated:#String
  field public exchange-featured-category:#String
  field public exchange-condition:#String
  field public exchange-condition-type:#String
  field public exchange-availability:#String
  field public exchange-offering-type:#String
  field public exchange-seller-state:#String
  field public exchange-seller-country:#String
  field public exchange-seller-rating:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      exchange-id:#String = {uninitialized-value-for-type #String},
      listing-id:#String = {uninitialized-value-for-type #String},
      exchange-title:#String = {uninitialized-value-for-type #String},
      exchange-description:#String = {uninitialized-value-for-type #String},
      exchange-price:#String = {uninitialized-value-for-type #String},
      exchange-asin:#String = {uninitialized-value-for-type #String},
      exchange-end-date:#String = {uninitialized-value-for-type #String},
      exchange-tiny-image:#String = {uninitialized-value-for-type #String},
      exchange-seller-id:#String = {uninitialized-value-for-type #String},
      exchange-seller-nickname:#String = {uninitialized-value-for-type #String},
      exchange-start-date:#String = {uninitialized-value-for-type #String},
      exchange-status:#String = {uninitialized-value-for-type #String},
      exchange-quantity:#String = {uninitialized-value-for-type #String},
      exchange-quantity-allocated:#String = {uninitialized-value-for-type #String},
      exchange-featured-category:#String = {uninitialized-value-for-type #String},
      exchange-condition:#String = {uninitialized-value-for-type #String},
      exchange-condition-type:#String = {uninitialized-value-for-type #String},
      exchange-availability:#String = {uninitialized-value-for-type #String},
      exchange-offering-type:#String = {uninitialized-value-for-type #String},
      exchange-seller-state:#String = {uninitialized-value-for-type #String},
      exchange-seller-country:#String = {uninitialized-value-for-type #String},
      exchange-seller-rating:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? listing-id} then
        set self.listing-id = listing-id}
    {if {keyword-supplied? exchange-title} then
        set self.exchange-title = exchange-title}
    {if {keyword-supplied? exchange-description} then
        set self.exchange-description = exchange-description}
    {if {keyword-supplied? exchange-price} then
        set self.exchange-price = exchange-price}
    {if {keyword-supplied? exchange-asin} then
        set self.exchange-asin = exchange-asin}
    {if {keyword-supplied? exchange-end-date} then
        set self.exchange-end-date = exchange-end-date}
    {if {keyword-supplied? exchange-tiny-image} then
        set self.exchange-tiny-image = exchange-tiny-image}
    {if {keyword-supplied? exchange-seller-id} then
        set self.exchange-seller-id = exchange-seller-id}
    {if {keyword-supplied? exchange-seller-nickname} then
        set self.exchange-seller-nickname = exchange-seller-nickname}
    {if {keyword-supplied? exchange-start-date} then
        set self.exchange-start-date = exchange-start-date}
    {if {keyword-supplied? exchange-status} then
        set self.exchange-status = exchange-status}
    {if {keyword-supplied? exchange-quantity} then
        set self.exchange-quantity = exchange-quantity}
    {if {keyword-supplied? exchange-quantity-allocated} then
        set self.exchange-quantity-allocated = exchange-quantity-allocated}
    {if {keyword-supplied? exchange-featured-category} then
        set self.exchange-featured-category = exchange-featured-category}
    {if {keyword-supplied? exchange-condition} then
        set self.exchange-condition = exchange-condition}
    {if {keyword-supplied? exchange-condition-type} then
        set self.exchange-condition-type = exchange-condition-type}
    {if {keyword-supplied? exchange-availability} then
        set self.exchange-availability = exchange-availability}
    {if {keyword-supplied? exchange-offering-type} then
        set self.exchange-offering-type = exchange-offering-type}
    {if {keyword-supplied? exchange-seller-state} then
        set self.exchange-seller-state = exchange-seller-state}
    {if {keyword-supplied? exchange-seller-country} then
        set self.exchange-seller-country = exchange-seller-country}
    {if {keyword-supplied? exchange-seller-rating} then
        set self.exchange-seller-rating = exchange-seller-rating}
  }

}

{let public constant ListingProductDetailsArray:ClassType = {Array-of ListingProductDetails}}

{define-class public open ListingProductInfo

  field public listing-product-details:ListingProductDetailsArray = {uninitialized-value-for-type ListingProductDetailsArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      listing-product-details:ListingProductDetailsArray = {required-keyword "ListingProductInfo.listing-product-details"} asa ListingProductDetailsArray
    }
    {if {keyword-supplied? listing-product-details} then
        set self.listing-product-details = listing-product-details}
  }

}

{define-class public open ManufacturerRequest

  field public manufacturer:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public keywords:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      manufacturer:String = {required-keyword "ManufacturerRequest.manufacturer"} asa String,
      page:String = {required-keyword "ManufacturerRequest.page"} asa String,
      mode:String = {required-keyword "ManufacturerRequest.mode"} asa String,
      tag:String = {required-keyword "ManufacturerRequest.tag"} asa String,
      type:String = {required-keyword "ManufacturerRequest.type"} asa String,
      devtag:String = {required-keyword "ManufacturerRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? manufacturer} then
        set self.manufacturer = manufacturer}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open MarketplaceRequest

  field public marketplace-search:String = ""
  field public seller-id:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public page:String = ""
  field public keyword:#String
  field public keyword-search:#String
  field public browse-id:#String
  field public zipcode:#String
  field public area-id:#String
  field public geo:#String
  field public sort:#String
  field public listing-id:#String
  field public desc:#String
  field public locale:#String
  field public index:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      marketplace-search:String = {required-keyword "MarketplaceRequest.marketplace-search"} asa String,
      seller-id:String = {required-keyword "MarketplaceRequest.seller-id"} asa String,
      tag:String = {required-keyword "MarketplaceRequest.tag"} asa String,
      type:String = {required-keyword "MarketplaceRequest.type"} asa String,
      devtag:String = {required-keyword "MarketplaceRequest.devtag"} asa String,
      page:String = {required-keyword "MarketplaceRequest.page"} asa String,
      keyword:#String = {uninitialized-value-for-type #String},
      keyword-search:#String = {uninitialized-value-for-type #String},
      browse-id:#String = {uninitialized-value-for-type #String},
      zipcode:#String = {uninitialized-value-for-type #String},
      area-id:#String = {uninitialized-value-for-type #String},
      geo:#String = {uninitialized-value-for-type #String},
      sort:#String = {uninitialized-value-for-type #String},
      listing-id:#String = {uninitialized-value-for-type #String},
      desc:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      index:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? marketplace-search} then
        set self.marketplace-search = marketplace-search}
    {if {keyword-supplied? seller-id} then
        set self.seller-id = seller-id}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? keyword} then
        set self.keyword = keyword}
    {if {keyword-supplied? keyword-search} then
        set self.keyword-search = keyword-search}
    {if {keyword-supplied? browse-id} then
        set self.browse-id = browse-id}
    {if {keyword-supplied? zipcode} then
        set self.zipcode = zipcode}
    {if {keyword-supplied? area-id} then
        set self.area-id = area-id}
    {if {keyword-supplied? geo} then
        set self.geo = geo}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? listing-id} then
        set self.listing-id = listing-id}
    {if {keyword-supplied? desc} then
        set self.desc = desc}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? index} then
        set self.index = index}
  }

}

{define-class public open MarketplaceSearch

  field public marketplace-search-details:MarketplaceSearchDetailsArray = {uninitialized-value-for-type MarketplaceSearchDetailsArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      marketplace-search-details:MarketplaceSearchDetailsArray = {required-keyword "MarketplaceSearch.marketplace-search-details"} asa MarketplaceSearchDetailsArray
    }
    {if {keyword-supplied? marketplace-search-details} then
        set self.marketplace-search-details = marketplace-search-details}
  }

}

{define-class public open MarketplaceSearchDetails

  field public number-of-open-listings:#String
  field public listing-product-info:#ListingProductInfo
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      number-of-open-listings:#String = {uninitialized-value-for-type #String},
      listing-product-info:#ListingProductInfo = {uninitialized-value-for-type #ListingProductInfo}
    }
    {if {keyword-supplied? number-of-open-listings} then
        set self.number-of-open-listings = number-of-open-listings}
    {if {keyword-supplied? listing-product-info} then
        set self.listing-product-info = listing-product-info}
  }

}

{let public constant MarketplaceSearchDetailsArray:ClassType = {Array-of MarketplaceSearchDetails}}

{define-class public open ModifyShoppingCartItemsRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public cart-id:String = ""
  field public hmac:String = ""
  field public items:ItemQuantityArray = {uninitialized-value-for-type ItemQuantityArray}
  field public locale:#String
  field public sims:#String
  field public merge-cart:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "ModifyShoppingCartItemsRequest.tag"} asa String,
      devtag:String = {required-keyword "ModifyShoppingCartItemsRequest.devtag"} asa String,
      cart-id:String = {required-keyword "ModifyShoppingCartItemsRequest.cart-id"} asa String,
      hmac:String = {required-keyword "ModifyShoppingCartItemsRequest.hmac"} asa String,
      items:ItemQuantityArray = {required-keyword "ModifyShoppingCartItemsRequest.items"} asa ItemQuantityArray,
      locale:#String = {uninitialized-value-for-type #String},
      sims:#String = {uninitialized-value-for-type #String},
      merge-cart:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? items} then
        set self.items = items}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? sims} then
        set self.sims = sims}
    {if {keyword-supplied? merge-cart} then
        set self.merge-cart = merge-cart}
  }

}

{let public constant OrderIdArray:ClassType = {Array-of String}}

{define-class public open OrderItem

  field public item-number:String = ""
  field public asin:#String
  field public exchange-id:#String
  field public quantity:String = ""
  field public unit-price:Price = {uninitialized-value-for-type Price}
  field public total-price:Price = {uninitialized-value-for-type Price}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      item-number:String = {required-keyword "OrderItem.item-number"} asa String,
      asin:#String = {uninitialized-value-for-type #String},
      exchange-id:#String = {uninitialized-value-for-type #String},
      quantity:String = {required-keyword "OrderItem.quantity"} asa String,
      unit-price:Price = {required-keyword "OrderItem.unit-price"} asa Price,
      total-price:Price = {required-keyword "OrderItem.total-price"} asa Price
    }
    {if {keyword-supplied? item-number} then
        set self.item-number = item-number}
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? quantity} then
        set self.quantity = quantity}
    {if {keyword-supplied? unit-price} then
        set self.unit-price = unit-price}
    {if {keyword-supplied? total-price} then
        set self.total-price = total-price}
  }

}

{let public constant OrderItemArray:ClassType = {Array-of OrderItem}}

{define-class public open Package

  field public tracking-number:String = ""
  field public carrier-name:String = ""
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tracking-number:String = {required-keyword "Package.tracking-number"} asa String,
      carrier-name:String = {required-keyword "Package.carrier-name"} asa String
    }
    {if {keyword-supplied? tracking-number} then
        set self.tracking-number = tracking-number}
    {if {keyword-supplied? carrier-name} then
        set self.carrier-name = carrier-name}
  }

}

{let public constant PackageArray:ClassType = {Array-of Package}}

{let public constant PlatformArray:ClassType = {Array-of String}}

{define-class public open PowerRequest

  field public power:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      power:String = {required-keyword "PowerRequest.power"} asa String,
      page:String = {required-keyword "PowerRequest.page"} asa String,
      mode:String = {required-keyword "PowerRequest.mode"} asa String,
      tag:String = {required-keyword "PowerRequest.tag"} asa String,
      type:String = {required-keyword "PowerRequest.type"} asa String,
      devtag:String = {required-keyword "PowerRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? power} then
        set self.power = power}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open Price

  field public amount:String = ""
  field public currency-code:String = ""
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      amount:String = {required-keyword "Price.amount"} asa String,
      currency-code:String = {required-keyword "Price.currency-code"} asa String
    }
    {if {keyword-supplied? amount} then
        set self.amount = amount}
    {if {keyword-supplied? currency-code} then
        set self.currency-code = currency-code}
  }

}

{define-class public open ProductInfo

  field public total-results:#String
  field public total-pages:#String
  field public list-name:#String
  field public details:#DetailsArray
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      total-results:#String = {uninitialized-value-for-type #String},
      total-pages:#String = {uninitialized-value-for-type #String},
      list-name:#String = {uninitialized-value-for-type #String},
      details:#DetailsArray = {uninitialized-value-for-type #DetailsArray}
    }
    {if {keyword-supplied? total-results} then
        set self.total-results = total-results}
    {if {keyword-supplied? total-pages} then
        set self.total-pages = total-pages}
    {if {keyword-supplied? list-name} then
        set self.list-name = list-name}
    {if {keyword-supplied? details} then
        set self.details = details}
  }

}

{define-class public open ProductLine

  field public mode:#String
  field public relevance-rank:#String
  field public product-info:#ProductInfo
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      mode:#String = {uninitialized-value-for-type #String},
      relevance-rank:#String = {uninitialized-value-for-type #String},
      product-info:#ProductInfo = {uninitialized-value-for-type #ProductInfo}
    }
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? relevance-rank} then
        set self.relevance-rank = relevance-rank}
    {if {keyword-supplied? product-info} then
        set self.product-info = product-info}
  }

}

{let public constant ProductLineArray:ClassType = {Array-of ProductLine}}

{define-class public open RemoveShoppingCartItemsRequest

  field public tag:String = ""
  field public devtag:String = ""
  field public cart-id:String = ""
  field public hmac:String = ""
  field public items:ItemIdArray = {uninitialized-value-for-type ItemIdArray}
  field public locale:#String
  field public sims:#String
  field public merge-cart:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      tag:String = {required-keyword "RemoveShoppingCartItemsRequest.tag"} asa String,
      devtag:String = {required-keyword "RemoveShoppingCartItemsRequest.devtag"} asa String,
      cart-id:String = {required-keyword "RemoveShoppingCartItemsRequest.cart-id"} asa String,
      hmac:String = {required-keyword "RemoveShoppingCartItemsRequest.hmac"} asa String,
      items:ItemIdArray = {required-keyword "RemoveShoppingCartItemsRequest.items"} asa ItemIdArray,
      locale:#String = {uninitialized-value-for-type #String},
      sims:#String = {uninitialized-value-for-type #String},
      merge-cart:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? items} then
        set self.items = items}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? sims} then
        set self.sims = sims}
    {if {keyword-supplied? merge-cart} then
        set self.merge-cart = merge-cart}
  }

}

{define-class public open Reviews

  field public avg-customer-rating:#String
  field public total-customer-reviews:#String
  field public customer-reviews:#CustomerReviewArray
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      avg-customer-rating:#String = {uninitialized-value-for-type #String},
      total-customer-reviews:#String = {uninitialized-value-for-type #String},
      customer-reviews:#CustomerReviewArray = {uninitialized-value-for-type #CustomerReviewArray}
    }
    {if {keyword-supplied? avg-customer-rating} then
        set self.avg-customer-rating = avg-customer-rating}
    {if {keyword-supplied? total-customer-reviews} then
        set self.total-customer-reviews = total-customer-reviews}
    {if {keyword-supplied? customer-reviews} then
        set self.customer-reviews = customer-reviews}
  }

}

{define-class public open SellerFeedback

  field public feedback:FeedbackArray = {uninitialized-value-for-type FeedbackArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      feedback:FeedbackArray = {required-keyword "SellerFeedback.feedback"} asa FeedbackArray
    }
    {if {keyword-supplied? feedback} then
        set self.feedback = feedback}
  }

}

{define-class public open SellerProfile

  field public seller-profile-details:SellerProfileDetailsArray = {uninitialized-value-for-type SellerProfileDetailsArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-profile-details:SellerProfileDetailsArray = {required-keyword "SellerProfile.seller-profile-details"} asa SellerProfileDetailsArray
    }
    {if {keyword-supplied? seller-profile-details} then
        set self.seller-profile-details = seller-profile-details}
  }

}

{define-class public open SellerProfileDetails

  field public seller-nickname:#String
  field public overall-feedback-rating:#String
  field public number-of-feedback:#String
  field public number-of-canceled-bids:#String
  field public number-of-canceled-auctions:#String
  field public store-id:#String
  field public store-name:#String
  field public seller-feedback:#SellerFeedback
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-nickname:#String = {uninitialized-value-for-type #String},
      overall-feedback-rating:#String = {uninitialized-value-for-type #String},
      number-of-feedback:#String = {uninitialized-value-for-type #String},
      number-of-canceled-bids:#String = {uninitialized-value-for-type #String},
      number-of-canceled-auctions:#String = {uninitialized-value-for-type #String},
      store-id:#String = {uninitialized-value-for-type #String},
      store-name:#String = {uninitialized-value-for-type #String},
      seller-feedback:#SellerFeedback = {uninitialized-value-for-type #SellerFeedback}
    }
    {if {keyword-supplied? seller-nickname} then
        set self.seller-nickname = seller-nickname}
    {if {keyword-supplied? overall-feedback-rating} then
        set self.overall-feedback-rating = overall-feedback-rating}
    {if {keyword-supplied? number-of-feedback} then
        set self.number-of-feedback = number-of-feedback}
    {if {keyword-supplied? number-of-canceled-bids} then
        set self.number-of-canceled-bids = number-of-canceled-bids}
    {if {keyword-supplied? number-of-canceled-auctions} then
        set self.number-of-canceled-auctions = number-of-canceled-auctions}
    {if {keyword-supplied? store-id} then
        set self.store-id = store-id}
    {if {keyword-supplied? store-name} then
        set self.store-name = store-name}
    {if {keyword-supplied? seller-feedback} then
        set self.seller-feedback = seller-feedback}
  }

}

{let public constant SellerProfileDetailsArray:ClassType = {Array-of SellerProfileDetails}}

{define-class public open SellerProfileRequest

  field public seller-id:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public page:String = ""
  field public desc:#String
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-id:String = {required-keyword "SellerProfileRequest.seller-id"} asa String,
      tag:String = {required-keyword "SellerProfileRequest.tag"} asa String,
      type:String = {required-keyword "SellerProfileRequest.type"} asa String,
      devtag:String = {required-keyword "SellerProfileRequest.devtag"} asa String,
      page:String = {required-keyword "SellerProfileRequest.page"} asa String,
      desc:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? seller-id} then
        set self.seller-id = seller-id}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? desc} then
        set self.desc = desc}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open SellerRequest

  field public seller-id:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public offerstatus:String = ""
  field public page:String = ""
  field public seller-browse-id:#String
  field public keyword:#String
  field public desc:#String
  field public locale:#String
  field public index:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-id:String = {required-keyword "SellerRequest.seller-id"} asa String,
      tag:String = {required-keyword "SellerRequest.tag"} asa String,
      type:String = {required-keyword "SellerRequest.type"} asa String,
      devtag:String = {required-keyword "SellerRequest.devtag"} asa String,
      offerstatus:String = {required-keyword "SellerRequest.offerstatus"} asa String,
      page:String = {required-keyword "SellerRequest.page"} asa String,
      seller-browse-id:#String = {uninitialized-value-for-type #String},
      keyword:#String = {uninitialized-value-for-type #String},
      desc:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      index:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? seller-id} then
        set self.seller-id = seller-id}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? offerstatus} then
        set self.offerstatus = offerstatus}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? seller-browse-id} then
        set self.seller-browse-id = seller-browse-id}
    {if {keyword-supplied? keyword} then
        set self.keyword = keyword}
    {if {keyword-supplied? desc} then
        set self.desc = desc}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? index} then
        set self.index = index}
  }

}

{define-class public open SellerSearch

  field public seller-search-details:SellerSearchDetailsArray = {uninitialized-value-for-type SellerSearchDetailsArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-search-details:SellerSearchDetailsArray = {required-keyword "SellerSearch.seller-search-details"} asa SellerSearchDetailsArray
    }
    {if {keyword-supplied? seller-search-details} then
        set self.seller-search-details = seller-search-details}
  }

}

{define-class public open SellerSearchDetails

  field public seller-nickname:#String
  field public store-id:#String
  field public store-name:#String
  field public number-of-open-listings:#String
  field public listing-product-info:#ListingProductInfo
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      seller-nickname:#String = {uninitialized-value-for-type #String},
      store-id:#String = {uninitialized-value-for-type #String},
      store-name:#String = {uninitialized-value-for-type #String},
      number-of-open-listings:#String = {uninitialized-value-for-type #String},
      listing-product-info:#ListingProductInfo = {uninitialized-value-for-type #ListingProductInfo}
    }
    {if {keyword-supplied? seller-nickname} then
        set self.seller-nickname = seller-nickname}
    {if {keyword-supplied? store-id} then
        set self.store-id = store-id}
    {if {keyword-supplied? store-name} then
        set self.store-name = store-name}
    {if {keyword-supplied? number-of-open-listings} then
        set self.number-of-open-listings = number-of-open-listings}
    {if {keyword-supplied? listing-product-info} then
        set self.listing-product-info = listing-product-info}
  }

}

{let public constant SellerSearchDetailsArray:ClassType = {Array-of SellerSearchDetails}}

{define-class public open ShoppingCart

  field public cart-id:String = ""
  field public hmac:String = ""
  field public purchase-url:String = ""
  field public items:#ItemArray
  field public similar-products:#SimilarProductsArray
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      cart-id:String = {required-keyword "ShoppingCart.cart-id"} asa String,
      hmac:String = {required-keyword "ShoppingCart.hmac"} asa String,
      purchase-url:String = {required-keyword "ShoppingCart.purchase-url"} asa String,
      items:#ItemArray = {uninitialized-value-for-type #ItemArray},
      similar-products:#SimilarProductsArray = {uninitialized-value-for-type #SimilarProductsArray}
    }
    {if {keyword-supplied? cart-id} then
        set self.cart-id = cart-id}
    {if {keyword-supplied? hmac} then
        set self.hmac = hmac}
    {if {keyword-supplied? purchase-url} then
        set self.purchase-url = purchase-url}
    {if {keyword-supplied? items} then
        set self.items = items}
    {if {keyword-supplied? similar-products} then
        set self.similar-products = similar-products}
  }

}

{define-class public open ShortSummary

  field public order-id:String = ""
  field public seller-id:String = ""
  field public condition:String = ""
  field public transaction-date:String = ""
  field public transaction-date-epoch:String = ""
  field public total:Price = {uninitialized-value-for-type Price}
  field public subtotal:Price = {uninitialized-value-for-type Price}
  field public shipping:Price = {uninitialized-value-for-type Price}
  field public tax:Price = {uninitialized-value-for-type Price}
  field public promotion:Price = {uninitialized-value-for-type Price}
  field public store-name:String = ""
  field public packages:#PackageArray
  field public order-items:#OrderItemArray
  field public error-code:#String
  field public error-string:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      order-id:String = {required-keyword "ShortSummary.order-id"} asa String,
      seller-id:String = {required-keyword "ShortSummary.seller-id"} asa String,
      condition:String = {required-keyword "ShortSummary.condition"} asa String,
      transaction-date:String = {required-keyword "ShortSummary.transaction-date"} asa String,
      transaction-date-epoch:String = {required-keyword "ShortSummary.transaction-date-epoch"} asa String,
      total:Price = {required-keyword "ShortSummary.total"} asa Price,
      subtotal:Price = {required-keyword "ShortSummary.subtotal"} asa Price,
      shipping:Price = {required-keyword "ShortSummary.shipping"} asa Price,
      tax:Price = {required-keyword "ShortSummary.tax"} asa Price,
      promotion:Price = {required-keyword "ShortSummary.promotion"} asa Price,
      store-name:String = {required-keyword "ShortSummary.store-name"} asa String,
      packages:#PackageArray = {uninitialized-value-for-type #PackageArray},
      order-items:#OrderItemArray = {uninitialized-value-for-type #OrderItemArray},
      error-code:#String = {uninitialized-value-for-type #String},
      error-string:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? order-id} then
        set self.order-id = order-id}
    {if {keyword-supplied? seller-id} then
        set self.seller-id = seller-id}
    {if {keyword-supplied? condition} then
        set self.condition = condition}
    {if {keyword-supplied? transaction-date} then
        set self.transaction-date = transaction-date}
    {if {keyword-supplied? transaction-date-epoch} then
        set self.transaction-date-epoch = transaction-date-epoch}
    {if {keyword-supplied? total} then
        set self.total = total}
    {if {keyword-supplied? subtotal} then
        set self.subtotal = subtotal}
    {if {keyword-supplied? shipping} then
        set self.shipping = shipping}
    {if {keyword-supplied? tax} then
        set self.tax = tax}
    {if {keyword-supplied? promotion} then
        set self.promotion = promotion}
    {if {keyword-supplied? store-name} then
        set self.store-name = store-name}
    {if {keyword-supplied? packages} then
        set self.packages = packages}
    {if {keyword-supplied? order-items} then
        set self.order-items = order-items}
    {if {keyword-supplied? error-code} then
        set self.error-code = error-code}
    {if {keyword-supplied? error-string} then
        set self.error-string = error-string}
  }

}

{let public constant ShortSummaryArray:ClassType = {Array-of ShortSummary}}

{let public constant SimilarProductsArray:ClassType = {Array-of String}}

{define-class public open SimilarityRequest

  field public asin:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      asin:String = {required-keyword "SimilarityRequest.asin"} asa String,
      tag:String = {required-keyword "SimilarityRequest.tag"} asa String,
      type:String = {required-keyword "SimilarityRequest.type"} asa String,
      devtag:String = {required-keyword "SimilarityRequest.devtag"} asa String,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open SkuRequest

  field public sku:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public merchant-id:#String
  field public keywords:#String
  field public sort:#String
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      sku:String = {required-keyword "SkuRequest.sku"} asa String,
      mode:String = {required-keyword "SkuRequest.mode"} asa String,
      tag:String = {required-keyword "SkuRequest.tag"} asa String,
      type:String = {required-keyword "SkuRequest.type"} asa String,
      devtag:String = {required-keyword "SkuRequest.devtag"} asa String,
      merchant-id:#String = {uninitialized-value-for-type #String},
      keywords:#String = {uninitialized-value-for-type #String},
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? sku} then
        set self.sku = sku}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? merchant-id} then
        set self.merchant-id = merchant-id}
    {if {keyword-supplied? keywords} then
        set self.keywords = keywords}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{let public constant StarringArray:ClassType = {Array-of String}}

{define-class public open TextStreamRequest

  field public text-stream:String = ""
  field public page:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  field public price:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      text-stream:String = {required-keyword "TextStreamRequest.text-stream"} asa String,
      page:String = {required-keyword "TextStreamRequest.page"} asa String,
      mode:String = {required-keyword "TextStreamRequest.mode"} asa String,
      tag:String = {required-keyword "TextStreamRequest.tag"} asa String,
      type:String = {required-keyword "TextStreamRequest.type"} asa String,
      devtag:String = {required-keyword "TextStreamRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? text-stream} then
        set self.text-stream = text-stream}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
    {if {keyword-supplied? price} then
        set self.price = price}
  }

}

{define-class public open ThirdPartyProductDetails

  field public offering-type:#String
  field public seller-id:#String
  field public seller-nickname:#String
  field public exchange-id:#String
  field public offering-price:#String
  field public condition:#String
  field public condition-type:#String
  field public exchange-availability:#String
  field public seller-country:#String
  field public seller-state:#String
  field public ship-comments:#String
  field public seller-rating:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      offering-type:#String = {uninitialized-value-for-type #String},
      seller-id:#String = {uninitialized-value-for-type #String},
      seller-nickname:#String = {uninitialized-value-for-type #String},
      exchange-id:#String = {uninitialized-value-for-type #String},
      offering-price:#String = {uninitialized-value-for-type #String},
      condition:#String = {uninitialized-value-for-type #String},
      condition-type:#String = {uninitialized-value-for-type #String},
      exchange-availability:#String = {uninitialized-value-for-type #String},
      seller-country:#String = {uninitialized-value-for-type #String},
      seller-state:#String = {uninitialized-value-for-type #String},
      ship-comments:#String = {uninitialized-value-for-type #String},
      seller-rating:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? offering-type} then
        set self.offering-type = offering-type}
    {if {keyword-supplied? seller-id} then
        set self.seller-id = seller-id}
    {if {keyword-supplied? seller-nickname} then
        set self.seller-nickname = seller-nickname}
    {if {keyword-supplied? exchange-id} then
        set self.exchange-id = exchange-id}
    {if {keyword-supplied? offering-price} then
        set self.offering-price = offering-price}
    {if {keyword-supplied? condition} then
        set self.condition = condition}
    {if {keyword-supplied? condition-type} then
        set self.condition-type = condition-type}
    {if {keyword-supplied? exchange-availability} then
        set self.exchange-availability = exchange-availability}
    {if {keyword-supplied? seller-country} then
        set self.seller-country = seller-country}
    {if {keyword-supplied? seller-state} then
        set self.seller-state = seller-state}
    {if {keyword-supplied? ship-comments} then
        set self.ship-comments = ship-comments}
    {if {keyword-supplied? seller-rating} then
        set self.seller-rating = seller-rating}
  }

}

{let public constant ThirdPartyProductDetailsArray:ClassType = {Array-of ThirdPartyProductDetails}}

{define-class public open ThirdPartyProductInfo

  field public third-party-product-details:ThirdPartyProductDetailsArray = {uninitialized-value-for-type ThirdPartyProductDetailsArray}
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      third-party-product-details:ThirdPartyProductDetailsArray = {required-keyword "ThirdPartyProductInfo.third-party-product-details"} asa ThirdPartyProductDetailsArray
    }
    {if {keyword-supplied? third-party-product-details} then
        set self.third-party-product-details = third-party-product-details}
  }

}

{define-class public open Track

  field public track-name:#String
  field public by-artist:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      track-name:#String = {uninitialized-value-for-type #String},
      by-artist:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? track-name} then
        set self.track-name = track-name}
    {if {keyword-supplied? by-artist} then
        set self.by-artist = by-artist}
  }

}

{let public constant TrackArray:ClassType = {Array-of Track}}

{define-class public open UpcRequest

  field public upc:String = ""
  field public mode:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public sort:#String
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      upc:String = {required-keyword "UpcRequest.upc"} asa String,
      mode:String = {required-keyword "UpcRequest.mode"} asa String,
      tag:String = {required-keyword "UpcRequest.tag"} asa String,
      type:String = {required-keyword "UpcRequest.type"} asa String,
      devtag:String = {required-keyword "UpcRequest.devtag"} asa String,
      sort:#String = {uninitialized-value-for-type #String},
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? upc} then
        set self.upc = upc}
    {if {keyword-supplied? mode} then
        set self.mode = mode}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? sort} then
        set self.sort = sort}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

{define-class public open Variation

  field public asin:#String
  field public clothing-size:#String
  field public clothing-color:#String
  field public price:#String
  field public sale-price:#String
  field public availability:#String
  field public multi-merchant:#String
  field public merchant-sku:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      asin:#String = {uninitialized-value-for-type #String},
      clothing-size:#String = {uninitialized-value-for-type #String},
      clothing-color:#String = {uninitialized-value-for-type #String},
      price:#String = {uninitialized-value-for-type #String},
      sale-price:#String = {uninitialized-value-for-type #String},
      availability:#String = {uninitialized-value-for-type #String},
      multi-merchant:#String = {uninitialized-value-for-type #String},
      merchant-sku:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? asin} then
        set self.asin = asin}
    {if {keyword-supplied? clothing-size} then
        set self.clothing-size = clothing-size}
    {if {keyword-supplied? clothing-color} then
        set self.clothing-color = clothing-color}
    {if {keyword-supplied? price} then
        set self.price = price}
    {if {keyword-supplied? sale-price} then
        set self.sale-price = sale-price}
    {if {keyword-supplied? availability} then
        set self.availability = availability}
    {if {keyword-supplied? multi-merchant} then
        set self.multi-merchant = multi-merchant}
    {if {keyword-supplied? merchant-sku} then
        set self.merchant-sku = merchant-sku}
  }

}

{let public constant VariationArray:ClassType = {Array-of Variation}}

{define-class public open WishlistRequest

  field public wishlist-id:String = ""
  field public page:String = ""
  field public tag:String = ""
  field public type:String = ""
  field public devtag:String = ""
  field public locale:#String
  {constructor public {default}
  }
  {constructor public 
    {from-keywords
      wishlist-id:String = {required-keyword "WishlistRequest.wishlist-id"} asa String,
      page:String = {required-keyword "WishlistRequest.page"} asa String,
      tag:String = {required-keyword "WishlistRequest.tag"} asa String,
      type:String = {required-keyword "WishlistRequest.type"} asa String,
      devtag:String = {required-keyword "WishlistRequest.devtag"} asa String,
      locale:#String = {uninitialized-value-for-type #String}
    }
    {if {keyword-supplied? wishlist-id} then
        set self.wishlist-id = wishlist-id}
    {if {keyword-supplied? page} then
        set self.page = page}
    {if {keyword-supplied? tag} then
        set self.tag = tag}
    {if {keyword-supplied? type} then
        set self.type = type}
    {if {keyword-supplied? devtag} then
        set self.devtag = devtag}
    {if {keyword-supplied? locale} then
        set self.locale = locale}
  }

}

