||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| simple concrete implementation of RecordSet
|| -- like BasicRecordSet, but
|| -- independent of internal record storage representation

|| TODO: indexes not implemented
|| TODO: performance improvements
|| -- avoid n^2 performance for record lookup -- use OrderedSet
|| NOTE: both could be borrowed from BasicRecordSet

{define-class public abstract GenericRecordSet
  {inherits EventManagingRecordSet, InitRestArgParser}
  field _fields:RecordFields
  field _modifiable?:bool
  field records:{Array-of Record}
  {constructor public {default
                          fields:RecordFields,
                          modifiable?:bool = true,
                          ...:Object}
    set self._fields = fields
    set self._modifiable? = modifiable?
    set self.records = {{Array-of Record}}
    {construct-super.EventManagingRecordSet}
    {with 
        self.suppress-events? = true,
        self._modifiable? = true
     do 
        {self.process-rest-args {splice ...}}
        || NOTE: "internal" commit
        {for r in {self.to-Iterator} do
            {r.commit}}
    }
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case h:EventHandler do
        {self.add-event-handler h}
     else
        {self.append x}} 
  }
  || accessors
  {getter public {fields}:RecordFields
    {return self._fields}
  }
  {getter public {modifiable?}:bool
    {return self._modifiable?}
  }
  {getter public {size}:int
    {return self.records.size}
  }
  {method public {member? r:Record}:bool
    {return {self.records.find r} >= 0}
  }
  {method public {to-Iterator}:{Iterator-of Record}
    {return {self.records.to-Iterator}}
  }
  {method public {select filter:#RecordFilter = null}:{Array-of Record}
    {return 
        {if-non-null filter then
            {self.records.filter-clone 
                {proc {r:Record}:bool
                    {return {filter.includes? r}}}}
         else
            {self.records.clone}}}
  }
  {getter public {pending-update?}:bool
    {for r in self.records do
        {if r.pending-update? then
            {return true}}}
    {return false}
  }
  || transactions
  {method public {commit}:void
    {self.ensure-modifiable}
    {with self.batch-events? = true do
        {for r in {self.select filter = RecordFilter.pending-update} do
            {r.commit}}}
  }
  {method public {revert}:void
    {self.ensure-modifiable}
    {with self.batch-events? = true do
        {for r in {self.select filter = RecordFilter.pending-update} do
            {r.revert}}}
  }
  || mutation
  {method public {delete-all}:void
    {self.ensure-modifiable}
    {with self.batch-events? = true do
        {for r in {self.records.clone} do
            {r.delete}}}
  }
  || server
  {method public {load}:void
  }
  {getter public {load-state}:RecordSetLoadState
    {return RecordSetLoadState.complete}
  }
  || override 'protected' adjective
  {method public {trigger-record-set-event e:RecordSetEvent}:void
    {super.trigger-record-set-event e}
  }
  {method public {ensure-modifiable}:void
    {super.ensure-modifiable}
  }
}
{define-class public abstract GenericRecord
  {inherits Record}
  {constructor public {default record-set:#GenericRecordSet}
    set self._record-set = record-set
    set self._state = RecordState.new
    {construct-super}
  }
  || accessors
  field _record-set:#GenericRecordSet
  {getter public {record-set}:#RecordSet
    || NOTE: can't return specialized type here
    || -- not possible for multiple inheritance, 
    || -- and "special" types like String and Array
    {return self._record-set}
  }
  {getter public {generic-record-set}:#GenericRecordSet
    {return self._record-set}
  }
  field _state:RecordState
  {getter public {state}:RecordState
    {return self._state}
  }
  {method public {get k:String, pending?:bool = true}:any
    {return 
        {if pending? or not self.pending-update? then
            {self.internal-get k}
         else
            self._original-data[k]}
    }
  }
  {method public {validate-value name:String, val:any}:#ValidationException
    {self.ensure-attached}
    {return
        {{non-null self.record-set
         }.fields[name].domain.validate val}}
  }
  || mutation
  {method public {set k:String, x:any}:void
    {self.ensure-modifiable}
    {self.preserve-data}
    {self.internal-set k, x}
    {switch self.state
     case RecordState.original do
        set self.state = RecordState.modified
    }
    {self.generic-record-set.trigger-record-set-event 
        {RecordModified self}}
  }
  {method public {delete}:void
    {self.ensure-modifiable}
    {switch self.state
     case RecordState.original, RecordState.modified do
        set self.state = RecordState.deleted
     case RecordState.appended do
        {self.internal-remove}
        set self.state = RecordState.new
    }
    {self.generic-record-set.trigger-record-set-event 
        {RecordModified self}}
  }
  || transactions
  {method public {commit}:void
    {self.ensure-modifiable}
    set self._original-data = null
    {switch self.state 
     case RecordState.deleted do
        {self.internal-remove}
        set self.state = RecordState.detached
        {self.generic-record-set.trigger-record-set-event 
            {RecordRemoved self}}
     case RecordState.modified, RecordState.appended do
        set self.state = RecordState.original
        {self.generic-record-set.trigger-record-set-event 
            {RecordModified self}}
    }
  }
  {method public {revert}:void
    {self.ensure-modifiable}
    let modified?:bool =
        {if-non-null data = self._original-data then
            {for x key k in data do
                {self.internal-set k, x}}
            set self._original-data = null
            true
         else 
            false}
    {switch self.state 
     case RecordState.appended do
        {self.internal-remove}
        set self.state = RecordState.new
        {self.generic-record-set.trigger-record-set-event 
            {RecordRemoved self}}
     case RecordState.modified do
        set self.state = RecordState.original
        {self.generic-record-set.trigger-record-set-event 
            {RecordModified self}}
     case RecordState.deleted do
        set self.state = RecordState.original
        {self.generic-record-set.trigger-record-set-event 
            {RecordModified self}}
    }
  }
  || abstract implementation
  {method abstract protected {internal-set k:String, x:any}:void}
  {method abstract protected {internal-get k:String}:any}
  || implementation
  {method public {internal-attach record-set:GenericRecordSet}:void
    {if self.record-set != null and
        self.record-set != record-set then
        {error {message Record {value self} already attached}}}
    {record-set.records.append self}
    set self._record-set = record-set
    set self.state = RecordState.appended
    {record-set.trigger-record-set-event 
        {RecordAdded self}}
  }
  {method {internal-remove}:void
    {if-non-null grs = self.generic-record-set then
        let rs:{Array-of Record} = grs.records
        let i:int = {rs.find self}
        {if i >= 0 then
            {rs.remove i}}
    }
  }
  {setter {state state:RecordState}:void
    set self._state = state
  }
  field _original-data:#RecordData 
  {method {preserve-data}:void
    {if self._original-data == null then
        let data:RecordData = {RecordData}
        {for f in self.record-set.fields do
            let k:String = f.name
            set data[k] = self[k]}
        set self._original-data = data}
  }
  {method {ensure-attached}:void
    {if self._record-set == null then
        {error
            {message Attempted to perform operation on detached Record.}
        }}
  }
  {method {ensure-modifiable}:void
    {if-non-null rs = self._record-set then
        {rs.ensure-modifiable}}
  }
}
