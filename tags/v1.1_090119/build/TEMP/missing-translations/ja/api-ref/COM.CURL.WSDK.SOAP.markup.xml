<?xml version="1.0" encoding="Shift_JIS" standalone="yes"?>
<translation-dictionary version="2">

<string>
<original>A basic implementation of a {docref SOAPMarshalContext}.</original>
<translation>A basic implementation of a <opaque>{docref SOAPMarshalContext}</opaque>.</translation>
<comment>DefaultSOAPMarshalContext</comment>
</string>

<string>
<original>A basic implementation of a {docref SOAPUnmarshalContext}.</original>
<translation>A basic implementation of a <opaque>{docref SOAPUnmarshalContext}</opaque>.</translation>
<comment>DefaultSOAPUnmarshalContext</comment>
</string>

<string>
<original>A class to handle marshaling and unmarshaling XML documents,
        stored in {ctext XDMElement} or
        {ctext XDMElement} or any similar class.</original>
<translation>A class to handle marshaling and unmarshaling XML documents, stored in <opaque>{ctext XDMElement}</opaque> or <opaque>{ctext XDMElement}</opaque> or any similar class.</translation>
<comment>SOAPXMLDocumentMarshaler</comment>
</string>

<string>
<original>A class to handle marshaling and unmarshaling enums.</original>
<translation>A class to handle marshaling and unmarshaling enums.</translation>
<comment>SOAPEnumMarshaler</comment>
</string>

<string>
<original>A class to handle marshaling and unmarshaling for a type
        that is just another name for an existing type.</original>
<translation>A class to handle marshaling and unmarshaling for a type that is just another name for an existing type.</translation>
<comment>SOAPAliasMarshaler</comment>
</string>

<string>
<original>A class to handle marshaling and unmarshaling struct like objects that
        are defined in a schema.</original>
<translation>A class to handle marshaling and unmarshaling struct like objects that are defined in a schema.</translation>
<comment>SOAPStructMarshaler</comment>
</string>

<string>
<original>A namespace to use as the namespace for response elements with
        no namespace if the element name then matches a response name.</original>
<translation>A namespace to use as the namespace for response elements with no namespace if the element name then matches a response name.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>A non-abstract sub-class of {docref SOAPMessageReader} with
        additional methods to allow more control over decoding RPC and
        document style SOAP messages.</original>
<translation>A non-abstract sub-class of <opaque>{docref SOAPMessageReader}</opaque> with additional methods to allow more control over decoding RPC and document style SOAP messages.</translation>
<comment>SOAPRPCMessageReader</comment>
</string>

<string>
<original>A non-abstract sub-class of {docref SOAPMessageWriter} with
        additional methods to allow more control over RPC and document
        style SOAP messages.</original>
<translation>A non-abstract sub-class of <opaque>{docref SOAPMessageWriter}</opaque> with additional methods to allow more control over RPC and document style SOAP messages.</translation>
<comment>SOAPRPCMessageWriter</comment>
</string>

<string>
<original>A non-abstract {docref SOAPCurlTypeToXMLTypeMapper} that users
        can add mappings to, and that can chain to other
        {docref SOAPCurlTypeToXMLTypeMapper}s.</original>
<translation>A non-abstract <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> that users can add mappings to, and that can chain to other <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque>s.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper</comment>
</string>

<string>
<original>A non-abstract {docref SOAPElementNameToXMLTypeMapper} that users
        can add mappings to, and that can chain to other
        {docref SOAPElementNameToXMLTypeMapper}s.</original>
<translation>A non-abstract <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> that users can add mappings to, and that can chain to other <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque>s.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper</comment>
</string>

<string>
<original>A non-abstract {docref SOAPXMLTypeToCurlTypeMapper} that users
        can add mappings to, and that can chain to other
        {docref SOAPXMLTypeToCurlTypeMapper}s.</original>
<translation>A non-abstract <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> that users can add mappings to, and that can chain to other <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque>s.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper</comment>
</string>

<string>
<original>A non-abstract {docref SOAPXMLTypeToElementNameMapper} that users
        can add mappings to, and that can chain to other
        {docref SOAPXMLTypeToElementNameMapper}s.</original>
<translation>A non-abstract <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> that users can add mappings to, and that can chain to other <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque>s.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper</comment>
</string>

<string>
<original>A subclass that was handling multi-part messages might get
        some of the responses from non-SOAP parts of the message, add the
        proper ids to a {docref SOAPUnmarshalContext} and remove them
        from {param response-names} and
        {param response-types}.  And add them to {param responses}
        in {docref SOAPHTTPRPCPostCaller.close-response-stream}.</original>
<translation>A subclass that was handling multi-part messages might get some of the responses from non-SOAP parts of the message, add the proper ids to a <opaque>{docref SOAPUnmarshalContext}</opaque> and remove them from <opaque>{param response-names}</opaque> and <opaque>{param response-types}</opaque>. And add them to <opaque>{param responses}</opaque> in <opaque>{docref SOAPHTTPRPCPostCaller.close-response-stream}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.get-response-stream</comment>
</string>

<string>
<original>A subclass that was handling multi-part messages might put
        some of the arguments into non-SOAP parts of the message, add the
        proper ids to a {docref SOAPMarshalContext} and remove them
        from {param arguments}, {param argument-names} and
        {param argument-types}.</original>
<translation>A subclass that was handling multi-part messages might put some of the arguments into non-SOAP parts of the message, add the proper ids to a <opaque>{docref SOAPMarshalContext}</opaque> and remove them from <opaque>{param arguments}</opaque>, <opaque>{param argument-names}</opaque> and <opaque>{param argument-types}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.get-request-data-stream</comment>
</string>

<string>
<original>A {ctext bool} that indicates if the encoding attribute should be
        written out in the attributes for the Body.  For SOAP 1.1 that
        mostly means an attribute named
        {docref SOAPMessageWriter.soap-1-1-encoding-style-attribute-xml-name}.</original>
<translation>A <opaque>{ctext bool}</opaque> that indicates if the encoding attribute should be written out in the attributes for the Body. For SOAP 1.1 that mostly means an attribute named <opaque>{docref SOAPMessageWriter.soap-1-1-encoding-style-attribute-xml-name}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>A {ctext bool} that indicates if the type attributes should be
        checked against {param parameter-types} by the unmarshal calls.  For
        SOAP 1.1 that mostly means an attribute named
        {ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}
        with the name of the XML type as its value.</original>
<translation>A <opaque>{ctext bool}</opaque> that indicates if the type attributes should be checked against <opaque>{param parameter-types}</opaque> by the unmarshal calls. For SOAP 1.1 that mostly means an attribute named <opaque>{ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}</opaque> with the name of the XML type as its value.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>A {ctext bool} that indicates if the type attributes should be
        checked against {param type} by the unmarshal routine.  For
        SOAP 1.1 that mostly means an attribute named
        {ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}
        with the name of the XML type as its value.</original>
<translation>A <opaque>{ctext bool}</opaque> that indicates if the type attributes should be checked against <opaque>{param type}</opaque> by the unmarshal routine. For SOAP 1.1 that mostly means an attribute named <opaque>{ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}</opaque> with the name of the XML type as its value.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>A {ctext bool} that indicates if type attributes should be
        written out by the marshal routine.  For SOAP 1.1 that
        mostly means an attribute named
        {ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}
        with the name of the XML type as its value.</original>
<translation>A <opaque>{ctext bool}</opaque> that indicates if type attributes should be written out by the marshal routine. For SOAP 1.1 that mostly means an attribute named <opaque>{ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}</opaque> with the name of the XML type as its value.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>A {ctext bool} that indicates if type attributes should be
        written out by the marshal routines.  For SOAP 1.1 that
        mostly means an attribute named
        {ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}
        with the name of the XML type as its value.</original>
<translation>A <opaque>{ctext bool}</opaque> that indicates if type attributes should be written out by the marshal routines. For SOAP 1.1 that mostly means an attribute named <opaque>{ctext {XMLName SOAPTypeMapper.xml-schema-instance-uri, "type"}}</opaque> with the name of the XML type as its value.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>A {docref HttpRequestData} that can supply the data to be POSTed
        in the HTTP request, and can supply the complete Content-Type
        HTTP header.

        A {docref XMLOutputStream} into which {param arguments} should be
        marshaled.

        A {docref SOAPMarshalContext} to be used when marshaling the arguments
        or {ctext null} if the default one is acceptable.

        {param arguments}, {param argument-names}, and {param argument-types}
        are returned, possibly modified.

        The {docref HttpRequestHeaders} to be sent with the HTTP request.
        This will be based on the passed in {param request-http-headers} but
        may have been modified.</original>
<translation><p>A <opaque>{docref HttpRequestData}</opaque> that can supply the data to be POSTed in the HTTP request, and can supply the complete Content-Type HTTP header.</p>
<p>A <opaque>{docref XMLOutputStream}</opaque> into which <opaque>{param arguments}</opaque> should be marshaled.</p>
<p>A <opaque>{docref SOAPMarshalContext}</opaque> to be used when marshaling the arguments or <opaque>{ctext null}</opaque> if the default one is acceptable.</p>
<p><opaque>{param arguments}</opaque>, <opaque>{param argument-names}</opaque>, and <opaque>{param argument-types}</opaque> are returned, possibly modified.</p>
<p>The <opaque>{docref HttpRequestHeaders}</opaque> to be sent with the HTTP request. This will be based on the passed in <opaque>{param request-http-headers}</opaque> but may have been modified.</p></translation>
<comment>SOAPHTTPRPCPostCaller.get-request-data-stream</comment>
</string>

<string>
<original>A {docref HttpRequestData} that can supply the data to be POSTed
        in the HTTP request, and can supply the complete Content-Type
        HTTP header.

        The {docref HttpRequestHeaders} to be sent with the HTTP request.
        This will be based on the passed in {param request-http-headers} but
        may have been modified.</original>
<translation><p>A <opaque>{docref HttpRequestData}</opaque> that can supply the data to be POSTed in the HTTP request, and can supply the complete Content-Type HTTP header.</p>
<p>The <opaque>{docref HttpRequestHeaders}</opaque> to be sent with the HTTP request. This will be based on the passed in <opaque>{param request-http-headers}</opaque> but may have been modified.</p></translation>
<comment>SOAPHTTPRPCPostCaller.setup-request-data</comment>
</string>

<string>
<original>A {docref HttpRequestData} used by {docref SOAPHTTPRPCPostCaller}
        to hold the data for a request message.</original>
<translation>A <opaque>{docref HttpRequestData}</opaque> used by <opaque>{docref SOAPHTTPRPCPostCaller}</opaque> to hold the data for a request message.</translation>
<comment>SOAPHTTPRPCPostCallerRequestData</comment>
</string>

<string>
<original>A {docref InputSource} pointing to or containing the XML to read.</original>
<translation>A <opaque>{docref InputSource}</opaque> pointing to or containing the XML to read.</translation>
<comment>XMLInputStream.from-InputSource</comment>
</string>

<string>
<original>A {docref SOAPCurlTypeToXMLTypeMapper} that 
        {docref SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-curl-type-to-xml-type-mapper}, provides
        support for the basic SOAP types.  This field should generally
        either be {docref builtin-soap-curl-type-to-xml-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-curl-type-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> that <opaque>{docref SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>, provides support for the basic SOAP types. This field should generally either be <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.chain</comment>
</string>

<string>
<original>A {docref SOAPCurlTypeToXMLTypeMapper} that 
        {docref SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-curl-type-to-xml-type-mapper}, provides
        support for the basic SOAP types.  This parameter should generally
        either be {docref builtin-soap-curl-type-to-xml-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-curl-type-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> that <opaque>{docref SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>, provides support for the basic SOAP types. This parameter should generally either be <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-curl-type-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.default</comment>
</string>

<string>
<original>A {docref SOAPElementNameToXMLTypeMapper} that 
        {docref SOAPElementNameToXMLTypeMapper.element-name-to-xml-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-element-name-to-xml-type-mapper}, provides
        support for the basic SOAP types.  This field should generally
        either be {docref builtin-soap-element-name-to-xml-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-element-name-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> that <opaque>{docref SOAPElementNameToXMLTypeMapper.element-name-to-xml-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>, provides support for the basic SOAP types. This field should generally either be <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.chain</comment>
</string>

<string>
<original>A {docref SOAPElementNameToXMLTypeMapper} that 
        {docref SOAPElementNameToXMLTypeMapper.element-name-to-xml-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-element-name-to-xml-type-mapper}, provides
        support for the basic SOAP types.  This parameter should generally
        either be {docref builtin-soap-element-name-to-xml-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-element-name-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> that <opaque>{docref SOAPElementNameToXMLTypeMapper.element-name-to-xml-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>, provides support for the basic SOAP types. This parameter should generally either be <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.default</comment>
</string>

<string>
<original>A {docref SOAPException} for errors during calls involving
        marshaling data from Curl values to XML.</original>
<translation>A <opaque>{docref SOAPException}</opaque> for errors during calls involving marshaling data from Curl values to XML.</translation>
<comment>SOAPMarshalException</comment>
</string>

<string>
<original>A {docref SOAPException} for errors during calls involving
        unmarshaling data from XML to Curl values.</original>
<translation>A <opaque>{docref SOAPException}</opaque> for errors during calls involving unmarshaling data from XML to Curl values.</translation>
<comment>SOAPUnmarshalException</comment>
</string>

<string>
<original>A {docref SOAPException} used when the SOAP message contained
        a SOAP 1.1 style fault XML element.  The exception includes
        most of the data in the fault element.</original>
<translation>A <opaque>{docref SOAPException}</opaque> used when the SOAP message contained a SOAP 1.1 style fault XML element. The exception includes most of the data in the fault element.</translation>
<comment>SOAP-1-1-FaultException</comment>
</string>

<string>
<original>A {docref SOAPTypeMapper} that {docref SOAPTypeMapper.marshal} and
        {docref SOAPTypeMapper.unmarshal} calls will be passed on to if
        it is not {ctext null} and this object does not have any mappings for
        the given {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-type-mapper}, provides support for the basic
        SOAP types.  This field should generally either be 
        {docref builtin-soap-type-mapper}, or something which eventually
        chains to {docref builtin-soap-type-mapper}.</original>
<translation>A <opaque>{docref SOAPTypeMapper}</opaque> that <opaque>{docref SOAPTypeMapper.marshal}</opaque> and <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> calls will be passed on to if it is not <opaque>{ctext null}</opaque> and this object does not have any mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-type-mapper}</opaque>, provides support for the basic SOAP types. This field should generally either be <opaque>{docref builtin-soap-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.chain</comment>
</string>

<string>
<original>A {docref SOAPTypeMapper} that {docref SOAPTypeMapper.marshal} and
        {docref SOAPTypeMapper.unmarshal} calls will be passed on to if
        it is not {ctext null} and this object does not have any mappings for
        the given {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-type-mapper}, provides support for the basic
        SOAP types.  This parameter should generally either be 
        {docref builtin-soap-type-mapper}, or something which eventually
        chains to {docref builtin-soap-type-mapper}.</original>
<translation>A <opaque>{docref SOAPTypeMapper}</opaque> that <opaque>{docref SOAPTypeMapper.marshal}</opaque> and <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> calls will be passed on to if it is not <opaque>{ctext null}</opaque> and this object does not have any mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-type-mapper}</opaque>, provides support for the basic SOAP types. This parameter should generally either be <opaque>{docref builtin-soap-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.default</comment>
</string>

<string>
<original>A {docref SOAPTypeMultipleReference} that combined with
        {ctext type.multiple-reference} determines how multiple
        referencing will be done for this conversion.
        The decision will vary depending on the type of the
        object being marshaled, but generally if
        {param multiple-reference} is 
        {docref SOAPTypeMultipleReference}{ctext .multiple} or
        {docref SOAPTypeMultipleReference}{ctext .multiple-reference}
        and the type is legal for multiple reference, it will be done
        as an XML reference, if it is
        {docref SOAPTypeMultipleReference}{ctext .multiple-instance} it
        will be written as an instance, with an id, and if
        {param multiple-reference} is
        {docref SOAPTypeMultipleReference}{ctext .single} it will be
        written as an instance with no id.  If 
        {param multiple-reference} is
        {docref SOAPTypeMultipleReference}{ctext .unknown} then the type
        specific marshaling code will choose which of the above behaviors
        should occur.</original>
<translation>A <opaque>{docref SOAPTypeMultipleReference}</opaque> that combined with <opaque>{ctext type.multiple-reference}</opaque> determines how multiple referencing will be done for this conversion. The decision will vary depending on the type of the object being marshaled, but generally if <opaque>{param multiple-reference}</opaque> is <opaque>{docref SOAPTypeMultipleReference}{ctext .multiple}</opaque> or <opaque>{docref SOAPTypeMultipleReference}{ctext .multiple-reference}</opaque> and the type is legal for multiple reference, it will be done as an XML reference, if it is <opaque>{docref SOAPTypeMultipleReference}{ctext .multiple-instance}</opaque> it will be written as an instance, with an id, and if <opaque>{param multiple-reference}</opaque> is <opaque>{docref SOAPTypeMultipleReference}{ctext .single}</opaque> it will be written as an instance with no id. If <opaque>{param multiple-reference}</opaque> is <opaque>{docref SOAPTypeMultipleReference}{ctext .unknown}</opaque> then the type specific marshaling code will choose which of the above behaviors should occur.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>A {docref SOAPXMLTypeToCurlTypeMapper} that 
        {docref SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-xml-type-to-curl-type-mapper}, provides
        support for the basic SOAP types.  This field should generally
        either be {docref builtin-soap-xml-type-to-curl-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-xml-type-to-curl-type-mapper}.</original>
<translation>A <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> that <opaque>{docref SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>, provides support for the basic SOAP types. This field should generally either be <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.chain</comment>
</string>

<string>
<original>A {docref SOAPXMLTypeToCurlTypeMapper} that 
        {docref SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-xml-type-to-curl-type-mapper}, provides
        support for the basic SOAP types.  This parameter should generally
        either be {docref builtin-soap-xml-type-to-curl-type-mapper}, or
        something which eventually chains to
        {docref builtin-soap-xml-type-to-curl-type-mapper}.</original>
<translation>A <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> that <opaque>{docref SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>, provides support for the basic SOAP types. This parameter should generally either be <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-xml-type-to-curl-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.default</comment>
</string>

<string>
<original>A {docref SOAPXMLTypeToElementNameMapper} that 
        {docref SOAPXMLTypeToElementNameMapper.xml-type-to-element-name} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-xml-type-to-element-name-mapper}, provides
        support for the basic SOAP types.  This field should generally
        either be {docref builtin-soap-xml-type-to-element-name-mapper}, or
        something which eventually chains to
        {docref builtin-soap-element-name-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> that <opaque>{docref SOAPXMLTypeToElementNameMapper.xml-type-to-element-name}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-xml-type-to-element-name-mapper}</opaque>, provides support for the basic SOAP types. This field should generally either be <opaque>{docref builtin-soap-xml-type-to-element-name-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.chain</comment>
</string>

<string>
<original>A {docref SOAPXMLTypeToElementNameMapper} that 
        {docref SOAPXMLTypeToElementNameMapper.xml-type-to-element-name} calls
        will get passed to if this object has no mappings for the given
        {docref SOAPObjectType}.  The default value for this,
        {docref builtin-soap-xml-type-to-element-name-mapper}, provides
        support for the basic SOAP types.  This parameter should generally
        either be {docref builtin-soap-xml-type-to-element-name-mapper}, or
        something which eventually chains to
        {docref builtin-soap-element-name-to-xml-type-mapper}.</original>
<translation>A <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> that <opaque>{docref SOAPXMLTypeToElementNameMapper.xml-type-to-element-name}</opaque> calls will get passed to if this object has no mappings for the given <opaque>{docref SOAPObjectType}</opaque>. The default value for this, <opaque>{docref builtin-soap-xml-type-to-element-name-mapper}</opaque>, provides support for the basic SOAP types. This parameter should generally either be <opaque>{docref builtin-soap-xml-type-to-element-name-mapper}</opaque>, or something which eventually chains to <opaque>{docref builtin-soap-element-name-to-xml-type-mapper}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.default</comment>
</string>

<string>
<original>A {docref TextInputStream} containing the XML to read.</original>
<translation>A <opaque>{docref TextInputStream}</opaque> containing the XML to read.</translation>
<comment>XMLInputStream.default</comment>
</string>

<string>
<original>Abstract base class for the logical pieces of an XML document.</original>
<translation>Abstract base class for the logical pieces of an XML document.</translation>
<comment>XMLToken</comment>
</string>

<string>
<original>Add a "charset" parameter to the content type that will be returned
        by {docref SOAPHTTPRPCPostCallerRequestData.content-type} based
        on {param character-encoding}.</original>
<translation>Add a "charset" parameter to the content type that will be returned by <opaque>{docref SOAPHTTPRPCPostCallerRequestData.content-type}</opaque> based on <opaque>{param character-encoding}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCallerRequestData.add-charset-to-content-type</comment>
</string>

<string>
<original>Add a parameter to the content type that will be returned
        by {docref SOAPHTTPRPCPostCallerRequestData.content-type}.</original>
<translation>Add a parameter to the content type that will be returned by <opaque>{docref SOAPHTTPRPCPostCallerRequestData.content-type}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCallerRequestData.add-parameter-to-content-type</comment>
</string>

<string>
<original>Additional parameters may be added to the content type
        by {docref SOAPHTTPRPCPostCaller.setup-request-data} or
        {docref SOAPHTTPRPCPostCaller.close-request-data-stream}.</original>
<translation>Additional parameters may be added to the content type by <opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque> or <opaque>{docref SOAPHTTPRPCPostCaller.close-request-data-stream}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.content-type</comment>
</string>

<string>
<original>All of the calls in {docref SOAPHTTPRPCPostCaller} that pass around
        a {docref HttpRequestData} actually expect a
        {docref SOAPHTTPRPCPostCallerRequestData}, although a subclass of
        {docref SOAPHTTPRPCPostCaller} might not.</original>
<translation>All of the calls in <opaque>{docref SOAPHTTPRPCPostCaller}</opaque> that pass around a <opaque>{docref HttpRequestData}</opaque> actually expect a <opaque>{docref SOAPHTTPRPCPostCallerRequestData}</opaque>, although a subclass of <opaque>{docref SOAPHTTPRPCPostCaller}</opaque> might not.</translation>
<comment>SOAPHTTPRPCPostCallerRequestData</comment>
</string>

<string>
<original>All of the parameters not explicitly mentioned are the same as 
        the parameters in {docref SOAPMessageReader.read-response}.</original>
<translation>All of the parameters not explicitly mentioned are the same as the parameters in <opaque>{docref SOAPMessageReader.read-response}</opaque>.</translation>
<comment>SOAPRPCMessageReader.read-rpc-response</comment>
</string>

<string>
<original>All of the parameters not explicitly mentioned are the same as 
        the parameters in {docref SOAPMessageWriter.write-request}.</original>
<translation>All of the parameters not explicitly mentioned are the same as the parameters in <opaque>{docref SOAPMessageWriter.write-request}</opaque>.</translation>
<comment>SOAPRPCMessageWriter.write-rpc-request</comment>
</string>

<string>
<original>An encoding of the data in XML that the
        {docref SOAPTypeMapper.MarshalProc} knows how to write.
        A {ctext null} encoding for a mapping means that it is the default
        mapping for that type (i.e. when searching for the marshal proc
        for a type and encoding, if nothing is found with the encoding,
        it will search again for one with a {ctext null} encoding.</original>
<translation>An encoding of the data in XML that the <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> knows how to write. A <opaque>{ctext null}</opaque> encoding for a mapping means that it is the default mapping for that type (i.e. when searching for the marshal proc for a type and encoding, if nothing is found with the encoding, it will search again for one with a <opaque>{ctext null}</opaque> encoding.</translation>
<comment>DefaultSOAPTypeMapper.get-marshal-proc</comment>
</string>

<string>
<original>An encoding of the data into XML that the
        {docref SOAPTypeMapper.UnmarshalProc}
        knows how to convert.
        A {ctext null} encoding for a mapping means that it is the default
        mapping for that type (i.e. when searching for the unmarshal proc
        for a type and encoding, if nothing is found with the encoding,
        it will search again for one with a {ctext null} encoding.</original>
<translation>An encoding of the data into XML that the <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> knows how to convert. A <opaque>{ctext null}</opaque> encoding for a mapping means that it is the default mapping for that type (i.e. when searching for the unmarshal proc for a type and encoding, if nothing is found with the encoding, it will search again for one with a <opaque>{ctext null}</opaque> encoding.</translation>
<comment>DefaultSOAPTypeMapper.get-unmarshal-proc</comment>
</string>

<string>
<original>An encoding of the data into XML that the {param marshal-proc}
        knows how to write.  The same proc may be registered multiple times
        for the same type, with different encodings, if the proc knows how
        to do multiple encodings.
        A {ctext null} encoding for a mapping means that it is the default
        mapping for that type (i.e. when searching for the marshal proc
        for a type and encoding, if nothing is found with the encoding,
        it will search again for one with a {ctext null} encoding.</original>
<translation>An encoding of the data into XML that the <opaque>{param marshal-proc}</opaque> knows how to write. The same proc may be registered multiple times for the same type, with different encodings, if the proc knows how to do multiple encodings. A <opaque>{ctext null}</opaque> encoding for a mapping means that it is the default mapping for that type (i.e. when searching for the marshal proc for a type and encoding, if nothing is found with the encoding, it will search again for one with a <opaque>{ctext null}</opaque> encoding.</translation>
<comment>DefaultSOAPTypeMapper.set-marshal-proc</comment>
</string>

<string>
<original>An encoding of the data into XML that the {param unmarshal-proc}
        knows how to convert.  The same proc may be registered multiple times
        for the same type, with different encodings, if the proc knows how
        to do multiple encodings.
        A {ctext null} encoding for a mapping means that it is the default
        mapping for that type (i.e. when searching for the unmarshal proc
        for a type and encoding, if nothing is found with the encoding,
        it will search again for one with a {ctext null} encoding.</original>
<translation>An encoding of the data into XML that the <opaque>{param unmarshal-proc}</opaque> knows how to convert. The same proc may be registered multiple times for the same type, with different encodings, if the proc knows how to do multiple encodings. A <opaque>{ctext null}</opaque> encoding for a mapping means that it is the default mapping for that type (i.e. when searching for the unmarshal proc for a type and encoding, if nothing is found with the encoding, it will search again for one with a <opaque>{ctext null}</opaque> encoding.</translation>
<comment>DefaultSOAPTypeMapper.set-unmarshal-proc</comment>
</string>

<string>
<original>An encoding of the data that a {docref SOAPTypeMapper.MarshalProc}
        was set with {docref DefaultSOAPTypeMapper.set-marshal-proc}.</original>
<translation>An encoding of the data that a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> was set with <opaque>{docref DefaultSOAPTypeMapper.set-marshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.remove-marshal-proc</comment>
</string>

<string>
<original>An encoding of the data that a {docref SOAPTypeMapper.UnmarshalProc}
        was set with {docref DefaultSOAPTypeMapper.set-unmarshal-proc}.</original>
<translation>An encoding of the data that a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> was set with <opaque>{docref DefaultSOAPTypeMapper.set-unmarshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.remove-unmarshal-proc</comment>
</string>

<string>
<original>An enum which is used in {docref SOAPUnmarshalContext} to
        indicate how far unmarshaled a multiple referencable object
        is.</original>
<translation>An enum which is used in <opaque>{docref SOAPUnmarshalContext}</opaque> to indicate how far unmarshaled a multiple referencable object is.</translation>
<comment>SOAPUnmarshalObjectStatus</comment>
</string>

<string>
<original>An implementation of the {docref SOAPTypeMapper} interface.
        This implementation uses a hash table to hold mappings from
        {docref SOAPObjectType} and encoding to
        {docref SOAPTypeMapper.MarshalProc} and
        {docref SOAPTypeMapper.UnmarshalProc}.  Mappings can be added
        to it.  It also has an optional {docref SOAPObjectType}
        which it will pass the {docref SOAPTypeMapper.marshal} and
        {docref SOAPTypeMapper.unmarshal} calls on to if it has
        no mapping for the given type and encoding.</original>
<translation>An implementation of the <opaque>{docref SOAPTypeMapper}</opaque> interface. This implementation uses a hash table to hold mappings from <opaque>{docref SOAPObjectType}</opaque> and encoding to <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> and <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque>. Mappings can be added to it. It also has an optional <opaque>{docref SOAPObjectType}</opaque> which it will pass the <opaque>{docref SOAPTypeMapper.marshal}</opaque> and <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> calls on to if it has no mapping for the given type and encoding.</translation>
<comment>DefaultSOAPTypeMapper</comment>
</string>

<string>
<original>An {ctext {Array-of #SOAPObjectType}} with types for the
        response values, if a type is needed.  Each response type in
        {param response-types} matches up with a response name in
        {param response-names} of the same index.  If the type does
        not have enough information to unmarshal the response, it will
        be filled in based on the element name of the response, and by
        using type mapping information.</original>
<translation>An <opaque>{ctext {Array-of #SOAPObjectType}}</opaque> with types for the response values, if a type is needed. Each response type in <opaque>{param response-types}</opaque> matches up with a response name in <opaque>{param response-names}</opaque> of the same index. If the type does not have enough information to unmarshal the response, it will be filled in based on the element name of the response, and by using type mapping information.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>An {ctext {Array-of #SOAPObjectType}} with types for the
        {param arguments}, if a type is needed.  Each argument type in
        {param argument-types} matches up with an argument in
        {param arguments} and an argument name in {param argument-names}
        of the same index.  If the type does not have enough information
        to marshal the argument, it will be filled in based on the
        type of the argument, and by using type mapping information.</original>
<translation>An <opaque>{ctext {Array-of #SOAPObjectType}}</opaque> with types for the <opaque>{param arguments}</opaque>, if a type is needed. Each argument type in <opaque>{param argument-types}</opaque> matches up with an argument in <opaque>{param arguments}</opaque> and an argument name in <opaque>{param argument-names}</opaque> of the same index. If the type does not have enough information to marshal the argument, it will be filled in based on the type of the argument, and by using type mapping information.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>An {ctext {Array-of #XMLName}} with names for the response values,
        or {ctext null} if no name is needed.  Each response name in
        {param response-names} matches up with a response type in
        {param response-types} of the same index.
        If there is no response name for a given response,
        then it will be read based on index.</original>
<translation>An <opaque>{ctext {Array-of #XMLName}}</opaque> with names for the response values, or <opaque>{ctext null}</opaque> if no name is needed. Each response name in <opaque>{param response-names}</opaque> matches up with a response type in <opaque>{param response-types}</opaque> of the same index. If there is no response name for a given response, then it will be read based on index.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>An {ctext {Array-of #XMLName}} with names for the {param arguments},
        or {ctext null} if no name is needed.  Each argument name in
        {param argument-names} matches up with an argument in
        {param arguments}, and an argument type in {param argument-types} of
        the same index.  If there is no argument name for a given argument,
        then it will be written with a name based on the
        {docref SOAPObjectType.element-name} of the argument type.</original>
<translation>An <opaque>{ctext {Array-of #XMLName}}</opaque> with names for the <opaque>{param arguments}</opaque>, or <opaque>{ctext null}</opaque> if no name is needed. Each argument name in <opaque>{param argument-names}</opaque> matches up with an argument in <opaque>{param arguments}</opaque>, and an argument type in <opaque>{param argument-types}</opaque> of the same index. If there is no argument name for a given argument, then it will be written with a name based on the <opaque>{docref SOAPObjectType.element-name}</opaque> of the argument type.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>An {ctext {Array-of any}} with all of the arguments to be
        written into the SOAP message.</original>
<translation>An <opaque>{ctext {Array-of any}}</opaque> with all of the arguments to be written into the SOAP message.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>An {docref Exception} for errors during calls to the SOAP API.</original>
<translation>An <opaque>{docref Exception}</opaque> for errors during calls to the SOAP API.</translation>
<comment>SOAPException</comment>
</string>

<string>
<original>An {docref XMLToken} to be written to the stream as XML text.</original>
<translation>An <opaque>{docref XMLToken}</opaque> to be written to the stream as XML text.</translation>
<comment>XMLOutputStream.write-one</comment>
</string>

<string>
<original>Any attributes that need to be written out for the root
        element of the message (which will be a SOAP Envelope element.)</original>
<translation>Any attributes that need to be written out for the root element of the message (which will be a SOAP Envelope element.)</translation>
<comment>SOAPRPCMessageWriter.write-rpc-request</comment>
</string>

<string>
<original>Any attributes that need to be written out for the root
        element of the request message (which will be a SOAP Envelope element.)</original>
<translation>Any attributes that need to be written out for the root element of the request message (which will be a SOAP Envelope element.)</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>Append a proc that should be called when the object for the id
        is unmarshaled.</original>
<translation>Append a proc that should be called when the object for the id is unmarshaled.</translation>
<comment>SOAPUnmarshalContext.append-callback</comment>
</string>

<string>
<original>Call all of the callbacks (added with
        {docref SOAPUnmarshalObjectState.append-callback}) indicating
        that the object has been updated in some way.  Removing any
        callbacks that return {ctext true}.</original>
<translation>Call all of the callbacks (added with <opaque>{docref SOAPUnmarshalObjectState.append-callback}</opaque>) indicating that the object has been updated in some way. Removing any callbacks that return <opaque>{ctext true}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState.call-callbacks</comment>
</string>

<string>
<original>Called by {docref SOAPHTTPRPCPostCaller.call} to create and setup
        the {param request-data} to be used for the HTTP POST.  This in turn
        calls {docref SOAPHTTPRPCPostCaller.get-request-data-stream}
        and then {docref SOAPRPCMessageWriter.write-rpc-request} on
        {ctext self.message-writer}.  To finish up the {param request-data}
        it calls {docref SOAPHTTPRPCPostCaller.close-request-data-stream}.
        And finally it handles the {param soap-action}.</original>
<translation>Called by <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque> to create and setup the <opaque>{param request-data}</opaque> to be used for the HTTP POST. This in turn calls <opaque>{docref SOAPHTTPRPCPostCaller.get-request-data-stream}</opaque> and then <opaque>{docref SOAPRPCMessageWriter.write-rpc-request}</opaque> on <opaque>{ctext self.message-writer}</opaque>. To finish up the <opaque>{param request-data}</opaque> it calls <opaque>{docref SOAPHTTPRPCPostCaller.close-request-data-stream}</opaque>. And finally it handles the <opaque>{param soap-action}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.setup-request-data</comment>
</string>

<string>
<original>Called by {docref SOAPUnmarshalContext.append-callback}.</original>
<translation>Called by <opaque>{docref SOAPUnmarshalContext.append-callback}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState.append-callback</comment>
</string>

<string>
<original>Called when a SOAP message is beleived to be complete, to make
        sure that there are no incomplete or referenced but
        not yet unmarshaled objects left.</original>
<translation>Called when a SOAP message is beleived to be complete, to make sure that there are no incomplete or referenced but not yet unmarshaled objects left.</translation>
<comment>SOAPUnmarshalContext.check-leftover-unmarshaled-objects</comment>
</string>

<string>
<original>Can handle Curl types {ctext Array-of}, {ctext FastArray-of}, and
        {ctext Array2d-of}.  It can be registered with a custom XML type,
        but otherwise uses the SOAP 1.1 arrayType names as the XML type.
        (Eg. {ctext {new XMLName, "http://www.w3.org/1999/XMLScheme", "int[]"}})</original>
<translation>Can handle Curl types <opaque>{ctext Array-of}</opaque>, <opaque>{ctext FastArray-of}</opaque>, and <opaque>{ctext Array2d-of}</opaque>. It can be registered with a custom XML type, but otherwise uses the SOAP 1.1 arrayType names as the XML type. (Eg. <opaque>{ctext {new XMLName, "http://www.w3.org/1999/XMLScheme", "int[]"}}</opaque>)</translation>
<comment>SOAPArrayMarshaler</comment>
</string>

<string>
<original>Checked by {docref WSDLHTTPRPCPostClient.verify-service-version}
        to ensure consitency.</original>
<translation>Checked by <opaque>{docref WSDLHTTPRPCPostClient.verify-service-version}</opaque> to ensure consitency.</translation>
<comment>wsdl-service-class-version</comment>
</string>

<string>
<original>Checks the consistency of this generated service class.</original>
<translation>Checks the consistency of this generated service class.</translation>
<comment>WSDLHTTPRPCPostClient.verify-service-version</comment>
</string>

<string>
<original>Class holding information about a partially unmarshaled
        object.</original>
<translation>Class holding information about a partially unmarshaled object.</translation>
<comment>SOAPUnmarshalObjectState</comment>
</string>

<string>
<original>Class that can marshal and unmarshal arrays.</original>
<translation>Class that can marshal and unmarshal arrays.</translation>
<comment>SOAPArrayMarshaler</comment>
</string>

<string>
<original>Clears out the marshaler stored with a previous call to
        {docref SOAPMarshalContext.set-marshaler}.</original>
<translation>Clears out the marshaler stored with a previous call to <opaque>{docref SOAPMarshalContext.set-marshaler}</opaque>.</translation>
<comment>SOAPMarshalContext.clear-marshaler</comment>
</string>

<string>
<original>Close the {docref XMLInputStream} and finish any clean up
        associated with it.
        Called by {docref SOAPHTTPRPCPostCaller.call}.</original>
<translation>Close the <opaque>{docref XMLInputStream}</opaque> and finish any clean up associated with it. Called by <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.close-response-stream</comment>
</string>

<string>
<original>Close up the {docref XMLOutputStream} and finish filling in
        the {param request-data} so that it is ready for use with
        {docref HttpFile.http-read-open-byte}.
        Called by {docref SOAPHTTPRPCPostCaller.setup-request-data}.</original>
<translation>Close up the <opaque>{docref XMLOutputStream}</opaque> and finish filling in the <opaque>{param request-data}</opaque> so that it is ready for use with <opaque>{docref HttpFile.http-read-open-byte}</opaque>. Called by <opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.close-request-data-stream</comment>
</string>

<string>
<original>Closes the {docref TextOutputStream} that the user
        supplied to the constructor.</original>
<translation>Closes the <opaque>{docref TextOutputStream}</opaque> that the user supplied to the constructor.</translation>
<comment>XMLOutputStream.close</comment>
</string>

<string>
<original>Code which needs to be informed about an object being unmarshaled
        at a later time should use {docref SOAPUnmarshalContext.append-callback}
        when {docref SOAPUnmarshalContext.get-object} returns an
        {docref SOAPUnmarshalObjectState}.</original>
<translation>Code which needs to be informed about an object being unmarshaled at a later time should use <opaque>{docref SOAPUnmarshalContext.append-callback}</opaque> when <opaque>{docref SOAPUnmarshalContext.get-object}</opaque> returns an <opaque>{docref SOAPUnmarshalObjectState}</opaque>.</translation>
<comment>SOAPUnmarshalContext.get-object</comment>
</string>

<string>
<original><![CDATA[Consider the following XML fragment:

        |"<element attribute="value">"|
        {br}
        |"    Data"|
        {br}
        |"</element>"|

        The {ctext characters} field will contain
        the text string {quote Data}, with carriage-return and line-feed characters
        before and after it.]]></original>
<translation><p>Consider the following XML fragment:</p>
<p><![CDATA[<element attribute="value"> ]]><opaque>{br}</opaque> Data <opaque>{br}</opaque><![CDATA[ </element>]]></p>
<p>The <opaque>{ctext characters}</opaque> field will contain the text string <curl name="quote">Data</curl>, with carriage-return and line-feed characters before and after it.</p></translation>
<comment>XMLCharacters.characters</comment>
</string>

<string>
<original>Consists of the attribute's {ctext name} and its {ctext value}.
        The {ctext name} is an {docref XMLName}, and the {ctext value}
        is either a {docref String} or an {docref XMLName}.

        The attribute declarations of a start tag are contained
        in {ctext XMLAttribute}s that follow the {docref XMLStartElement}
        in an {docref XMLInputStream} and an {docref XMLOutputStream}.

        The {ctext value} of an {ctext XMLAttribute} returned by 
        {docref XMLInputStream} will always be of type {docref String}.
        {ctext XMLAttribute}s passed to {docref XMLOutputStream} may
        have {ctext value}s of type {docref String} or {docref XMLName}.
        The default constructor creates an {ctext XMLAttribute} with
        a {ctext value} of type {docref String}. Use the 
        {ctext qname-value} constructor to create an {ctext XMLAttribute}
        with a {ctext value} of type {docref XMLName}.

        Namespace attribute declarations are automatically handled
        by {docref XMLInputStream} and {docref XMLOutputStream} and are
        not passed as {docref XMLAttribute}s. Namespace
        prefixes are resolved by {docref XMLInputStream} and stored in the 
        {docref XMLName} of each
        {docref XMLToken} that uses the namespace.  When the {docref XMLToken}s
        are output by an {docref XMLOutputStream}, the namespace attributes are
        generated and attached to the appropriate start element tags.

        The {docref XMLInputStream} and {docref XMLOutputStream} classes do not
        guarantee the order in which the attributes are read or written.</original>
<translation><p>Consists of the attribute's <opaque>{ctext name}</opaque> and its <opaque>{ctext value}</opaque>. The <opaque>{ctext name}</opaque> is an <opaque>{docref XMLName}</opaque>, and the <opaque>{ctext value}</opaque> is either a <opaque>{docref String}</opaque> or an <opaque>{docref XMLName}</opaque>.</p>
<p>The attribute declarations of a start tag are contained in <opaque>{ctext XMLAttribute}</opaque>s that follow the <opaque>{docref XMLStartElement}</opaque> in an <opaque>{docref XMLInputStream}</opaque> and an <opaque>{docref XMLOutputStream}</opaque>.</p>
<p>The <opaque>{ctext value}</opaque> of an <opaque>{ctext XMLAttribute}</opaque> returned by <opaque>{docref XMLInputStream}</opaque> will always be of type <opaque>{docref String}</opaque>. <opaque>{ctext XMLAttribute}</opaque>s passed to <opaque>{docref XMLOutputStream}</opaque> may have <opaque>{ctext value}</opaque>s of type <opaque>{docref String}</opaque> or <opaque>{docref XMLName}</opaque>. The default constructor creates an <opaque>{ctext XMLAttribute}</opaque> with a <opaque>{ctext value}</opaque> of type <opaque>{docref String}</opaque>. Use the <opaque>{ctext qname-value}</opaque> constructor to create an <opaque>{ctext XMLAttribute}</opaque> with a <opaque>{ctext value}</opaque> of type <opaque>{docref XMLName}</opaque>.</p>
<p>Namespace attribute declarations are automatically handled by <opaque>{docref XMLInputStream}</opaque> and <opaque>{docref XMLOutputStream}</opaque> and are not passed as <opaque>{docref XMLAttribute}</opaque>s. Namespace prefixes are resolved by <opaque>{docref XMLInputStream}</opaque> and stored in the <opaque>{docref XMLName}</opaque> of each <opaque>{docref XMLToken}</opaque> that uses the namespace. When the <opaque>{docref XMLToken}</opaque>s are output by an <opaque>{docref XMLOutputStream}</opaque>, the namespace attributes are generated and attached to the appropriate start element tags.</p>
<p>The <opaque>{docref XMLInputStream}</opaque> and <opaque>{docref XMLOutputStream}</opaque> classes do not guarantee the order in which the attributes are read or written.</p></translation>
<comment>XMLAttribute</comment>
</string>

<string>
<original>Construct a {docref DefaultSOAPCurlTypeToXMLTypeMapper} which
        can then be given mappings with
        {docref DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type}.</original>
<translation>Construct a <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper}</opaque> which can then be given mappings with <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type}</opaque>.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.default</comment>
</string>

<string>
<original>Construct a {docref DefaultSOAPElementNameToXMLTypeMapper} which
        can then be given mappings with
        {docref DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type}.</original>
<translation>Construct a <opaque>{docref DefaultSOAPElementNameToXMLTypeMapper}</opaque> which can then be given mappings with <opaque>{docref DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type}</opaque>.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.default</comment>
</string>

<string>
<original>Construct a {docref DefaultSOAPUnmarshalContext}.</original>
<translation>Construct a <opaque>{docref DefaultSOAPUnmarshalContext}</opaque>.</translation>
<comment>DefaultSOAPUnmarshalContext.default</comment>
</string>

<string>
<original>Construct a {docref DefaultSOAPXMLTypeToCurlTypeMapper} which
        can then be given mappings with
        {docref DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type}.</original>
<translation>Construct a <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper}</opaque> which can then be given mappings with <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.default</comment>
</string>

<string>
<original>Construct a {docref DefaultSOAPXMLTypeToElementNameMapper} which
        can then be given mappings with
        {docref DefaultSOAPXMLTypeToElementNameMapper.set-xml-type-to-element-name}.</original>
<translation>Construct a <opaque>{docref DefaultSOAPXMLTypeToElementNameMapper}</opaque> which can then be given mappings with <opaque>{docref DefaultSOAPXMLTypeToElementNameMapper.set-xml-type-to-element-name}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.default</comment>
</string>

<string>
<original>Construct a {docref SOAPHTTPRPCPostCaller} which can be used
        for multiple request/response calls if they are all the same
        version of SOAP and can share type mappers and message readers
        and writers.</original>
<translation>Construct a <opaque>{docref SOAPHTTPRPCPostCaller}</opaque> which can be used for multiple request/response calls if they are all the same version of SOAP and can share type mappers and message readers and writers.</translation>
<comment>SOAPHTTPRPCPostCaller.default</comment>
</string>

<string>
<original>Construct a {docref SOAPObjectType} with certain values.</original>
<translation>Construct a <opaque>{docref SOAPObjectType}</opaque> with certain values.</translation>
<comment>SOAPObjectType.default</comment>
</string>

<string>
<original>Construct a {docref SOAPRPCMessageReader} which can then be used
        to read various SOAP messages.</original>
<translation>Construct a <opaque>{docref SOAPRPCMessageReader}</opaque> which can then be used to read various SOAP messages.</translation>
<comment>SOAPRPCMessageReader.default</comment>
</string>

<string>
<original>Construct a {docref SOAPRPCMessageWriter} which can then be used
        to write various SOAP messages.</original>
<translation>Construct a <opaque>{docref SOAPRPCMessageWriter}</opaque> which can then be used to write various SOAP messages.</translation>
<comment>SOAPRPCMessageWriter.default</comment>
</string>

<string>
<original>Construct one of these, and then call
        {docref SOAPHTTPRPCPostCaller.call} to make SOAP request/response
        calls.</original>
<translation>Construct one of these, and then call <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque> to make SOAP request/response calls.</translation>
<comment>SOAPHTTPRPCPostCaller</comment>
</string>

<string>
<original>Construct this object with a value.</original>
<translation>Construct this object with a value.</translation>
<comment>Nullable.default</comment>
</string>

<string>
<original>Construct this object with an unspecified value.</original>
<translation>Construct this object with an unspecified value.</translation>
<comment>Nullable.from-null</comment>
</string>

<string>
<original>Construct this object.
        {parameter val, The string value 
            for {docref-abbr XMLSimpleValue.name}.}
        {parameter xml-type, The XML Schema type ascribed to this value
            for {docref-abbr XMLSimpleValue.xml-type}.}</original>
<translation>Construct this object. <curl name="parameter"><opaque>val,</opaque>The string value for <opaque>{docref-abbr XMLSimpleValue.name}</opaque>.</curl> <curl name="parameter"><opaque>xml-type,</opaque>The XML Schema type ascribed to this value for <opaque>{docref-abbr XMLSimpleValue.xml-type}</opaque>.</curl></translation>
<comment>XMLSimpleValue.default</comment>
</string>

<string>
<original>Construct this object.
        {parameter xml-type, The XML Schema type
            for {docref-abbr XMLSimpleType.name}}</original>
<translation>Construct this object. <curl name="parameter"><opaque>xml-type,</opaque>The XML Schema type for <opaque>{docref-abbr XMLSimpleType.name}</opaque></curl></translation>
<comment>XMLSimpleType.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLAttribute} whose {ctext value} is
        a {docref String}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLAttribute}</opaque> whose <opaque>{ctext value}</opaque> is a <opaque>{docref String}</opaque>.</translation>
<comment>XMLAttribute.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLAttribute} whose {ctext value} is
        an array of {docref XMLName}s.</original>
<translation>Constructs an instance of <opaque>{ctext XMLAttribute}</opaque> whose <opaque>{ctext value}</opaque> is an array of <opaque>{docref XMLName}</opaque>s.</translation>
<comment>XMLAttribute.with-xml-name-values</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLAttribute} whose {ctext value} is
        an {docref XMLName}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLAttribute}</opaque> whose <opaque>{ctext value}</opaque> is an <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLAttribute.qname-value</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLCharacters}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLCharacters}</opaque>.</translation>
<comment>XMLCharacters.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLEndElement}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLEndElement}</opaque>.</translation>
<comment>XMLEndElement.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLInputStream}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLInputStream}</opaque>.</translation>
<comment>XMLInputStream.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLOutputStream}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLOutputStream}</opaque>.</translation>
<comment>XMLOutputStream.default</comment>
</string>

<string>
<original>Constructs an instance of {ctext XMLStartElement}.</original>
<translation>Constructs an instance of <opaque>{ctext XMLStartElement}</opaque>.</translation>
<comment>XMLStartElement.default</comment>
</string>

<string>
<original>Container for an XML element or attribute name and
        its namespace URI.</original>
<translation>Container for an XML element or attribute name and its namespace URI.</translation>
<comment>XMLName</comment>
</string>

<string>
<original>Container for an attribute of an XML element.</original>
<translation>Container for an attribute of an XML element.</translation>
<comment>XMLAttribute</comment>
</string>

<string>
<original>Container to hold the closing tag of an XML element.</original>
<translation>Container to hold the closing tag of an XML element.</translation>
<comment>XMLEndElement</comment>
</string>

<string>
<original>Container to hold the start tag of an XML element.
        Contains the name of the element.</original>
<translation>Container to hold the start tag of an XML element. Contains the name of the element.</translation>
<comment>XMLStartElement</comment>
</string>

<string>
<original>Container to hold the text contents of an XML element.
        Does not contain the attributes associated with this element.</original>
<translation>Container to hold the text contents of an XML element. Does not contain the attributes associated with this element.</translation>
<comment>XMLCharacters</comment>
</string>

<string>
<original>Contains the text data in an XML element.</original>
<translation>Contains the text data in an XML element.</translation>
<comment>XMLCharacters.characters</comment>
</string>

<string>
<original>Cosntruct a {docref SOAPUnmarshalObjectState}.</original>
<translation>Cosntruct a <opaque>{docref SOAPUnmarshalObjectState}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState.default</comment>
</string>

<string>
<original>Create a new {docref DefaultSOAPTypeMapper} which can then
        be given various {docref SOAPObjectType} to
        {docref SOAPTypeMapper.MarshalProc} and
        {docref SOAPTypeMapper.UnmarshalProc} mappings.</original>
<translation>Create a new <opaque>{docref DefaultSOAPTypeMapper}</opaque> which can then be given various <opaque>{docref SOAPObjectType}</opaque> to <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> and <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> mappings.</translation>
<comment>DefaultSOAPTypeMapper.default</comment>
</string>

<string>
<original>Create a new {docref SOAPObjectType} based on the field
        values of an existing one, with some of the fields changed.</original>
<translation>Create a new <opaque>{docref SOAPObjectType}</opaque> based on the field values of an existing one, with some of the fields changed.</translation>
<comment>SOAPObjectType.clone-with</comment>
</string>

<string>
<original>Create a {docref DefaultSOAPMarshalContext} for marshaling a
        single SOAP message.</original>
<translation>Create a <opaque>{docref DefaultSOAPMarshalContext}</opaque> for marshaling a single SOAP message.</translation>
<comment>DefaultSOAPMarshalContext.default</comment>
</string>

<string>
<original>Create a {docref XMLInputStream} based on the data being returned
        from the HTTP request.  Called by {docref SOAPHTTPRPCPostCaller.call}.</original>
<translation>Create a <opaque>{docref XMLInputStream}</opaque> based on the data being returned from the HTTP request. Called by <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.get-response-stream</comment>
</string>

<string>
<original>Create the {docref HttpRequestData} and {docref XMLOutputStream} to
        do this request with.
        Called by {docref SOAPHTTPRPCPostCaller.setup-request-data}.</original>
<translation>Create the <opaque>{docref HttpRequestData}</opaque> and <opaque>{docref XMLOutputStream}</opaque> to do this request with. Called by <opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.get-request-data-stream</comment>
</string>

<string>
<original>Curl type of this object type. (Eg. {ctext String})
        Can be {ctext null}, meaning that this information is unknown for
        this type.</original>
<translation>Curl type of this object type. (Eg. <opaque>{ctext String}</opaque>) Can be <opaque>{ctext null}</opaque>, meaning that this information is unknown for this type.</translation>
<comment>SOAPObjectType.curl-type</comment>
</string>

<string>
<original>Describe XML Schema simple type.</original>
<translation>Describe XML Schema simple type.</translation>
<comment>XMLSimpleType</comment>
</string>

<string>
<original>Describe XML Schema type associated with an {docref XMLValue}.</original>
<translation>Describe XML Schema type associated with an <opaque>{docref XMLValue}</opaque>.</translation>
<comment>XMLType</comment>
</string>

<string>
<original>Empty {docref XMLToken} used to mark the end of an XML document.</original>
<translation>Empty <opaque>{docref XMLToken}</opaque> used to mark the end of an XML document.</translation>
<comment>XMLEndDocument</comment>
</string>

<string>
<original>Empty {docref XMLToken} used to mark the start of an
        XML document.</original>
<translation>Empty <opaque>{docref XMLToken}</opaque> used to mark the start of an XML document.</translation>
<comment>XMLStartDocument</comment>
</string>

<string>
<original>Forgets the {docref XMLToken}s created by parsing
        the input provided during construction.</original>
<translation>Forgets the <opaque>{docref XMLToken}</opaque>s created by parsing the input provided during construction.</translation>
<comment>XMLInputStream.close</comment>
</string>

<string>
<original>Handles turning a SOAP 1.1 Fault element into a thrown
        {docref SOAP-1-1-FaultException} with the fault information
        in it.  Assumes that the {docref XMLStartElement} for the
        Fault has been read.</original>
<translation>Handles turning a SOAP 1.1 Fault element into a thrown <opaque>{docref SOAP-1-1-FaultException}</opaque> with the fault information in it. Assumes that the <opaque>{docref XMLStartElement}</opaque> for the Fault has been read.</translation>
<comment>SOAPRPCMessageReader.handle-soap-1-1-fault</comment>
</string>

<string>
<original>Holds the value of this attribute as a {docref String}
        or {docref XMLName}.</original>
<translation>Holds the value of this attribute as a <opaque>{docref String}</opaque> or <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLAttribute.value</comment>
</string>

<string>
<original>Holds the value of this attribute as a {docref XMLName}.</original>
<translation>Holds the value of this attribute as a <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLAttribute.xml-name-values</comment>
</string>

<string>
<original>Holds the value of this {docref XMLCharacters} as a {docref XMLName}.</original>
<translation>Holds the value of this <opaque>{docref XMLCharacters}</opaque> as a <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLCharacters.xml-name-values</comment>
</string>

<string>
<original>Holds the {docref XMLName} for the name of the attribute.</original>
<translation>Holds the <opaque>{docref XMLName}</opaque> for the name of the attribute.</translation>
<comment>XMLAttribute.name</comment>
</string>

<string>
<original>If not {ctext null}, SOAP requests and responses will
        be output to this stream.</original>
<translation>If not <opaque>{ctext null}</opaque>, SOAP requests and responses will be output to this stream.</translation>
<comment>SOAPHTTPRPCPostCaller.trace-stream</comment>
</string>

<string>
<original>If not {ctext null}, any additional headers that will
        be sent with all requests by this {docref SOAPHTTPRPCPostCaller}.</original>
<translation>If not <opaque>{ctext null}</opaque>, any additional headers that will be sent with all requests by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.request-http-headers</comment>
</string>

<string>
<original>If not {docref SOAPTypeMultipleReference}{ctext .unknown} then
        when {docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}
        finds this entry, it will set
        {docref SOAPObjectType.multiple-reference} to this value as
        well as setting {docref SOAPObjectType.xml-type} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>If not <opaque>{docref SOAPTypeMultipleReference}{ctext .unknown}</opaque> then when <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.multiple-reference}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.xml-type}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type</comment>
</string>

<string>
<original>If not {docref SOAPTypeMultipleReference}{ctext .unknown} then
        when {docref DefaultSOAPElementNameToXMLTypeMapper.element-name-to-xml-type}
        finds this entry, it will set
        {docref SOAPObjectType.multiple-reference} to this value as
        well as setting {docref SOAPObjectType.xml-type} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>If not <opaque>{docref SOAPTypeMultipleReference}{ctext .unknown}</opaque> then when <opaque>{docref DefaultSOAPElementNameToXMLTypeMapper.element-name-to-xml-type}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.multiple-reference}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.xml-type}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type</comment>
</string>

<string>
<original>If not {docref SOAPTypeMultipleReference}{ctext .unknown} then
        when {docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}
        finds this entry, it will set
        {docref SOAPObjectType.multiple-reference} to this value as
        well as setting {docref SOAPObjectType.curl-type} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>If not <opaque>{docref SOAPTypeMultipleReference}{ctext .unknown}</opaque> then when <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.multiple-reference}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.curl-type}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type</comment>
</string>

<string>
<original>If not {docref SOAPTypeMultipleReference}{ctext .unknown} then
        when {docref DefaultSOAPXMLTypeToElementNameMapper.xml-type-to-element-name}
        finds this entry, it will set
        {docref SOAPObjectType.multiple-reference} to this value as
        well as setting {docref SOAPObjectType.element-name} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>If not <opaque>{docref SOAPTypeMultipleReference}{ctext .unknown}</opaque> then when <opaque>{docref DefaultSOAPXMLTypeToElementNameMapper.xml-type-to-element-name}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.multiple-reference}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.element-name}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.set-xml-type-to-element-name</comment>
</string>

<string>
<original>If there are attributes for this XML element, then this will
        an {ctext {Array-of XMLAttribute}}, otherwise it will be
        {ctext null}.</original>
<translation>If there are attributes for this XML element, then this will an <opaque>{ctext {Array-of XMLAttribute}}</opaque>, otherwise it will be <opaque>{ctext null}</opaque>.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>If {metavar exception} is not {ctext null}, then trying to look
        at {metavar canceled?} will cause {metavar exception} to be thrown.</original>
<translation>If <opaque>{metavar exception}</opaque> is not <opaque>{ctext null}</opaque>, then trying to look at <opaque>{metavar canceled?}</opaque> will cause <opaque>{metavar exception}</opaque> to be thrown.</translation>
<comment>SOAPHTTPRPCPostAsyncEvent.canceled?</comment>
</string>

<string>
<original>Immutable class that holds information about the type of a
        SOAP object.  May be only partially filled in.</original>
<translation>Immutable class that holds information about the type of a SOAP object. May be only partially filled in.</translation>
<comment>SOAPObjectType</comment>
</string>

<string>
<original>In addition to the return values that are the same as those
        from {docref SOAPMessageReader.read-response}, this also has a
        return value of an array of any attributes that were read from
        the root element of the message (which will be a SOAP Envelope
        element.)</original>
<translation>In addition to the return values that are the same as those from <opaque>{docref SOAPMessageReader.read-response}</opaque>, this also has a return value of an array of any attributes that were read from the root element of the message (which will be a SOAP Envelope element.)</translation>
<comment>SOAPRPCMessageReader.read-rpc-response</comment>
</string>

<string>
<original>In most implementations of {docref SOAPTypeMapper} this routine
        will look up a {docref SOAPTypeMapper.MarshalProc} based
        on the {param type}, from some sort of hash table, and then call 
        the proc.</original>
<translation>In most implementations of <opaque>{docref SOAPTypeMapper}</opaque> this routine will look up a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> based on the <opaque>{param type}</opaque>, from some sort of hash table, and then call the proc.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>In most implementations of {docref SOAPTypeMapper} this routine
        will look up a {docref SOAPTypeMapper.UnmarshalProc} based
        on the {param type}, from some sort of hash table, and then call 
        the proc.</original>
<translation>In most implementations of <opaque>{docref SOAPTypeMapper}</opaque> this routine will look up a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> based on the <opaque>{param type}</opaque>, from some sort of hash table, and then call the proc.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>Indicates if a charset parameter for {param character-encoding} be added
        to the Content-Type HTTP header.  The rest of the Content-Type
        HTTP header comes from {docref SOAPHTTPRPCPostCaller.content-type}
        and possibly {param soap-action}.</original>
<translation>Indicates if a charset parameter for <opaque>{param character-encoding}</opaque> be added to the Content-Type HTTP header. The rest of the Content-Type HTTP header comes from <opaque>{docref SOAPHTTPRPCPostCaller.content-type}</opaque> and possibly <opaque>{param soap-action}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>Indicates if a unique id should be created, if the
        {docref Object} did not already have a key.</original>
<translation>Indicates if a unique id should be created, if the <opaque>{docref Object}</opaque> did not already have a key.</translation>
<comment>SOAPMarshalContext.get-id</comment>
</string>

<string>
<original>Indicates if this event happened because of a cancel or not.</original>
<translation>Indicates if this event happened because of a cancel or not.</translation>
<comment>SOAPHTTPRPCPostAsyncEvent.canceled?</comment>
</string>

<string>
<original>Indicates if this object type can be "nil" in the SOAP message.</original>
<translation>Indicates if this object type can be "nil" in the SOAP message.</translation>
<comment>SOAPObjectType.default</comment>
</string>

<string>
<original>Indicates if this object type is legal for multiple reference or
        not.  Things which are multiple reference can have ids and
        be referenced more than once in a SOAP message.
        Generally object type things are multiple reference legal and
        basic types are not.</original>
<translation>Indicates if this object type is legal for multiple reference or not. Things which are multiple reference can have ids and be referenced more than once in a SOAP message. Generally object type things are multiple reference legal and basic types are not.</translation>
<comment>SOAPObjectType.default</comment>
</string>

<string>
<original>Instances of these are returned by
        {docref SOAPUnmarshalContext.get-object}.</original>
<translation>Instances of these are returned by <opaque>{docref SOAPUnmarshalContext.get-object}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState</comment>
</string>

<string>
<original>Look up a {docref SOAPTypeMapper.MarshalProc} based on a
        {docref SOAPObjectType} and an encoding.</original>
<translation>Look up a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> based on a <opaque>{docref SOAPObjectType}</opaque> and an encoding.</translation>
<comment>DefaultSOAPTypeMapper.get-marshal-proc</comment>
</string>

<string>
<original>Look up a {docref SOAPTypeMapper.UnmarshalProc} based on a
        {docref SOAPObjectType} and an encoding.</original>
<translation>Look up a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> based on a <opaque>{docref SOAPObjectType}</opaque> and an encoding.</translation>
<comment>DefaultSOAPTypeMapper.get-unmarshal-proc</comment>
</string>

<string>
<original>Marshal out any objects which have been referenced, but have not
        had an instance written out yet.</original>
<translation>Marshal out any objects which have been referenced, but have not had an instance written out yet.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>Marshals {param arguments} to {param stream}, assuming that
        the code calling this will handle all of the elements before
        and after the arguments.</original>
<translation>Marshals <opaque>{param arguments}</opaque> to <opaque>{param stream}</opaque>, assuming that the code calling this will handle all of the elements before and after the arguments.</translation>
<comment>SOAPRPCMessageWriter.write-arguments</comment>
</string>

<string>
<original>Non-abstract classes must provide an implementation of this.</original>
<translation>Non-abstract classes must provide an implementation of this.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>Non-abstract subclasses include
        {docref XMLStartDocument},
        {docref XMLStartElement},
        {docref XMLAttribute},
        {docref XMLCharacters},
        {docref XMLEndElement},
        and {docref XMLEndDocument}.</original>
<translation>Non-abstract subclasses include <opaque>{docref XMLStartDocument}</opaque>, <opaque>{docref XMLStartElement}</opaque>, <opaque>{docref XMLAttribute}</opaque>, <opaque>{docref XMLCharacters}</opaque>, <opaque>{docref XMLEndElement}</opaque>, and <opaque>{docref XMLEndDocument}</opaque>.</translation>
<comment>XMLToken</comment>
</string>

<string>
<original>Non-abstract subclasses must provide this.</original>
<translation>Non-abstract subclasses must provide this.</translation>
<comment>SOAPMarshalContext.reference-attribute-name</comment>
</string>

<string>
<original>Normally called by a marshaler after it has marshaled an instance
        of an object that is multiple referenceable, to make sure that
        there is no later attempt to marshal out another instance of
        the same object.</original>
<translation>Normally called by a marshaler after it has marshaled an instance of an object that is multiple referenceable, to make sure that there is no later attempt to marshal out another instance of the same object.</translation>
<comment>SOAPMarshalContext.clear-marshaler</comment>
</string>

<string>
<original>Normally just called by {docref SOAPUnmarshalContext.set-object}.</original>
<translation>Normally just called by <opaque>{docref SOAPUnmarshalContext.set-object}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState.call-callbacks</comment>
</string>

<string>
<original>Normally only used by {docref DefaultSOAPUnmarshalContext}.</original>
<translation>Normally only used by <opaque>{docref DefaultSOAPUnmarshalContext}</opaque>.</translation>
<comment>SOAPUnmarshalObjectState.default</comment>
</string>

<string>
<original>Once this is constructed, user code would call 
        {docref SOAPHTTPRPCPostCaller.call} to start a SOAP
        request/response.</original>
<translation>Once this is constructed, user code would call <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque> to start a SOAP request/response.</translation>
<comment>SOAPHTTPRPCPostCaller.default</comment>
</string>

<string>
<original>One {docref any} with either the value unmarshaled or
        a {docref SOAPUnmarshalObjectState} if there is
        the value was a reference and the instance for this
        has not been unmarshaled yet.  (The caller of
        the {docref SOAPTypeMapper.unmarshal} will presumably
        call {docref SOAPUnmarshalContext.append-callback}
        when ever a {docref SOAPUnmarshalObjectState} is
        returned so that it can handle the value when it is
        unmarshaled later.</original>
<translation>One <opaque>{docref any}</opaque> with either the value unmarshaled or a <opaque>{docref SOAPUnmarshalObjectState}</opaque> if there is the value was a reference and the instance for this has not been unmarshaled yet. (The caller of the <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> will presumably call <opaque>{docref SOAPUnmarshalContext.append-callback}</opaque> when ever a <opaque>{docref SOAPUnmarshalObjectState}</opaque> is returned so that it can handle the value when it is unmarshaled later.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>Only well-formed XML is accepted; the
        constructor will throw a {docref SAXParseException}
        on ill-formed XML.</original>
<translation>Only well-formed XML is accepted; the constructor will throw a <opaque>{docref SAXParseException}</opaque> on ill-formed XML.</translation>
<comment>XMLInputStream.default</comment>
</string>

<string>
<original>Optional {docref XMLName} parameter to name the element being
        ended.  The default is {ctext null}.  When creating an {ctext
        XMLEndElement} for use in an {docref XMLOutputStream}, it is
        not necessary to supply this parameter, because the {docref
        XMLOutputStream} can automatically match up this {ctext
        XMLEndElement} with the corresponding {docref
        XMLStartElement}.</original>
<translation>Optional <opaque>{docref XMLName}</opaque> parameter to name the element being ended. The default is <opaque>{ctext null}</opaque>. When creating an <opaque>{ctext XMLEndElement}</opaque> for use in an <opaque>{docref XMLOutputStream}</opaque>, it is not necessary to supply this parameter, because the <opaque>{docref XMLOutputStream}</opaque> can automatically match up this <opaque>{ctext XMLEndElement}</opaque> with the corresponding <opaque>{docref XMLStartElement}</opaque>.</translation>
<comment>XMLEndElement.default</comment>
</string>

<string>
<original>Parameter strings normally look like {ctext param-name=\"value\"},
        And this method will handle putting in the the "; " seperators
        between parameters.</original>
<translation>Parameter strings normally look like <opaque>{ctext param-name=\"value\"}</opaque>, And this method will handle putting in the the "; " seperators between parameters.</translation>
<comment>SOAPHTTPRPCPostCallerRequestData.add-parameter-to-content-type</comment>
</string>

<string>
<original>Perform a request/response SOAP call, sending over {param arguments}
        and getting back {param responses}.</original>
<translation>Perform a request/response SOAP call, sending over <opaque>{param arguments}</opaque> and getting back <opaque>{param responses}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>Possible values are:
        {itemize
            {item
                unknown{em-dash}Means that it is unknown if this object type
                can be multiply referenced, or when a parameter to a call,
                that the caller has no opinion on if something should be
                an instance or a reference.
            }
            {item
                single{em-dash}Means that this object type may not be
                multiply referenced, and when a parameter to a call,
                that there should be no tagging for referencing, and
                no referencing.
            }
            {item
                multiple{em-dash}Means that this object type may be
                multiply referenced, and when a parameter to a call,
                that referencing can be used, but no opinion is specified
                as to where something should be an instance or a reference.
            }
            {item
                multiple-instance{em-dash}Only used as a parameter to a call,
                and in that case, means that the item must be done as
                an instance in this case (but should be referencable by later
                things.)
            }
            {item
                multiple-reference{em-dash}Only used as a parameter to a call,
                and in that case, means that the item must be done as
                a reference in this case (but may have been already written
                as an instance, or may be written as an instance later.)
            }
        }</original>
<translation>Possible values are: <curl name="itemize"><curl name="item">unknown<opaque>{em-dash}</opaque>Means that it is unknown if this object type can be multiply referenced, or when a parameter to a call, that the caller has no opinion on if something should be an instance or a reference.</curl> <curl name="item">single<opaque>{em-dash}</opaque>Means that this object type may not be multiply referenced, and when a parameter to a call, that there should be no tagging for referencing, and no referencing.</curl> <curl name="item">multiple<opaque>{em-dash}</opaque>Means that this object type may be multiply referenced, and when a parameter to a call, that referencing can be used, but no opinion is specified as to where something should be an instance or a reference.</curl> <curl name="item">multiple-instance<opaque>{em-dash}</opaque>Only used as a parameter to a call, and in that case, means that the item must be done as an instance in this case (but should be referencable by later things.)</curl> <curl name="item">multiple-reference<opaque>{em-dash}</opaque>Only used as a parameter to a call, and in that case, means that the item must be done as a reference in this case (but may have been already written as an instance, or may be written as an instance later.)</curl></curl></translation>
<comment>SOAPTypeMultipleReference</comment>
</string>

<string>
<original>Possible values are:
        {itemize
            {item not-created{em-dash}The object has not been created
                yet because there is not enough information to create it.
            }
            {item created{em-dash}The object has been created, but
                some of its data has not yet be unmarshaled.
            }
            {item contents-changed{em-dash}The object has been created,
                and some of its contents have been changed, but it is
                not complete.
            }
            {item complete{em-dash}The object has been created, and all
                of its data has been unmarshaled.
            }
        }</original>
<translation>Possible values are: <curl name="itemize"><curl name="item">not-created<opaque>{em-dash}</opaque>The object has not been created yet because there is not enough information to create it.</curl> <curl name="item">created<opaque>{em-dash}</opaque>The object has been created, but some of its data has not yet be unmarshaled.</curl> <curl name="item">contents-changed<opaque>{em-dash}</opaque>The object has been created, and some of its contents have been changed, but it is not complete.</curl> <curl name="item">complete<opaque>{em-dash}</opaque>The object has been created, and all of its data has been unmarshaled.</curl></curl></translation>
<comment>SOAPUnmarshalObjectStatus</comment>
</string>

<string>
<original>Proc type stored in hash tables keyed by {docref SOAPObjectType},
        by subclasses of {docref SOAPTypeMapper} like
        {docref DefaultSOAPTypeMapper}.  {docref SOAPTypeMapper.marshal}
        in subclasses look these up and call them.</original>
<translation>Proc type stored in hash tables keyed by <opaque>{docref SOAPObjectType}</opaque>, by subclasses of <opaque>{docref SOAPTypeMapper}</opaque> like <opaque>{docref DefaultSOAPTypeMapper}</opaque>. <opaque>{docref SOAPTypeMapper.marshal}</opaque> in subclasses look these up and call them.</translation>
<comment>SOAPTypeMapper.MarshalProc</comment>
</string>

<string>
<original>Proc type stored in hash tables keyed by {docref SOAPObjectType},
        by subclasses of {docref SOAPTypeMapper} like
        {docref DefaultSOAPTypeMapper}.  {docref SOAPTypeMapper.unmarshal}
        in subclasses look these up and call them.</original>
<translation>Proc type stored in hash tables keyed by <opaque>{docref SOAPObjectType}</opaque>, by subclasses of <opaque>{docref SOAPTypeMapper}</opaque> like <opaque>{docref DefaultSOAPTypeMapper}</opaque>. <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> in subclasses look these up and call them.</translation>
<comment>SOAPTypeMapper.UnmarshalProc</comment>
</string>

<string>
<original>Read in a SOAP message into an array of values from a
        {docref XMLInputStream}.</original>
<translation>Read in a SOAP message into an array of values from a <opaque>{docref XMLInputStream}</opaque>.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>Reads and parses a {docref TextInputStream} containing XML.</original>
<translation>Reads and parses a <opaque>{docref TextInputStream}</opaque> containing XML.</translation>
<comment>XMLInputStream</comment>
</string>

<string>
<original>Remove the mapping from {docref SOAPObjectType} to a
        {docref SOAPTypeMapper.MarshalProc} for a given encoding.</original>
<translation>Remove the mapping from <opaque>{docref SOAPObjectType}</opaque> to a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> for a given encoding.</translation>
<comment>DefaultSOAPTypeMapper.remove-marshal-proc</comment>
</string>

<string>
<original>Remove the mapping from {docref SOAPObjectType} to a
        {docref SOAPTypeMapper.UnmarshalProc} for a given encoding.</original>
<translation>Remove the mapping from <opaque>{docref SOAPObjectType}</opaque> to a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> for a given encoding.</translation>
<comment>DefaultSOAPTypeMapper.remove-unmarshal-proc</comment>
</string>

<string>
<original>Represent a primitive value that might be unspecified.</original>
<translation>Represent a primitive value that might be unspecified.</translation>
<comment>Nullable</comment>
</string>

<string>
<original>Represent a value associated with an XSD schema simple type.</original>
<translation>Represent a value associated with an XSD schema simple type.</translation>
<comment>XMLSimpleValue</comment>
</string>

<string>
<original>Represents information in a {docref SOAPObjectType} as to if an
        object type can be multiply referenced, and used to indicate
        if a given field is currently being written out as a reference
        or as the actual value.</original>
<translation>Represents information in a <opaque>{docref SOAPObjectType}</opaque> as to if an object type can be multiply referenced, and used to indicate if a given field is currently being written out as a reference or as the actual value.</translation>
<comment>SOAPTypeMultipleReference</comment>
</string>

<string>
<original>Return the stored id for an object, if there is one,
        possibly creating it if there isn't one.</original>
<translation>Return the stored id for an object, if there is one, possibly creating it if there isn't one.</translation>
<comment>SOAPMarshalContext.get-id</comment>
</string>

<string>
<original>Returns a new {docref SOAPObjectType} with
        {docref SOAPObjectType.curl-type} filled in based on
        {param type}{ctext .xml-type}, or if it has no
        information about the {docref SOAPObjectType.curl-type} that is
        appropriate for the {docref SOAPObjectType.xml-type} then
        it returns {param type}</original>
<translation>Returns a new <opaque>{docref SOAPObjectType}</opaque> with <opaque>{docref SOAPObjectType.curl-type}</opaque> filled in based on <opaque>{param type}{ctext .xml-type}</opaque>, or if it has no information about the <opaque>{docref SOAPObjectType.curl-type}</opaque> that is appropriate for the <opaque>{docref SOAPObjectType.xml-type}</opaque> then it returns <opaque>{param type}</opaque></translation>
<comment>SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type</comment>
</string>

<string>
<original>Returns a new {docref SOAPObjectType} with
        {docref SOAPObjectType.element-name} filled in based on
        {param type}{ctext .xml-type}, or if it has no
        information about the {docref SOAPObjectType.element-name} that is
        appropriate for the {docref SOAPObjectType.xml-type} then
        it returns {param type}</original>
<translation>Returns a new <opaque>{docref SOAPObjectType}</opaque> with <opaque>{docref SOAPObjectType.element-name}</opaque> filled in based on <opaque>{param type}{ctext .xml-type}</opaque>, or if it has no information about the <opaque>{docref SOAPObjectType.element-name}</opaque> that is appropriate for the <opaque>{docref SOAPObjectType.xml-type}</opaque> then it returns <opaque>{param type}</opaque></translation>
<comment>SOAPXMLTypeToElementNameMapper.xml-type-to-element-name</comment>
</string>

<string>
<original>Returns a new {docref SOAPObjectType} with
        {docref SOAPObjectType.xml-type} filled in based on
        {param type}{ctext .curl-type}, or if it has no
        information about the {docref SOAPObjectType.xml-type} that is
        appropriate for the {docref SOAPObjectType.curl-type} then
        it returns {param type}</original>
<translation>Returns a new <opaque>{docref SOAPObjectType}</opaque> with <opaque>{docref SOAPObjectType.xml-type}</opaque> filled in based on <opaque>{param type}{ctext .curl-type}</opaque>, or if it has no information about the <opaque>{docref SOAPObjectType.xml-type}</opaque> that is appropriate for the <opaque>{docref SOAPObjectType.curl-type}</opaque> then it returns <opaque>{param type}</opaque></translation>
<comment>SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type</comment>
</string>

<string>
<original>Returns a new {docref SOAPObjectType} with
        {docref SOAPObjectType.xml-type} filled in based on
        {param type}{ctext .element-name}, or if it has no
        information about the {docref SOAPObjectType.xml-type} that is
        appropriate for the {docref SOAPObjectType.element-name} then
        it returns {param type}</original>
<translation>Returns a new <opaque>{docref SOAPObjectType}</opaque> with <opaque>{docref SOAPObjectType.xml-type}</opaque> filled in based on <opaque>{param type}{ctext .element-name}</opaque>, or if it has no information about the <opaque>{docref SOAPObjectType.xml-type}</opaque> that is appropriate for the <opaque>{docref SOAPObjectType.element-name}</opaque> then it returns <opaque>{param type}</opaque></translation>
<comment>SOAPElementNameToXMLTypeMapper.element-name-to-xml-type</comment>
</string>

<string>
<original>Returns a {ctext bool} indicating whether the value is specified.</original>
<translation>Returns a <opaque>{ctext bool}</opaque> indicating whether the value is specified.</translation>
<comment>Nullable.value?</comment>
</string>

<string>
<original>Returns either {param type} if no new information
        was found in its tables, or a new {docref SOAPObjectType}
        with a new {docref SOAPObjectType.curl-type} in it.</original>
<translation>Returns either <opaque>{param type}</opaque> if no new information was found in its tables, or a new <opaque>{docref SOAPObjectType}</opaque> with a new <opaque>{docref SOAPObjectType.curl-type}</opaque> in it.</translation>
<comment>SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type</comment>
</string>

<string>
<original>Returns either {param type} if no new information
        was found in its tables, or a new {docref SOAPObjectType}
        with a new {docref SOAPObjectType.element-name} and
        maybe a new {docref SOAPObjectType.multiple-reference} in it.</original>
<translation>Returns either <opaque>{param type}</opaque> if no new information was found in its tables, or a new <opaque>{docref SOAPObjectType}</opaque> with a new <opaque>{docref SOAPObjectType.element-name}</opaque> and maybe a new <opaque>{docref SOAPObjectType.multiple-reference}</opaque> in it.</translation>
<comment>SOAPXMLTypeToElementNameMapper.xml-type-to-element-name</comment>
</string>

<string>
<original>Returns either {param type} if no new information
        was found in its tables, or a new {docref SOAPObjectType}
        with a new {docref SOAPObjectType.xml-type} and
        maybe a new {docref SOAPObjectType.multiple-reference} in it.</original>
<translation>Returns either <opaque>{param type}</opaque> if no new information was found in its tables, or a new <opaque>{docref SOAPObjectType}</opaque> with a new <opaque>{docref SOAPObjectType.xml-type}</opaque> and maybe a new <opaque>{docref SOAPObjectType.multiple-reference}</opaque> in it.</translation>
<comment>SOAPElementNameToXMLTypeMapper.element-name-to-xml-type</comment>
</string>

<string>
<original>Returns either {param type} if no new information
        was found in its tables, or a new {docref SOAPObjectType}
        with a new {docref SOAPObjectType.xml-type} in it.</original>
<translation>Returns either <opaque>{param type}</opaque> if no new information was found in its tables, or a new <opaque>{docref SOAPObjectType}</opaque> with a new <opaque>{docref SOAPObjectType.xml-type}</opaque> in it.</translation>
<comment>SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type</comment>
</string>

<string>
<original>Returns the id string, or {ctext null} if there is not already
        an id for {param object}, and {param create-if-missing?} is
        {ctext false}.  The id string may start with a '#', and when
        creating a reference to something, that '#' should be used.
        However, when writting out an instance, the '#' should not be
        included in the id string.</original>
<translation>Returns the id string, or <opaque>{ctext null}</opaque> if there is not already an id for <opaque>{param object}</opaque>, and <opaque>{param create-if-missing?}</opaque> is <opaque>{ctext false}</opaque>. The id string may start with a '#', and when creating a reference to something, that '#' should be used. However, when writting out an instance, the '#' should not be included in the id string.</translation>
<comment>SOAPMarshalContext.get-id</comment>
</string>

<string>
<original>Returns the object for a given id, or returns a
        {docref SOAPUnmarshalObjectState} which can be used to be informed
        about the object at a later time, when it is unmarshaled.</original>
<translation>Returns the object for a given id, or returns a <opaque>{docref SOAPUnmarshalObjectState}</opaque> which can be used to be informed about the object at a later time, when it is unmarshaled.</translation>
<comment>SOAPUnmarshalContext.get-object</comment>
</string>

<string>
<original>Returns the object, or if the object has not been unmarshaled yet,
        a {docref SOAPUnmarshalObjectState}.
        
        Returns a {docref SOAPUnmarshalObjectStatus} indicating how
        much the object has been unmarshaled.</original>
<translation><p>Returns the object, or if the object has not been unmarshaled yet, a <opaque>{docref SOAPUnmarshalObjectState}</opaque>.</p>
<p>Returns a <opaque>{docref SOAPUnmarshalObjectStatus}</opaque> indicating how much the object has been unmarshaled.</p></translation>
<comment>SOAPUnmarshalContext.get-object</comment>
</string>

<string>
<original>Returns the type of value.</original>
<translation>Returns the type of value.</translation>
<comment>Nullable.type</comment>
</string>

<string>
<original>Returns the value, along with an indication of whether it was specified.</original>
<translation>Returns the value, along with an indication of whether it was specified.</translation>
<comment>Nullable.value-if-exists</comment>
</string>

<string>
<original>Returns the value, if specified, otherwise error.</original>
<translation>Returns the value, if specified, otherwise error.</translation>
<comment>Nullable.value</comment>
</string>

<string>
<original>Returns the value, if specified, otherwise null.</original>
<translation>Returns the value, if specified, otherwise null.</translation>
<comment>Nullable.value-as-any</comment>
</string>

<string>
<original>Returns the value, if specified, otherwise the default value for its type.</original>
<translation>Returns the value, if specified, otherwise the default value for its type.</translation>
<comment>Nullable.value-or-default</comment>
</string>

<string>
<original>Returns {ctext true} once the {ctext XMLOutputStream}
        has been created, and until
        the {docref TextOutputStream} has been closed explicitly
        via the {ctext close} method.</original>
<translation>Returns <opaque>{ctext true}</opaque> once the <opaque>{ctext XMLOutputStream}</opaque> has been created, and until the <opaque>{docref TextOutputStream}</opaque> has been closed explicitly via the <opaque>{ctext close}</opaque> method.</translation>
<comment>XMLOutputStream.open?</comment>
</string>

<string>
<original>SOAP 1.1 id attribute name, one possible value for
        {docref SOAPMarshalContext.id-attribute-name}
        to return.  This is equal to "id" with no namespace.</original>
<translation>SOAP 1.1 id attribute name, one possible value for <opaque>{docref SOAPMarshalContext.id-attribute-name}</opaque> to return. This is equal to "id" with no namespace.</translation>
<comment>SOAPMarshalContext.soap-1-1-id-attribute-name</comment>
</string>

<string>
<original>SOAP 1.1 reference attribute name, one possible value for
        {docref SOAPMarshalContext.reference-attribute-name}
        to return.  This is equal to "href" with no namespace.</original>
<translation>SOAP 1.1 reference attribute name, one possible value for <opaque>{docref SOAPMarshalContext.reference-attribute-name}</opaque> to return. This is equal to "href" with no namespace.</translation>
<comment>SOAPMarshalContext.soap-1-1-reference-attribute-name</comment>
</string>

<string>
<original>SOAP 1.2 reference attribute name, one possible value for
        {docref SOAPMarshalContext.reference-attribute-name}
        to return.  This is equal to "ref" with no namespace.</original>
<translation>SOAP 1.2 reference attribute name, one possible value for <opaque>{docref SOAPMarshalContext.reference-attribute-name}</opaque> to return. This is equal to "ref" with no namespace.</translation>
<comment>SOAPMarshalContext.soap-1-2-reference-attribute-name</comment>
</string>

<string>
<original>SOAPAction is handled separately with a parameter to
        {docref SOAPHTTPRPCPostCaller.call}.</original>
<translation>SOAPAction is handled separately with a parameter to <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.request-http-headers</comment>
</string>

<string>
<original>See {docref DefaultSOAPCurlTypeToXMLTypeMapper} for a basic
        implementation of this interface.</original>
<translation>See <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPCurlTypeToXMLTypeMapper</comment>
</string>

<string>
<original>See {docref DefaultSOAPElementNameToXMLTypeMapper} for a basic
        implementation of this interface.</original>
<translation>See <opaque>{docref DefaultSOAPElementNameToXMLTypeMapper}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPElementNameToXMLTypeMapper</comment>
</string>

<string>
<original>See {docref DefaultSOAPTypeMapper} for a basic implementation
        of this interface.</original>
<translation>See <opaque>{docref DefaultSOAPTypeMapper}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPTypeMapper</comment>
</string>

<string>
<original>See {docref DefaultSOAPXMLTypeToCurlTypeMapper} for a basic
        implementation of this interface.</original>
<translation>See <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPXMLTypeToCurlTypeMapper</comment>
</string>

<string>
<original>See {docref DefaultSOAPXMLTypeToElementNameMapper} for a basic
        implementation of this interface.</original>
<translation>See <opaque>{docref DefaultSOAPXMLTypeToElementNameMapper}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPXMLTypeToElementNameMapper</comment>
</string>

<string>
<original>See {docref SOAPHTTPRPCPostCaller.get-response-stream}.</original>
<translation>See <opaque>{docref SOAPHTTPRPCPostCaller.get-response-stream}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.close-response-stream</comment>
</string>

<string>
<original>See {docref SOAPObjectType.default} for descriptions of the
        other parameters, which, if specified override the values
        in {param object-type}.</original>
<translation>See <opaque>{docref SOAPObjectType.default}</opaque> for descriptions of the other parameters, which, if specified override the values in <opaque>{param object-type}</opaque>.</translation>
<comment>SOAPObjectType.clone-with</comment>
</string>

<string>
<original>See {docref SOAPRPCMessageReader} for a basic implementation
        of this interface.</original>
<translation>See <opaque>{docref SOAPRPCMessageReader}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPMessageReader</comment>
</string>

<string>
<original>See {docref SOAPRPCMessageWriter} for a basic implementation
        of this interface.</original>
<translation>See <opaque>{docref SOAPRPCMessageWriter}</opaque> for a basic implementation of this interface.</translation>
<comment>SOAPMessageWriter</comment>
</string>

<string>
<original>Set the mapping from {docref SOAPObjectType} to a
        {docref SOAPTypeMapper.MarshalProc} for a given encoding.
        This proc will then be called when
        {docref DefaultSOAPTypeMapper.marshal} is called with the same
        {docref SOAPObjectType}.</original>
<translation>Set the mapping from <opaque>{docref SOAPObjectType}</opaque> to a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> for a given encoding. This proc will then be called when <opaque>{docref DefaultSOAPTypeMapper.marshal}</opaque> is called with the same <opaque>{docref SOAPObjectType}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-marshal-proc</comment>
</string>

<string>
<original>Set the mapping from {docref SOAPObjectType} to a
        {docref SOAPTypeMapper.UnmarshalProc} for a given encoding.
        This proc will then be called when
        {docref DefaultSOAPTypeMapper.unmarshal} is called with the same
        {docref SOAPObjectType}.</original>
<translation>Set the mapping from <opaque>{docref SOAPObjectType}</opaque> to a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> for a given encoding. This proc will then be called when <opaque>{docref DefaultSOAPTypeMapper.unmarshal}</opaque> is called with the same <opaque>{docref SOAPObjectType}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-unmarshal-proc</comment>
</string>

<string>
<original>Set the stored id for {param object}.</original>
<translation>Set the stored id for <opaque>{param object}</opaque>.</translation>
<comment>SOAPMarshalContext.set-id</comment>
</string>

<string>
<original>Set up a mapping from {docref SOAPObjectType.curl-type} to
        {docref SOAPObjectType.xml-type}.  Mappings are used by
        {docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}.</original>
<translation>Set up a mapping from <opaque>{docref SOAPObjectType.curl-type}</opaque> to <opaque>{docref SOAPObjectType.xml-type}</opaque>. Mappings are used by <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}</opaque>.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type</comment>
</string>

<string>
<original>Set up a mapping from {docref SOAPObjectType.element-name} to
        {docref SOAPObjectType.xml-type}.  Mappings are used by
        {docref DefaultSOAPElementNameToXMLTypeMapper.element-name-to-xml-type}.</original>
<translation>Set up a mapping from <opaque>{docref SOAPObjectType.element-name}</opaque> to <opaque>{docref SOAPObjectType.xml-type}</opaque>. Mappings are used by <opaque>{docref DefaultSOAPElementNameToXMLTypeMapper.element-name-to-xml-type}</opaque>.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type</comment>
</string>

<string>
<original>Set up a mapping from {docref SOAPObjectType.xml-type} to
        {docref SOAPObjectType.curl-type}.  Mappings are used by
        {docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}.</original>
<translation>Set up a mapping from <opaque>{docref SOAPObjectType.xml-type}</opaque> to <opaque>{docref SOAPObjectType.curl-type}</opaque>. Mappings are used by <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type</comment>
</string>

<string>
<original>Set up a mapping from {docref SOAPObjectType.xml-type} to
        {docref SOAPObjectType.element-name}.  Mappings are used by
        {docref DefaultSOAPXMLTypeToElementNameMapper.xml-type-to-element-name}.</original>
<translation>Set up a mapping from <opaque>{docref SOAPObjectType.xml-type}</opaque> to <opaque>{docref SOAPObjectType.element-name}</opaque>. Mappings are used by <opaque>{docref DefaultSOAPXMLTypeToElementNameMapper.xml-type-to-element-name}</opaque>.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.set-xml-type-to-element-name</comment>
</string>

<string>
<original>Sets the proc to be called to marshal a given object, when
        it comes time to write out any multiply referenced objects whose
        instances have not yet been written out.  This is normally
        called in {docref SOAPTypeMapper.marshal} when a reference to
        an object is first being written out.</original>
<translation>Sets the proc to be called to marshal a given object, when it comes time to write out any multiply referenced objects whose instances have not yet been written out. This is normally called in <opaque>{docref SOAPTypeMapper.marshal}</opaque> when a reference to an object is first being written out.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>Should the message be read and written as a document style or rpc style
        SOAP message.  (rpc style messages have an element named after the
        operation as the element in the Body that contains all of the
        arguments.  document style messages have the arguments directly
        under the Body element.)</original>
<translation>Should the message be read and written as a document style or rpc style SOAP message. (rpc style messages have an element named after the operation as the element in the Body that contains all of the arguments. document style messages have the arguments directly under the Body element.)</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>Should the message be read as a document style or rpc style
        SOAP message.  (rpc style messages have an element named after the
        operation as the element in the Body that contains all of the
        arguments.  document style messages have the arguments directly
        under the Body element, although if {param operation} is
        not {ctext null} document style is basically the same as
        rpc style.)</original>
<translation>Should the message be read as a document style or rpc style SOAP message. (rpc style messages have an element named after the operation as the element in the Body that contains all of the arguments. document style messages have the arguments directly under the Body element, although if <opaque>{param operation}</opaque> is not <opaque>{ctext null}</opaque> document style is basically the same as rpc style.)</translation>
<comment>SOAPRPCMessageReader.read-rpc-response</comment>
</string>

<string>
<original>Should the message be written as a document style or rpc style
        SOAP message.  (rpc style messages have an element named after the
        operation as the element in the Body that contains all of the
        arguments.  document style messages have the arguments directly
        under the Body element, although if {param operation} is
        not {ctext null} document style is basically the same as
        rpc style.)</original>
<translation>Should the message be written as a document style or rpc style SOAP message. (rpc style messages have an element named after the operation as the element in the Body that contains all of the arguments. document style messages have the arguments directly under the Body element, although if <opaque>{param operation}</opaque> is not <opaque>{ctext null}</opaque> document style is basically the same as rpc style.)</translation>
<comment>SOAPRPCMessageWriter.write-rpc-request</comment>
</string>

<string>
<original>Specifies "Accept-Encoding" HTTP header to be used for requests.</original>
<translation>Specifies "Accept-Encoding" HTTP header to be used for requests.</translation>
<comment>WSDLHTTPRPCPostClient.accept-encoding</comment>
</string>

<string>
<original>String which will be used as the prefix for the ids that
        this class generates inside of
        {docref DefaultSOAPMarshalContext.get-id} and
        {docref DefaultSOAPMarshalContext.set-marshaler}.  It should
        start with a '#'.</original>
<translation>String which will be used as the prefix for the ids that this class generates inside of <opaque>{docref DefaultSOAPMarshalContext.get-id}</opaque> and <opaque>{docref DefaultSOAPMarshalContext.set-marshaler}</opaque>. It should start with a '#'.</translation>
<comment>DefaultSOAPMarshalContext.default</comment>
</string>

<string>
<original>Take a {docref SOAPObjectType}, and see if it has fields
        which are missing and can be filled in
        if the {docref SOAPObjectType.curl-type}
        is some kind of array.</original>
<translation>Take a <opaque>{docref SOAPObjectType}</opaque>, and see if it has fields which are missing and can be filled in if the <opaque>{docref SOAPObjectType.curl-type}</opaque> is some kind of array.</translation>
<comment>SOAPObjectType.fill-in-for-array-type</comment>
</string>

<string>
<original>Take a {docref SOAPObjectType}, and see if it has fields
        which are missing and can be filled in.
        First, if the {docref SOAPObjectType.xml-type} is missing,
        ask the {docref SOAPCurlTypeToXMLTypeMapper} if it can supply
        a new {docref SOAPObjectType} with a {docref SOAPObjectType.xml-type}
        figured out based on the {docref SOAPObjectType.curl-type}.
        Second, if the {docref SOAPObjectType.element-name} is missing,
        ask the {docref SOAPXMLTypeToElementNameMapper}
        if it can supply a new {docref SOAPObjectType} with a
        {docref SOAPObjectType.element-name}
        figured out based on the {docref SOAPObjectType.xml-type}.</original>
<translation>Take a <opaque>{docref SOAPObjectType}</opaque>, and see if it has fields which are missing and can be filled in. First, if the <opaque>{docref SOAPObjectType.xml-type}</opaque> is missing, ask the <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> if it can supply a new <opaque>{docref SOAPObjectType}</opaque> with a <opaque>{docref SOAPObjectType.xml-type}</opaque> figured out based on the <opaque>{docref SOAPObjectType.curl-type}</opaque>. Second, if the <opaque>{docref SOAPObjectType.element-name}</opaque> is missing, ask the <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> if it can supply a new <opaque>{docref SOAPObjectType}</opaque> with a <opaque>{docref SOAPObjectType.element-name}</opaque> figured out based on the <opaque>{docref SOAPObjectType.xml-type}</opaque>.</translation>
<comment>SOAPObjectType.fill-in-from-curl-type-mapper</comment>
</string>

<string>
<original>Take a {docref SOAPObjectType}, and see if it has fields
        which are missing and can be filled in.
        First, if the {docref SOAPObjectType.xml-type} is missing,
        ask the {docref SOAPElementNameToXMLTypeMapper} if it can supply
        a new {docref SOAPObjectType} with a {docref SOAPObjectType.xml-type}
        figured out based on the {docref SOAPObjectType.element-name}.
        Second, if the {docref SOAPObjectType.curl-type} is missing, or
        equal to {docref any}, ask the {docref SOAPXMLTypeToCurlTypeMapper}
        if it can supply a new {docref SOAPObjectType} with a
        {docref SOAPObjectType.curl-type}
        figured out based on the {docref SOAPObjectType.xml-type}.</original>
<translation>Take a <opaque>{docref SOAPObjectType}</opaque>, and see if it has fields which are missing and can be filled in. First, if the <opaque>{docref SOAPObjectType.xml-type}</opaque> is missing, ask the <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> if it can supply a new <opaque>{docref SOAPObjectType}</opaque> with a <opaque>{docref SOAPObjectType.xml-type}</opaque> figured out based on the <opaque>{docref SOAPObjectType.element-name}</opaque>. Second, if the <opaque>{docref SOAPObjectType.curl-type}</opaque> is missing, or equal to <opaque>{docref any}</opaque>, ask the <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> if it can supply a new <opaque>{docref SOAPObjectType}</opaque> with a <opaque>{docref SOAPObjectType.curl-type}</opaque> figured out based on the <opaque>{docref SOAPObjectType.xml-type}</opaque>.</translation>
<comment>SOAPObjectType.fill-in-from-element-name-mapper</comment>
</string>

<string>
<original>Text data for this element.</original>
<translation>Text data for this element.</translation>
<comment>XMLCharacters.default</comment>
</string>

<string>
<original>The XML Schema type ascribed to this value.</original>
<translation>The XML Schema type ascribed to this value.</translation>
<comment>XMLSimpleValue.xml-type</comment>
</string>

<string>
<original>The XML element name of this object type.  (Eg. element as
        declared in an XML Schema based on some data type.)
        (Eg.
        {code {new XMLName, SOAPTypeMapper.soap-1-1-encoding-uri, "string"}})
        Can be {ctext null}, meaning that this information is unknown for
        this type.</original>
<translation>The XML element name of this object type. (Eg. element as declared in an XML Schema based on some data type.) (Eg. <opaque>{code {new XMLName, SOAPTypeMapper.soap-1-1-encoding-uri, "string"}}</opaque>) Can be <opaque>{ctext null}</opaque>, meaning that this information is unknown for this type.</translation>
<comment>SOAPObjectType.default</comment>
</string>

<string>
<original>The abstract class for the interface that handles possibly
        creating a new {docref SOAPObjectType}, filling in
        {docref SOAPObjectType.curl-type} from
        {docref SOAPObjectType.xml-type} based on a table with
        that sort of information in it.</original>
<translation>The abstract class for the interface that handles possibly creating a new <opaque>{docref SOAPObjectType}</opaque>, filling in <opaque>{docref SOAPObjectType.curl-type}</opaque> from <opaque>{docref SOAPObjectType.xml-type}</opaque> based on a table with that sort of information in it.</translation>
<comment>SOAPXMLTypeToCurlTypeMapper</comment>
</string>

<string>
<original>The abstract class for the interface that handles possibly
        creating a new {docref SOAPObjectType}, filling in
        {docref SOAPObjectType.element-name} from
        {docref SOAPObjectType.xml-type} based on a table with
        that sort of information in it.</original>
<translation>The abstract class for the interface that handles possibly creating a new <opaque>{docref SOAPObjectType}</opaque>, filling in <opaque>{docref SOAPObjectType.element-name}</opaque> from <opaque>{docref SOAPObjectType.xml-type}</opaque> based on a table with that sort of information in it.</translation>
<comment>SOAPXMLTypeToElementNameMapper</comment>
</string>

<string>
<original>The abstract class for the interface that handles possibly creating a
        new {docref SOAPObjectType}, filling in
        {docref SOAPObjectType.xml-type} from
        {docref SOAPObjectType.curl-type} based on a table with
        that sort of information in it.</original>
<translation>The abstract class for the interface that handles possibly creating a new <opaque>{docref SOAPObjectType}</opaque>, filling in <opaque>{docref SOAPObjectType.xml-type}</opaque> from <opaque>{docref SOAPObjectType.curl-type}</opaque> based on a table with that sort of information in it.</translation>
<comment>SOAPCurlTypeToXMLTypeMapper</comment>
</string>

<string>
<original>The abstract class for the interface that handles possibly creating a
        new {docref SOAPObjectType}, filling in
        {docref SOAPObjectType.xml-type} from
        {docref SOAPObjectType.element-name} based on a table with
        that sort of information in it.</original>
<translation>The abstract class for the interface that handles possibly creating a new <opaque>{docref SOAPObjectType}</opaque>, filling in <opaque>{docref SOAPObjectType.xml-type}</opaque> from <opaque>{docref SOAPObjectType.element-name}</opaque> based on a table with that sort of information in it.</translation>
<comment>SOAPElementNameToXMLTypeMapper</comment>
</string>

<string>
<original>The array of callbacks to be called when the object is
        further unmarshaled.</original>
<translation>The array of callbacks to be called when the object is further unmarshaled.</translation>
<comment>SOAPUnmarshalObjectState.callbacks</comment>
</string>

<string>
<original>The attribute declarations of a start tag are contained
        in {docref XMLAttribute}s that follow the {ctext XMLStartElement}
        in an {docref XMLInputStream} and an {docref XMLOutputStream}.</original>
<translation>The attribute declarations of a start tag are contained in <opaque>{docref XMLAttribute}</opaque>s that follow the <opaque>{ctext XMLStartElement}</opaque> in an <opaque>{docref XMLInputStream}</opaque> and an <opaque>{docref XMLOutputStream}</opaque>.</translation>
<comment>XMLStartElement</comment>
</string>

<string>
<original>The character encoding to be used for encoding the SOAP data into
        message bytes.</original>
<translation>The character encoding to be used for encoding the SOAP data into message bytes.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The classes in this package assist developers in making
        SOAP requests over HTTP.</original>
<translation>The classes in this package assist developers in making SOAP requests over HTTP.</translation>
<comment>COM.CURL.WSDK.SOAP</comment>
</string>

<string>
<original>The data which will be written out.  The type of the data
        should be equal to {ctext type.curl-type} or be a subclass
        of {ctext type.curl-type}.</original>
<translation>The data which will be written out. The type of the data should be equal to <opaque>{ctext type.curl-type}</opaque> or be a subclass of <opaque>{ctext type.curl-type}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The default implementation of this returns
        {docref SOAPMarshalContext.soap-1-1-id-attribute-name}.</original>
<translation>The default implementation of this returns <opaque>{docref SOAPMarshalContext.soap-1-1-id-attribute-name}</opaque>.</translation>
<comment>SOAPMarshalContext.id-attribute-name</comment>
</string>

<string>
<original>The element name as an {docref XMLName}.</original>
<translation>The element name as an <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLStartElement.default</comment>
</string>

<string>
<original>The encoding to use for the conversion of XML into
        values, if no encoding attributes are found in the XML.
        {ctext null} means any encoding, or the default for
        this {docref SOAPMessageReader}.</original>
<translation>The encoding to use for the conversion of XML into values, if no encoding attributes are found in the XML. <opaque>{ctext null}</opaque> means any encoding, or the default for this <opaque>{docref SOAPMessageReader}</opaque>.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>The encoding to use for the conversion of arguments into
        XML.  {ctext null} means any encoding, or the default for
        the {docref SOAPMessageWriter}.</original>
<translation>The encoding to use for the conversion of arguments into XML. <opaque>{ctext null}</opaque> means any encoding, or the default for the <opaque>{docref SOAPMessageWriter}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The encoding to use for the conversion of arguments into
        XML.  {ctext null} means any encoding, or the default for
        this {docref SOAPMessageWriter}.</original>
<translation>The encoding to use for the conversion of arguments into XML. <opaque>{ctext null}</opaque> means any encoding, or the default for this <opaque>{docref SOAPMessageWriter}</opaque>.</translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>The encoding to use for the conversion of {param value} into
        XML.  {ctext null} means any encoding, or the default for
        this {docref SOAPTypeMapper}.</original>
<translation>The encoding to use for the conversion of <opaque>{param value}</opaque> into XML. <opaque>{ctext null}</opaque> means any encoding, or the default for this <opaque>{docref SOAPTypeMapper}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The encoding to use to marshal of {param object}.  This will be passed
        to {param marshaler} when it is called to marshal {param object}.</original>
<translation>The encoding to use to marshal of <opaque>{param object}</opaque>. This will be passed to <opaque>{param marshaler}</opaque> when it is called to marshal <opaque>{param object}</opaque>.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>The format version used by generated WSDL service classes.</original>
<translation>The format version used by generated WSDL service classes.</translation>
<comment>wsdl-service-class-version</comment>
</string>

<string>
<original>The id of the object being set.</original>
<translation>The id of the object being set.</translation>
<comment>SOAPUnmarshalContext.set-object</comment>
</string>

<string>
<original>The id of the object that something has a reference to and wants
        to find.</original>
<translation>The id of the object that something has a reference to and wants to find.</translation>
<comment>SOAPUnmarshalContext.get-object</comment>
</string>

<string>
<original>The id of the object.</original>
<translation>The id of the object.</translation>
<comment>SOAPUnmarshalObjectState.default</comment>
</string>

<string>
<original>The input XML is parsed into {docref XMLToken}s,
        which are available for sequential reading via the public methods.

        Namespaces are handled appropriately: for storage in {docref XMLToken}s,
        namespace prefixes are replaced with the appropriate namespace
        URI, and namespace attributes are removed.

        The {docref SAXParser} is used to read the XML.

        This class is customized for use with SOAP.
        Not all XML capability is supported.  For example,
        processing instructions are not supported, since
        they are not allowed in SOAP messages.</original>
<translation><p>The input XML is parsed into <opaque>{docref XMLToken}</opaque>s, which are available for sequential reading via the public methods.</p>
<p>Namespaces are handled appropriately: for storage in <opaque>{docref XMLToken}</opaque>s, namespace prefixes are replaced with the appropriate namespace URI, and namespace attributes are removed.</p>
<p>The <opaque>{docref SAXParser}</opaque> is used to read the XML.</p>
<p>This class is customized for use with SOAP. Not all XML capability is supported. For example, processing instructions are not supported, since they are not allowed in SOAP messages.</p></translation>
<comment>XMLInputStream</comment>
</string>

<string>
<original>The local-name of the SOAP 1.1 detail element.  Which can appear
        under the SOAP 1.1 Fault element.</original>
<translation>The local-name of the SOAP 1.1 detail element. Which can appear under the SOAP 1.1 Fault element.</translation>
<comment>SOAPMessageReader.soap-1-1-detail-name</comment>
</string>

<string>
<original>The local-name of the SOAP 1.1 fault code element.  Which can appear
        under the SOAP 1.1 Fault element.</original>
<translation>The local-name of the SOAP 1.1 fault code element. Which can appear under the SOAP 1.1 Fault element.</translation>
<comment>SOAPMessageReader.soap-1-1-fault-code-name</comment>
</string>

<string>
<original>The local-name of the SOAP 1.1 fault string element.  Which can appear
        under the SOAP 1.1 Fault element.</original>
<translation>The local-name of the SOAP 1.1 fault string element. Which can appear under the SOAP 1.1 Fault element.</translation>
<comment>SOAPMessageReader.soap-1-1-fault-string-name</comment>
</string>

<string>
<original>The local-name of the SOAP 1.2 fault code element.  Which can appear
        under the SOAP 1.2 Fault element.</original>
<translation>The local-name of the SOAP 1.2 fault code element. Which can appear under the SOAP 1.2 Fault element.</translation>
<comment>SOAPMessageReader.soap-1-2-fault-code-name</comment>
</string>

<string>
<original>The local-name of the SOAP 1.2 fault string element.  Which can appear
        under the SOAP 1.2 Fault element.</original>
<translation>The local-name of the SOAP 1.2 fault string element. Which can appear under the SOAP 1.2 Fault element.</translation>
<comment>SOAPMessageReader.soap-1-2-fault-string-name</comment>
</string>

<string>
<original>The marshalers that this will be calling were ussually provided
        by {docref SOAPMarshalContext.set-marshaler}, and will be
        cleared out by {docref SOAPMarshalContext.clear-marshaler} as
        called by the marshaler.</original>
<translation>The marshalers that this will be calling were ussually provided by <opaque>{docref SOAPMarshalContext.set-marshaler}</opaque>, and will be cleared out by <opaque>{docref SOAPMarshalContext.clear-marshaler}</opaque> as called by the marshaler.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>The minimum {docref SOAPUnmarshalObjectStatus} that the object
        needs to be at before the proc can do anything with the
        object.  The {docref SOAPUnmarshalContext} may call the proc
        before the object is at {param min-status}.</original>
<translation>The minimum <opaque>{docref SOAPUnmarshalObjectStatus}</opaque> that the object needs to be at before the proc can do anything with the object. The <opaque>{docref SOAPUnmarshalContext}</opaque> may call the proc before the object is at <opaque>{param min-status}</opaque>.</translation>
<comment>SOAPUnmarshalContext.append-callback</comment>
</string>

<string>
<original>The name (an {docref XMLName}) of the element being started.</original>
<translation>The name (an <opaque>{docref XMLName}</opaque>) of the element being started.</translation>
<comment>XMLStartElement.element</comment>
</string>

<string>
<original>The name of the SOAP 1.1 Body, one of the elements directly
        under the Envelope for SOAP 1.1 messages.  The body holds
        the main values being sent or received.</original>
<translation>The name of the SOAP 1.1 Body, one of the elements directly under the Envelope for SOAP 1.1 messages. The body holds the main values being sent or received.</translation>
<comment>SOAPMessageWriter.soap-1-1-body-xml-name</comment>
</string>

<string>
<original>The name of the SOAP 1.1 Envelope element,
        the root element of all SOAP 1.1 messages.</original>
<translation>The name of the SOAP 1.1 Envelope element, the root element of all SOAP 1.1 messages.</translation>
<comment>SOAPMessageWriter.soap-1-1-envelope-xml-name</comment>
</string>

<string>
<original>The name of the SOAP 1.1 Header, one of the elements directly
        under the Envelope for SOAP 1.1 messages.</original>
<translation>The name of the SOAP 1.1 Header, one of the elements directly under the Envelope for SOAP 1.1 messages.</translation>
<comment>SOAPMessageWriter.soap-1-1-header-xml-name</comment>
</string>

<string>
<original>The name of the SOAP 1.1 encoding-style attribute.</original>
<translation>The name of the SOAP 1.1 encoding-style attribute.</translation>
<comment>SOAPMessageWriter.soap-1-1-encoding-style-attribute-xml-name</comment>
</string>

<string>
<original>The name of the attribute used for multiple referencing.
        For SOAP 1.1 this will normally be
        {docref SOAPMarshalContext.soap-1-1-reference-attribute-name}.</original>
<translation>The name of the attribute used for multiple referencing. For SOAP 1.1 this will normally be <opaque>{docref SOAPMarshalContext.soap-1-1-reference-attribute-name}</opaque>.</translation>
<comment>SOAPMarshalContext.reference-attribute-name</comment>
</string>

<string>
<original>The name of the attribute used for the id for multiple
        referencable objects when marshaled into XML.
        For SOAP 1.1 this will normally be
        {docref SOAPMarshalContext.soap-1-1-id-attribute-name}.</original>
<translation>The name of the attribute used for the id for multiple referencable objects when marshaled into XML. For SOAP 1.1 this will normally be <opaque>{docref SOAPMarshalContext.soap-1-1-id-attribute-name}</opaque>.</translation>
<comment>SOAPMarshalContext.id-attribute-name</comment>
</string>

<string>
<original>The name of the operation expected in the SOAP response message, or
        {ctext null} if no operation.</original>
<translation>The name of the operation expected in the SOAP response message, or <opaque>{ctext null}</opaque> if no operation.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The name of the operation for this SOAP message, or {ctext null}
        if no operation.  If this is not {ctext null} then this will be
        expected as a surrounding element of the responses for rpc and
        document style message.</original>
<translation>The name of the operation for this SOAP message, or <opaque>{ctext null}</opaque> if no operation. If this is not <opaque>{ctext null}</opaque> then this will be expected as a surrounding element of the responses for rpc and document style message.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>The name of the operation for this SOAP message, or {ctext null}
        if no operation.  If this is not {ctext null} then this will be
        written out as a surrounding element of the arguments for rpc and
        document style.</original>
<translation>The name of the operation for this SOAP message, or <opaque>{ctext null}</opaque> if no operation. If this is not <opaque>{ctext null}</opaque> then this will be written out as a surrounding element of the arguments for rpc and document style.</translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>The name of the operation to write into the SOAP request message, or
        {ctext null} if no operation.</original>
<translation>The name of the operation to write into the SOAP request message, or <opaque>{ctext null}</opaque> if no operation.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The name of the {ctext XMLAttribute} as an {docref XMLName}.</original>
<translation>The name of the <opaque>{ctext XMLAttribute}</opaque> as an <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLAttribute.default</comment>
</string>

<string>
<original>The namespace of SOAP 1.1 Envelope elements.</original>
<translation>The namespace of SOAP 1.1 Envelope elements.</translation>
<comment>SOAPMessageWriter.soap-1-1-envelope-uri</comment>
</string>

<string>
<original>The object or {ctext null} if the object has not been unmarshaled yet.</original>
<translation>The object or <opaque>{ctext null}</opaque> if the object has not been unmarshaled yet.</translation>
<comment>SOAPUnmarshalObjectState.default</comment>
</string>

<string>
<original>The object to clear the marshaler for.</original>
<translation>The object to clear the marshaler for.</translation>
<comment>SOAPMarshalContext.clear-marshaler</comment>
</string>

<string>
<original>The object to look up the id for.</original>
<translation>The object to look up the id for.</translation>
<comment>SOAPMarshalContext.get-id</comment>
</string>

<string>
<original>The object to set the id for.</original>
<translation>The object to set the id for.</translation>
<comment>SOAPMarshalContext.set-id</comment>
</string>

<string>
<original>The object to set the marshaler for.</original>
<translation>The object to set the marshaler for.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>The object, or {ctext null} if it has not been created yet.</original>
<translation>The object, or <opaque>{ctext null}</opaque> if it has not been created yet.</translation>
<comment>SOAPUnmarshalObjectState.object</comment>
</string>

<string>
<original>The parameters and return values match the similarly named ones from
        {docref SOAPMessageReader.read-response}.</original>
<translation>The parameters and return values match the similarly named ones from <opaque>{docref SOAPMessageReader.read-response}</opaque>.</translation>
<comment>SOAPRPCMessageReader.read-response-values</comment>
</string>

<string>
<original>The parameters are a subset of the {docref SOAPHTTPRPCPostCaller.call}
        parameters and have the same meanings.</original>
<translation>The parameters are a subset of the <opaque>{docref SOAPHTTPRPCPostCaller.call}</opaque> parameters and have the same meanings.</translation>
<comment>SOAPHTTPRPCPostCaller.setup-request-data</comment>
</string>

<string>
<original>The parameters match the similarly named ones from
        {docref SOAPMessageWriter.write-request}.</original>
<translation>The parameters match the similarly named ones from <opaque>{docref SOAPMessageWriter.write-request}</opaque>.</translation>
<comment>SOAPRPCMessageWriter.write-arguments</comment>
</string>

<string>
<original>The parameters simply fill in the fields of the same names.</original>
<translation>The parameters simply fill in the fields of the same names.</translation>
<comment>SOAPRPCMessageReader.default</comment>
</string>

<string>
<original>The proc to be called when the object is further unmarshaled.
        The proc gets the object and the status for the object as
        parameters, and returns a {ctext bool} indicating if
        the proc should be called again when the object next
        changes.  The proc should return {ctext true} if the
        {param status} is {docref SOAPUnmarshalObjectStatus}{ctext .complete}.</original>
<translation>The proc to be called when the object is further unmarshaled. The proc gets the object and the status for the object as parameters, and returns a <opaque>{ctext bool}</opaque> indicating if the proc should be called again when the object next changes. The proc should return <opaque>{ctext true}</opaque> if the <opaque>{param status}</opaque> is <opaque>{docref SOAPUnmarshalObjectStatus}{ctext .complete}</opaque>.</translation>
<comment>SOAPUnmarshalContext.append-callback</comment>
</string>

<string>
<original>The reference attribute name to be returned by 
        {docref DefaultSOAPMarshalContext.reference-attribute-name}.
        The default,
        {docref SOAPMarshalContext.soap-1-1-reference-attribute-name} is
        correct for SOAP 1.1 messages.</original>
<translation>The reference attribute name to be returned by <opaque>{docref DefaultSOAPMarshalContext.reference-attribute-name}</opaque>. The default, <opaque>{docref SOAPMarshalContext.soap-1-1-reference-attribute-name}</opaque> is correct for SOAP 1.1 messages.</translation>
<comment>DefaultSOAPMarshalContext.default</comment>
</string>

<string>
<original>The reference attribute name to be returned by 
        {docref DefaultSOAPUnmarshalContext.reference-attribute-name}.
        The default,
        {docref SOAPMarshalContext.soap-1-1-reference-attribute-name} is
        correct for SOAP 1.1 messages.</original>
<translation>The reference attribute name to be returned by <opaque>{docref DefaultSOAPUnmarshalContext.reference-attribute-name}</opaque>. The default, <opaque>{docref SOAPMarshalContext.soap-1-1-reference-attribute-name}</opaque> is correct for SOAP 1.1 messages.</translation>
<comment>DefaultSOAPUnmarshalContext.default</comment>
</string>

<string>
<original>The response values in an {ctext {Array-of any}}, 
        the SOAP message headers (if any) in an {ctext {Array-of XMLToken}},
        and an array of any attributes that were read from the root
        element of the message (which will be a SOAP Envelope element.)</original>
<translation>The response values in an <opaque>{ctext {Array-of any}}</opaque>, the SOAP message headers (if any) in an <opaque>{ctext {Array-of XMLToken}}</opaque>, and an array of any attributes that were read from the root element of the message (which will be a SOAP Envelope element.)</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The response values in an {ctext {Array-of any}}, and
        the SOAP message headers (if any) in an {ctext {Array-of XMLToken}}.</original>
<translation>The response values in an <opaque>{ctext {Array-of any}}</opaque>, and the SOAP message headers (if any) in an <opaque>{ctext {Array-of XMLToken}}</opaque>.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>The routine which generates unique id strings for 
        {docref DefaultSOAPMarshalContext.get-id} and
        {docref DefaultSOAPMarshalContext.set-marshaler}
        based on the prefix supplied in
        {docref DefaultSOAPMarshalContext.default}.</original>
<translation>The routine which generates unique id strings for <opaque>{docref DefaultSOAPMarshalContext.get-id}</opaque> and <opaque>{docref DefaultSOAPMarshalContext.set-marshaler}</opaque> based on the prefix supplied in <opaque>{docref DefaultSOAPMarshalContext.default}</opaque>.</translation>
<comment>DefaultSOAPMarshalContext.generate-id</comment>
</string>

<string>
<original>The status of unmarshaling of the object.</original>
<translation>The status of unmarshaling of the object.</translation>
<comment>SOAPUnmarshalObjectState.status</comment>
</string>

<string>
<original>The status of unmarshaling the object.</original>
<translation>The status of unmarshaling the object.</translation>
<comment>SOAPUnmarshalObjectState.default</comment>
</string>

<string>
<original>The string value.</original>
<translation>The string value.</translation>
<comment>XMLSimpleValue.value</comment>
</string>

<string>
<original>The top level {docref SOAPTypeMapper} for this marshal call,
        any {docref SOAPTypeMapper} which is calling other marshal routines
        should pass through whatever value it receives.  This is used
        to marshal subvalues of {param value}.  (Eg. If {param value} is
        an array this would be used to do {docref SOAPTypeMapper.marshal}
        calls for each item in the array.)</original>
<translation>The top level <opaque>{docref SOAPTypeMapper}</opaque> for this marshal call, any <opaque>{docref SOAPTypeMapper}</opaque> which is calling other marshal routines should pass through whatever value it receives. This is used to marshal subvalues of <opaque>{param value}</opaque>. (Eg. If <opaque>{param value}</opaque> is an array this would be used to do <opaque>{docref SOAPTypeMapper.marshal}</opaque> calls for each item in the array.)</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The top level {docref SOAPTypeMapper} for this unmarshal call,
        any {docref SOAPTypeMapper} which is calling other unmarshal routines
        should pass through whatever value it receives.  This is used
        to unmarshal sub-values of {param value}.  (Eg. If {param value} is
        an array this would be used to do {docref SOAPTypeMapper.unmarshal}
        calls for each item in the array.)</original>
<translation>The top level <opaque>{docref SOAPTypeMapper}</opaque> for this unmarshal call, any <opaque>{docref SOAPTypeMapper}</opaque> which is calling other unmarshal routines should pass through whatever value it receives. This is used to unmarshal sub-values of <opaque>{param value}</opaque>. (Eg. If <opaque>{param value}</opaque> is an array this would be used to do <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> calls for each item in the array.)</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>The type of callback procs.</original>
<translation>The type of callback procs.</translation>
<comment>SOAPUnmarshalObjectState.CallbackProc</comment>
</string>

<string>
<original>The type signature is the same as {docref SOAPTypeMapper.marshal}
        except that this has a {ctext bool} return value that indicates
        if the routine knows how to do the marshaling at all.</original>
<translation>The type signature is the same as <opaque>{docref SOAPTypeMapper.marshal}</opaque> except that this has a <opaque>{ctext bool}</opaque> return value that indicates if the routine knows how to do the marshaling at all.</translation>
<comment>SOAPTypeMapper.MarshalProc</comment>
</string>

<string>
<original>The type signature is the same as {docref SOAPTypeMapper.unmarshal}
        except that this has an additional {ctext bool} return value that
        indicates if the routine knows how to do the unmarshaling at all.</original>
<translation>The type signature is the same as <opaque>{docref SOAPTypeMapper.unmarshal}</opaque> except that this has an additional <opaque>{ctext bool}</opaque> return value that indicates if the routine knows how to do the unmarshaling at all.</translation>
<comment>SOAPTypeMapper.UnmarshalProc</comment>
</string>

<string>
<original>The ussual SOAP 1.1 value of the SOAP 1.1 encoding-style attribute
        for SOAP 1.1 encoding.</original>
<translation>The ussual SOAP 1.1 value of the SOAP 1.1 encoding-style attribute for SOAP 1.1 encoding.</translation>
<comment>SOAPMessageWriter.soap-1-1-encoding-style-attribute-default-value</comment>
</string>

<string>
<original>The value for the SOAPAction, this goes into the HTTP headers
        of th request for SOAP 1.1.</original>
<translation>The value for the SOAPAction, this goes into the HTTP headers of th request for SOAP 1.1.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The value of the object being set.  Can be {ctext null} if the
        object has not been created yet.</original>
<translation>The value of the object being set. Can be <opaque>{ctext null}</opaque> if the object has not been created yet.</translation>
<comment>SOAPUnmarshalContext.set-object</comment>
</string>

<string>
<original>The value of the {ctext XMLAttribute} as a {docref String}.</original>
<translation>The value of the <opaque>{ctext XMLAttribute}</opaque> as a <opaque>{docref String}</opaque>.</translation>
<comment>XMLAttribute.default</comment>
</string>

<string>
<original>The value of the {ctext XMLAttribute} as an array of {docref XMLName}s,
        if {param value} might really be one or more {docref XMLName}s.</original>
<translation>The value of the <opaque>{ctext XMLAttribute}</opaque> as an array of <opaque>{docref XMLName}</opaque>s, if <opaque>{param value}</opaque> might really be one or more <opaque>{docref XMLName}</opaque>s.</translation>
<comment>XMLAttribute.default</comment>
</string>

<string>
<original>The value of the {ctext XMLAttribute} as an array of {docref XMLName}s.</original>
<translation>The value of the <opaque>{ctext XMLAttribute}</opaque> as an array of <opaque>{docref XMLName}</opaque>s.</translation>
<comment>XMLAttribute.with-xml-name-values</comment>
</string>

<string>
<original>The value of the {ctext XMLAttribute} as an {docref XMLName}.</original>
<translation>The value of the <opaque>{ctext XMLAttribute}</opaque> as an <opaque>{docref XMLName}</opaque>.</translation>
<comment>XMLAttribute.qname-value</comment>
</string>

<string>
<original>The value to be used as base the "Content-Type" HTTP header
        for all requests by this {docref SOAPHTTPRPCPostCaller}.</original>
<translation>The value to be used as base the "Content-Type" HTTP header for all requests by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.content-type</comment>
</string>

<string>
<original>The value to be used as base the "Content-Type" HTTP header
        for all requests by this {docref SOAPHTTPRPCPostCaller}.
        Additional parameters may be added to the content type
        by {docref SOAPHTTPRPCPostCaller.setup-request-data} or
        {docref SOAPHTTPRPCPostCaller.close-request-data-stream}.
        For SOAP 1.1 this should be the default {ctext "text/xml"}.</original>
<translation>The value to be used as base the "Content-Type" HTTP header for all requests by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>. Additional parameters may be added to the content type by <opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque> or <opaque>{docref SOAPHTTPRPCPostCaller.close-request-data-stream}</opaque>. For SOAP 1.1 this should be the default <opaque>{ctext "text/xml"}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.default</comment>
</string>

<string>
<original>The various built in mappers will attempt to use this automatically
        if they see XML types that look like SOAP 1.1 arrayType names, or
        if you attempt to look up an XML type for an {ctext Array-of},
        {ctext FastArray-of} or {ctext Array2d-of}.</original>
<translation>The various built in mappers will attempt to use this automatically if they see XML types that look like SOAP 1.1 arrayType names, or if you attempt to look up an XML type for an <opaque>{ctext Array-of}</opaque>, <opaque>{ctext FastArray-of}</opaque> or <opaque>{ctext Array2d-of}</opaque>.</translation>
<comment>SOAPArrayMarshaler</comment>
</string>

<string>
<original>The {docref SOAPCurlTypeToXMLTypeMapper} being used to
        fill in missing type information during marshaling.
        Also passed to {docref SOAPTypeMapper.marshal}.</original>
<translation>The <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> being used to fill in missing type information during marshaling. Also passed to <opaque>{docref SOAPTypeMapper.marshal}</opaque>.</translation>
<comment>SOAPRPCMessageWriter.curl-type-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPCurlTypeToXMLTypeMapper} being used to
        fill in missing type information during unmarshaling.</original>
<translation>The <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> being used to fill in missing type information during unmarshaling.</translation>
<comment>SOAPRPCMessageReader.curl-type-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPCurlTypeToXMLTypeMapper} which the marshaler
        can use to fill in any auxilary {docref SOAPObjectType}s which
        it ends up with that are missing {docref SOAPObjectType.xml-type}.</original>
<translation>The <opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> which the marshaler can use to fill in any auxilary <opaque>{docref SOAPObjectType}</opaque>s which it ends up with that are missing <opaque>{docref SOAPObjectType.xml-type}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The {docref SOAPElementNameToXMLTypeMapper} being used to
        fill in missing type information during marshaling.</original>
<translation>The <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> being used to fill in missing type information during marshaling.</translation>
<comment>SOAPRPCMessageWriter.element-name-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPElementNameToXMLTypeMapper} being used to
        fill in missing type information during unmarshaling.</original>
<translation>The <opaque>{docref SOAPElementNameToXMLTypeMapper}</opaque> being used to fill in missing type information during unmarshaling.</translation>
<comment>SOAPRPCMessageReader.element-name-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPMarshalContext} which is used to keep track
        of ids and such for multiple reference support.  So, when writing
        out the value, if the value needs an id,
        {docref SOAPMarshalContext.get-id} should be called with
        {param create-if-missing?} set to {ctext true} to get
        the id.  And if the the marshaler needs to find out if the
        object has already been marshaled in this message, 
        {docref SOAPMarshalContext.get-id} can be called with
        {param create-if-missing?} set to {ctext false}.</original>
<translation>The <opaque>{docref SOAPMarshalContext}</opaque> which is used to keep track of ids and such for multiple reference support. So, when writing out the value, if the value needs an id, <opaque>{docref SOAPMarshalContext.get-id}</opaque> should be called with <opaque>{param create-if-missing?}</opaque> set to <opaque>{ctext true}</opaque> to get the id. And if the the marshaler needs to find out if the object has already been marshaled in this message, <opaque>{docref SOAPMarshalContext.get-id}</opaque> can be called with <opaque>{param create-if-missing?}</opaque> set to <opaque>{ctext false}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The {docref SOAPMarshalContext} which is used to keep track
        of ids and such for multiple reference support.  The default
        of {ctext null} means that the {docref SOAPMessageWriter}
        will make one of its own choice.</original>
<translation>The <opaque>{docref SOAPMarshalContext}</opaque> which is used to keep track of ids and such for multiple reference support. The default of <opaque>{ctext null}</opaque> means that the <opaque>{docref SOAPMessageWriter}</opaque> will make one of its own choice.</translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>The {docref SOAPObjectType} of {param object}.  This will be passed
        to {param marshaler} when it is called to marshal {param object}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> of <opaque>{param object}</opaque>. This will be passed to <opaque>{param marshaler}</opaque> when it is called to marshal <opaque>{param object}</opaque>.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that a {docref SOAPTypeMapper.MarshalProc}
        was set with {docref DefaultSOAPTypeMapper.set-marshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> was set with <opaque>{docref DefaultSOAPTypeMapper.set-marshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.remove-marshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that a {docref SOAPTypeMapper.UnmarshalProc}
        was set with {docref DefaultSOAPTypeMapper.set-unmarshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that a <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> was set with <opaque>{docref DefaultSOAPTypeMapper.set-unmarshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.remove-unmarshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that is missing some
        information.  It must have a {ctext non-null} 
        {docref SOAPObjectType.curl-type}
        and any {docref SOAPObjectType.curl-type} will be
        ignored.  It may fill in {docref SOAPObjectType.nillable?}
        {docref SOAPObjectType.multiple-reference}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that is missing some information. It must have a <opaque>{ctext non-null}</opaque> <opaque>{docref SOAPObjectType.curl-type}</opaque> and any <opaque>{docref SOAPObjectType.curl-type}</opaque> will be ignored. It may fill in <opaque>{docref SOAPObjectType.nillable?}</opaque> <opaque>{docref SOAPObjectType.multiple-reference}</opaque>.</translation>
<comment>SOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that is missing some
        information.  It must have a {ctext non-null} 
        {docref SOAPObjectType.element-name}, and any
        {docref SOAPObjectType.xml-type} will be ignored.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that is missing some information. It must have a <opaque>{ctext non-null}</opaque> <opaque>{docref SOAPObjectType.element-name}</opaque>, and any <opaque>{docref SOAPObjectType.xml-type}</opaque> will be ignored.</translation>
<comment>SOAPElementNameToXMLTypeMapper.element-name-to-xml-type</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that is missing some
        information.  It must have a {ctext non-null} 
        {docref SOAPObjectType.xml-type}, and any
        {docref SOAPObjectType.element-name} will be ignored.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that is missing some information. It must have a <opaque>{ctext non-null}</opaque> <opaque>{docref SOAPObjectType.xml-type}</opaque>, and any <opaque>{docref SOAPObjectType.element-name}</opaque> will be ignored.</translation>
<comment>SOAPXMLTypeToElementNameMapper.xml-type-to-element-name</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that is missing some
        information.  It must have a {ctext non-null} 
        {docref SOAPObjectType.xml-type}, {docref SOAPObjectType.nillable?}
        should be right and any {docref SOAPObjectType.curl-type} will be
        ignored.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that is missing some information. It must have a <opaque>{ctext non-null}</opaque> <opaque>{docref SOAPObjectType.xml-type}</opaque>, <opaque>{docref SOAPObjectType.nillable?}</opaque> should be right and any <opaque>{docref SOAPObjectType.curl-type}</opaque> will be ignored.</translation>
<comment>SOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that provides the default
        values for the new {docref SOAPObjectType} being created.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that provides the default values for the new <opaque>{docref SOAPObjectType}</opaque> being created.</translation>
<comment>SOAPObjectType.clone-with</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that {docref SOAPTypeMapper.UnmarshalProc}
        knows how to convert from XML to a Curl type.  In this class only
        {docref SOAPObjectType.curl-type} and {docref SOAPObjectType.xml-type}
        actually become part of the key in the hash table.  
        {docref SOAPObjectType.curl-type} will be turned into a
        {ctext non-null} type if it isn't already for
        {docref DefaultSOAPTypeMapper.set-unmarshal-proc} as well as
        {docref DefaultSOAPTypeMapper.get-unmarshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> knows how to convert from XML to a Curl type. In this class only <opaque>{docref SOAPObjectType.curl-type}</opaque> and <opaque>{docref SOAPObjectType.xml-type}</opaque> actually become part of the key in the hash table. <opaque>{docref SOAPObjectType.curl-type}</opaque> will be turned into a <opaque>{ctext non-null}</opaque> type if it isn't already for <opaque>{docref DefaultSOAPTypeMapper.set-unmarshal-proc}</opaque> as well as <opaque>{docref DefaultSOAPTypeMapper.get-unmarshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.get-unmarshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that {param marshal-proc} knows how
        to convert from a Curl type to XML.  In this class only
        {docref SOAPObjectType.curl-type} and {docref SOAPObjectType.xml-type}
        actually become part of the key in the hash table.  
        {docref SOAPObjectType.curl-type} will be turned into a
        {ctext non-null} type if it isn't already for
        {docref DefaultSOAPTypeMapper.set-marshal-proc} as well as
        {docref DefaultSOAPTypeMapper.get-marshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that <opaque>{param marshal-proc}</opaque> knows how to convert from a Curl type to XML. In this class only <opaque>{docref SOAPObjectType.curl-type}</opaque> and <opaque>{docref SOAPObjectType.xml-type}</opaque> actually become part of the key in the hash table. <opaque>{docref SOAPObjectType.curl-type}</opaque> will be turned into a <opaque>{ctext non-null}</opaque> type if it isn't already for <opaque>{docref DefaultSOAPTypeMapper.set-marshal-proc}</opaque> as well as <opaque>{docref DefaultSOAPTypeMapper.get-marshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-marshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} that {param unmarshal-proc} knows how
        to convert from XML to a Curl type.  In this class only
        {docref SOAPObjectType.curl-type} and {docref SOAPObjectType.xml-type}
        actually become part of the key in the hash table.  
        {docref SOAPObjectType.curl-type} will be turned into a
        {ctext non-null} type if it isn't already for
        {docref DefaultSOAPTypeMapper.set-unmarshal-proc} as well as
        {docref DefaultSOAPTypeMapper.get-unmarshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> that <opaque>{param unmarshal-proc}</opaque> knows how to convert from XML to a Curl type. In this class only <opaque>{docref SOAPObjectType.curl-type}</opaque> and <opaque>{docref SOAPObjectType.xml-type}</opaque> actually become part of the key in the hash table. <opaque>{docref SOAPObjectType.curl-type}</opaque> will be turned into a <opaque>{ctext non-null}</opaque> type if it isn't already for <opaque>{docref DefaultSOAPTypeMapper.set-unmarshal-proc}</opaque> as well as <opaque>{docref DefaultSOAPTypeMapper.get-unmarshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-unmarshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} used to look for a
        {docref SOAPTypeMapper.MarshalProc} that can convert from a Curl
        type to XML.  In this class only
        {docref SOAPObjectType.curl-type} and {docref SOAPObjectType.xml-type}
        actually become part of the key in the hash table.  
        {docref SOAPObjectType.curl-type} will be turned into a
        {ctext non-null} type if it isn't already for
        {docref DefaultSOAPTypeMapper.set-marshal-proc} as well as
        {docref DefaultSOAPTypeMapper.get-marshal-proc}.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> used to look for a <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> that can convert from a Curl type to XML. In this class only <opaque>{docref SOAPObjectType.curl-type}</opaque> and <opaque>{docref SOAPObjectType.xml-type}</opaque> actually become part of the key in the hash table. <opaque>{docref SOAPObjectType.curl-type}</opaque> will be turned into a <opaque>{ctext non-null}</opaque> type if it isn't already for <opaque>{docref DefaultSOAPTypeMapper.set-marshal-proc}</opaque> as well as <opaque>{docref DefaultSOAPTypeMapper.get-marshal-proc}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.get-marshal-proc</comment>
</string>

<string>
<original>The {docref SOAPObjectType} which type information for how
        to convert {param value} into XML.  {ctext type.xml-type}
        and {ctext type.curl-type} must be filled in by the time
        this is called.</original>
<translation>The <opaque>{docref SOAPObjectType}</opaque> which type information for how to convert <opaque>{param value}</opaque> into XML. <opaque>{ctext type.xml-type}</opaque> and <opaque>{ctext type.curl-type}</opaque> must be filled in by the time this is called.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>The {docref SOAPRPCMessageReader} that will be used to
        read the messages for all response by this
        {docref SOAPHTTPRPCPostCaller}.
        Note that any overriding
        of the default type mappers should be done by providing the
        appropriate mappers to the constructor of an instance of a
        {docref SOAPRPCMessageReader}.</original>
<translation>The <opaque>{docref SOAPRPCMessageReader}</opaque> that will be used to read the messages for all response by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>. Note that any overriding of the default type mappers should be done by providing the appropriate mappers to the constructor of an instance of a <opaque>{docref SOAPRPCMessageReader}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.default</comment>
</string>

<string>
<original>The {docref SOAPRPCMessageReader} that will be used to
        read the messages for all responses by this
        {docref SOAPHTTPRPCPostCaller}.</original>
<translation>The <opaque>{docref SOAPRPCMessageReader}</opaque> that will be used to read the messages for all responses by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.message-reader</comment>
</string>

<string>
<original>The {docref SOAPRPCMessageWriter} that will be used to
        write the messages for all requests by this
        {docref SOAPHTTPRPCPostCaller}.</original>
<translation>The <opaque>{docref SOAPRPCMessageWriter}</opaque> that will be used to write the messages for all requests by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.message-writer</comment>
</string>

<string>
<original>The {docref SOAPRPCMessageWriter} that will be used to
        write the messages for all requests by this
        {docref SOAPHTTPRPCPostCaller}.
        Note that any overriding
        of the default type mappers should be done by providing the
        appropriate mappers to the constructor of an instance of a
        {docref SOAPRPCMessageWriter}.</original>
<translation>The <opaque>{docref SOAPRPCMessageWriter}</opaque> that will be used to write the messages for all requests by this <opaque>{docref SOAPHTTPRPCPostCaller}</opaque>. Note that any overriding of the default type mappers should be done by providing the appropriate mappers to the constructor of an instance of a <opaque>{docref SOAPRPCMessageWriter}</opaque>.</translation>
<comment>SOAPHTTPRPCPostCaller.default</comment>
</string>

<string>
<original>The {docref SOAPTypeMapper.MarshalProc} that knows how to
        convert {docref SOAPObjectType.curl-type} into
        {docref SOAPObjectType.xml-type}.</original>
<translation>The <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> that knows how to convert <opaque>{docref SOAPObjectType.curl-type}</opaque> into <opaque>{docref SOAPObjectType.xml-type}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-marshal-proc</comment>
</string>

<string>
<original>The {docref SOAPTypeMapper.MarshalProc} to be called to marshal
        {param object}.</original>
<translation>The <opaque>{docref SOAPTypeMapper.MarshalProc}</opaque> to be called to marshal <opaque>{param object}</opaque>.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>The {docref SOAPTypeMapper.UnmarshalProc} that knows how to
        convert {docref SOAPObjectType.xml-type} into
        {docref SOAPObjectType.curl-type}.</original>
<translation>The <opaque>{docref SOAPTypeMapper.UnmarshalProc}</opaque> that knows how to convert <opaque>{docref SOAPObjectType.xml-type}</opaque> into <opaque>{docref SOAPObjectType.curl-type}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.set-unmarshal-proc</comment>
</string>

<string>
<original>The {docref SOAPTypeMapper} being used to marshal stuff in
        the current message.</original>
<translation>The <opaque>{docref SOAPTypeMapper}</opaque> being used to marshal stuff in the current message.</translation>
<comment>SOAPRPCMessageWriter.type-mapper</comment>
</string>

<string>
<original>The {docref SOAPTypeMapper} being used to unmarshal stuff in
        the current message.</original>
<translation>The <opaque>{docref SOAPTypeMapper}</opaque> being used to unmarshal stuff in the current message.</translation>
<comment>SOAPRPCMessageReader.type-mapper</comment>
</string>

<string>
<original>The {docref SOAPUnmarshalContext} which is used to keep track
        of ids and such for multiple reference support.  So, when reading
        in the value, if the value is a reference, 
        {docref SOAPUnmarshalContext.get-object} should be called.
        For values with sub-objects (like an array), the unmarshaler
        may also need to call {docref SOAPUnmarshalContext.append-callback}
        to get the value for the sub-object which is a reference at
        a later time when the instance is actually unmarshaled.</original>
<translation>The <opaque>{docref SOAPUnmarshalContext}</opaque> which is used to keep track of ids and such for multiple reference support. So, when reading in the value, if the value is a reference, <opaque>{docref SOAPUnmarshalContext.get-object}</opaque> should be called. For values with sub-objects (like an array), the unmarshaler may also need to call <opaque>{docref SOAPUnmarshalContext.append-callback}</opaque> to get the value for the sub-object which is a reference at a later time when the instance is actually unmarshaled.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>The {docref SOAPUnmarshalContext} which is used to keep track
        of ids and such for multiple reference support.  The default
        of {ctext null} means that the {docref SOAPMessageReader}
        will make one of its own choice.</original>
<translation>The <opaque>{docref SOAPUnmarshalContext}</opaque> which is used to keep track of ids and such for multiple reference support. The default of <opaque>{ctext null}</opaque> means that the <opaque>{docref SOAPMessageReader}</opaque> will make one of its own choice.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>The {docref SOAPUnmarshalObjectStatus} of 
        the object.  If it is not
        {docref SOAPUnmarshalObjectStatus}{ctext .not-created}, then
        {param object} should not be null, unless the value of the
        object is null.</original>
<translation>The <opaque>{docref SOAPUnmarshalObjectStatus}</opaque> of the object. If it is not <opaque>{docref SOAPUnmarshalObjectStatus}{ctext .not-created}</opaque>, then <opaque>{param object}</opaque> should not be null, unless the value of the object is null.</translation>
<comment>SOAPUnmarshalContext.set-object</comment>
</string>

<string>
<original>The {docref SOAPXMLTypeToCurlTypeMapper} being used to
        fill in missing type information during marshaling.</original>
<translation>The <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> being used to fill in missing type information during marshaling.</translation>
<comment>SOAPRPCMessageWriter.xml-type-to-curl-type</comment>
</string>

<string>
<original>The {docref SOAPXMLTypeToCurlTypeMapper} being used to
        fill in missing type information during unmarshaling.
        Also passed to {docref SOAPTypeMapper.unmarshal}.</original>
<translation>The <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> being used to fill in missing type information during unmarshaling. Also passed to <opaque>{docref SOAPTypeMapper.unmarshal}</opaque>.</translation>
<comment>SOAPRPCMessageReader.xml-type-to-curl-type</comment>
</string>

<string>
<original>The {docref SOAPXMLTypeToCurlTypeMapper} which the unmarshaler
        can use to fill in any auxilary {docref SOAPObjectType}s which
        it ends up with that are missing {docref SOAPObjectType.curl-type}.</original>
<translation>The <opaque>{docref SOAPXMLTypeToCurlTypeMapper}</opaque> which the unmarshaler can use to fill in any auxilary <opaque>{docref SOAPObjectType}</opaque>s which it ends up with that are missing <opaque>{docref SOAPObjectType.curl-type}</opaque>.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>The {docref SOAPXMLTypeToElementNameMapper} being used to
        fill in missing type information during marshaling.</original>
<translation>The <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> being used to fill in missing type information during marshaling.</translation>
<comment>SOAPRPCMessageWriter.xml-type-to-element-name</comment>
</string>

<string>
<original>The {docref SOAPXMLTypeToElementNameMapper} being used to
        fill in missing type information during unmarshaling.</original>
<translation>The <opaque>{docref SOAPXMLTypeToElementNameMapper}</opaque> being used to fill in missing type information during unmarshaling.</translation>
<comment>SOAPRPCMessageReader.xml-type-to-element-name</comment>
</string>

<string>
<original>The {docref String} to set the id for {param object} to.</original>
<translation>The <opaque>{docref String}</opaque> to set the id for <opaque>{param object}</opaque> to.</translation>
<comment>SOAPMarshalContext.set-id</comment>
</string>

<string>
<original>The {docref Type} that can then be looked up.</original>
<translation>The <opaque>{docref Type}</opaque> that can then be looked up.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type</comment>
</string>

<string>
<original>The {docref Type} that {param xml-type} maps to.</original>
<translation>The <opaque>{docref Type}</opaque> that <opaque>{param xml-type}</opaque> maps to.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type</comment>
</string>

<string>
<original>The {docref Url} that the XML was loaded from, to be used for
        resolving relative {docref Url}s, error messages and for implementing
        {docref InputStream-of.origin-url}.  This is only needed if
        {param input-source} has no {ctext system-id}.</original>
<translation>The <opaque>{docref Url}</opaque> that the XML was loaded from, to be used for resolving relative <opaque>{docref Url}</opaque>s, error messages and for implementing <opaque>{docref InputStream-of.origin-url}</opaque>. This is only needed if <opaque>{param input-source}</opaque> has no <opaque>{ctext system-id}</opaque>.</translation>
<comment>XMLInputStream.from-InputSource</comment>
</string>

<string>
<original>The {docref Url} to make the HTTP POST request with the SOAP
        message to.</original>
<translation>The <opaque>{docref Url}</opaque> to make the HTTP POST request with the SOAP message to.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>The {docref XDMName} of this XML Schema simple type</original>
<translation>The <opaque>{docref XDMName}</opaque> of this XML Schema simple type</translation>
<comment>XMLSimpleType.name</comment>
</string>

<string>
<original>The {docref XDMName} of this XML Schema type</original>
<translation>The <opaque>{docref XDMName}</opaque> of this XML Schema type</translation>
<comment>XMLType.name</comment>
</string>

<string>
<original>The {docref XMLName} of an XML element that can then be
        looked up.</original>
<translation>The <opaque>{docref XMLName}</opaque> of an XML element that can then be looked up.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type</comment>
</string>

<string>
<original>The {docref XMLName} of an XML element that {param xml-type}
        maps to.</original>
<translation>The <opaque>{docref XMLName}</opaque> of an XML element that <opaque>{param xml-type}</opaque> maps to.</translation>
<comment>DefaultSOAPXMLTypeToElementNameMapper.set-xml-type-to-element-name</comment>
</string>

<string>
<original>The {docref XMLName} of an XML type that can then be looked up.</original>
<translation>The <opaque>{docref XMLName}</opaque> of an XML type that can then be looked up.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type</comment>
</string>

<string>
<original>The {docref XMLName} of an XML type that {param curl-type} maps to.</original>
<translation>The <opaque>{docref XMLName}</opaque> of an XML type that <opaque>{param curl-type}</opaque> maps to.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type</comment>
</string>

<string>
<original>The {docref XMLName} of an XML type that {param element-name}
        maps to.</original>
<translation>The <opaque>{docref XMLName}</opaque> of an XML type that <opaque>{param element-name}</opaque> maps to.</translation>
<comment>DefaultSOAPElementNameToXMLTypeMapper.set-element-name-to-xml-type</comment>
</string>

<string>
<original>The {docref wsdl-service-class-version} 
        used to generate this class.</original>
<translation>The <opaque>{docref wsdl-service-class-version}</opaque> used to generate this class.</translation>
<comment>WSDLHTTPRPCPostClient.generated-using-version</comment>
</string>

<string>
<original>There are several subclasses which are only used during certain
        parts of the SOAP API such as {docref SOAPUnmarshalException},
        {docref SOAPMarshalException}, and {docref SOAP-1-1-FaultException}.</original>
<translation>There are several subclasses which are only used during certain parts of the SOAP API such as <opaque>{docref SOAPUnmarshalException}</opaque>, <opaque>{docref SOAPMarshalException}</opaque>, and <opaque>{docref SOAP-1-1-FaultException}</opaque>.</translation>
<comment>SOAPException</comment>
</string>

<string>
<original>There are two return values: the first is an {docref XMLToken} containing
        the next token in the input stream. The second is a {docref bool}, set to
        {ctext true} if EOF has been reached, and {ctext false} otherwise.
        The token is not valid if the second (end-of-file) return parameter is
        {ctext true}.</original>
<translation>There are two return values: the first is an <opaque>{docref XMLToken}</opaque> containing the next token in the input stream. The second is a <opaque>{docref bool}</opaque>, set to <opaque>{ctext true}</opaque> if EOF has been reached, and <opaque>{ctext false}</opaque> otherwise. The token is not valid if the second (end-of-file) return parameter is <opaque>{ctext true}</opaque>.</translation>
<comment>XMLInputStream.read-one</comment>
</string>

<string>
<original>This appears as a field in {docref SOAPObjectType}, and is used
        most commonly with the {docref SOAPTypeMapper.marshal} call.</original>
<translation>This appears as a field in <opaque>{docref SOAPObjectType}</opaque>, and is used most commonly with the <opaque>{docref SOAPTypeMapper.marshal}</opaque> call.</translation>
<comment>SOAPTypeMultipleReference</comment>
</string>

<string>
<original>This calles {docref SOAPHTTPRPCPostCaller.setup-request-data} to
        create a {docref HttpRequestData} with all of the arguments in it.
        ({docref SOAPHTTPRPCPostCaller.setup-request-data} may put some
        of the arguments in the SOAP part of the message and some in
        some other part of the {param request-data}.)
        Then it starts an HTTP POST request using
        {docref HttpFile.http-read-open-byte} and uses
        {docref SOAPHTTPRPCPostCaller.get-response-stream} to get a
        {docref XMLInputStream} with the SOAP response message in it.
        And then it calls {docref SOAPRPCMessageReader.read-rpc-response}
        to get {param responses} out of the SOAP message, and finally it
        calls {docref SOAPHTTPRPCPostCaller.close-response-stream}
        to clean up the {docref XMLInputStream} and possibly handle responses
        that aren't in the SOAP part of the response.</original>
<translation>This calles <opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque> to create a <opaque>{docref HttpRequestData}</opaque> with all of the arguments in it. (<opaque>{docref SOAPHTTPRPCPostCaller.setup-request-data}</opaque> may put some of the arguments in the SOAP part of the message and some in some other part of the <opaque>{param request-data}</opaque>.) Then it starts an HTTP POST request using <opaque>{docref HttpFile.http-read-open-byte}</opaque> and uses <opaque>{docref SOAPHTTPRPCPostCaller.get-response-stream}</opaque> to get a <opaque>{docref XMLInputStream}</opaque> with the SOAP response message in it. And then it calls <opaque>{docref SOAPRPCMessageReader.read-rpc-response}</opaque> to get <opaque>{param responses}</opaque> out of the SOAP message, and finally it calls <opaque>{docref SOAPHTTPRPCPostCaller.close-response-stream}</opaque> to clean up the <opaque>{docref XMLInputStream}</opaque> and possibly handle responses that aren't in the SOAP part of the response.</translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>This can be used to request compressed responses from the server.
        These compression formats are supported for responses:
        {itemize
            {item {monospace gzip} using {docref CompressionFormat}.gzip}
            {item {monospace deflate} using {docref CompressionFormat}.zlib}
        }</original>
<translation>This can be used to request compressed responses from the server. These compression formats are supported for responses: <curl name="itemize"><curl name="item"><curl name="monospace">gzip</curl> using <opaque>{docref CompressionFormat}</opaque>.gzip</curl> <curl name="item"><curl name="monospace">deflate</curl> using <opaque>{docref CompressionFormat}</opaque>.zlib</curl></curl></translation>
<comment>WSDLHTTPRPCPostClient.accept-encoding</comment>
</string>

<string>
<original>This class is used by the {docref XMLAttribute},
        {docref XMLStartElement}, and {docref XMLEndElement} classes.

        This class also can be used to write namespace-qualified
        attribute values.</original>
<translation><p>This class is used by the <opaque>{docref XMLAttribute}</opaque>, <opaque>{docref XMLStartElement}</opaque>, and <opaque>{docref XMLEndElement}</opaque> classes.</p>
<p>This class also can be used to write namespace-qualified attribute values.</p></translation>
<comment>XMLName</comment>
</string>

<string>
<original>This constructor allows the creation of an attribute value with a namespace
        prefix.  This constructor will also set {param xml-name-values} to
        an array with {param value} in it.</original>
<translation>This constructor allows the creation of an attribute value with a namespace prefix. This constructor will also set <opaque>{param xml-name-values}</opaque> to an array with <opaque>{param value}</opaque> in it.</translation>
<comment>XMLAttribute.qname-value</comment>
</string>

<string>
<original>This constructor allows the creation of an attribute value with a namespace
        prefix.  This constructor will also set {param xml-name-values} to
        {param values}</original>
<translation>This constructor allows the creation of an attribute value with a namespace prefix. This constructor will also set <opaque>{param xml-name-values}</opaque> to <opaque>{param values}</opaque></translation>
<comment>XMLAttribute.with-xml-name-values</comment>
</string>

<string>
<original>This is a class which does SOAP request/response RPC calls over
        HTTP with rpc or document style SOAP messages.</original>
<translation>This is a class which does SOAP request/response RPC calls over HTTP with rpc or document style SOAP messages.</translation>
<comment>SOAPHTTPRPCPostCaller</comment>
</string>

<string>
<original>This is the abstract class for the interface that handles
        marshaling an array of values into a SOAP message.</original>
<translation>This is the abstract class for the interface that handles marshaling an array of values into a SOAP message.</translation>
<comment>SOAPMessageWriter</comment>
</string>

<string>
<original>This is the abstract class for the interface that handles
        unmarshaling a SOAP message into a an array of values.</original>
<translation>This is the abstract class for the interface that handles unmarshaling a SOAP message into a an array of values.</translation>
<comment>SOAPMessageReader</comment>
</string>

<string>
<original>This is the abstract class for the interface that handles keeping
        track of ids and objects for multiple referenced objects during
        marshaling.  And this supports writting out any referenced objects
        that have not already been written out at the end of a SOAP
        message.</original>
<translation>This is the abstract class for the interface that handles keeping track of ids and objects for multiple referenced objects during marshaling. And this supports writting out any referenced objects that have not already been written out at the end of a SOAP message.</translation>
<comment>SOAPMarshalContext</comment>
</string>

<string>
<original>This is the abstract class for the interface that handles keeping
        track of ids and objects for multiple referenced objects during
        unmarshaling.  And this supports informing interested code
        when an object that they reference is unmarshaled.</original>
<translation>This is the abstract class for the interface that handles keeping track of ids and objects for multiple referenced objects during unmarshaling. And this supports informing interested code when an object that they reference is unmarshaled.</translation>
<comment>SOAPUnmarshalContext</comment>
</string>

<string>
<original>This is the abstract class for the interface that handles marshaling
        and unmarshaling data from SOAP messages.  Normally the
        non-abstract subclasses will have a hash table of marshaling
        and unmarshaling routines or classes that they can select
        from based on the type of data being handled.</original>
<translation>This is the abstract class for the interface that handles marshaling and unmarshaling data from SOAP messages. Normally the non-abstract subclasses will have a hash table of marshaling and unmarshaling routines or classes that they can select from based on the type of data being handled.</translation>
<comment>SOAPTypeMapper</comment>
</string>

<string>
<original>This is the main method for accessing the parsed XML.

        An error occurs if the XML stream is not open.</original>
<translation><p>This is the main method for accessing the parsed XML.</p>
<p>An error occurs if the XML stream is not open.</p></translation>
<comment>XMLInputStream.read-one</comment>
</string>

<string>
<original>This is the method used to convert a Curl value into
        {docref XMLToken}s in an {docref XMLOutputStream}.</original>
<translation>This is the method used to convert a Curl value into <opaque>{docref XMLToken}</opaque>s in an <opaque>{docref XMLOutputStream}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>This is the method used to convert an XML element which is available
        as {docref XMLToken}s from an {docref XMLInputStream}.</original>
<translation>This is the method used to convert an XML element which is available as <opaque>{docref XMLToken}</opaque>s from an <opaque>{docref XMLInputStream}</opaque>.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>This is the same as {docref SOAPMessageReader.read-response}
        except that it has some extra RPC related parameters to allow
        more control over what is read.  And it has some additional
        return values.</original>
<translation>This is the same as <opaque>{docref SOAPMessageReader.read-response}</opaque> except that it has some extra RPC related parameters to allow more control over what is read. And it has some additional return values.</translation>
<comment>SOAPRPCMessageReader.read-rpc-response</comment>
</string>

<string>
<original>This is the same as {docref SOAPMessageWriter.write-request}
        except that it has some extra RPC related parameters to allow
        more control over what is written.</original>
<translation>This is the same as <opaque>{docref SOAPMessageWriter.write-request}</opaque> except that it has some extra RPC related parameters to allow more control over what is written.</translation>
<comment>SOAPRPCMessageWriter.write-rpc-request</comment>
</string>

<string>
<original>This may trigger calls to callbacks previously registered with
        {docref SOAPUnmarshalContext.append-callback}.</original>
<translation>This may trigger calls to callbacks previously registered with <opaque>{docref SOAPUnmarshalContext.append-callback}</opaque>.</translation>
<comment>SOAPUnmarshalContext.set-object</comment>
</string>

<string>
<original>This method is called after the {docref XMLStartElement} and
        possibly some {docref XMLAttribute}s have been written to
        {param stream}, and it may write {docref XMLAttribute}s and
        {docref XMLCharacters}, but should not write the
        {docref XMLEndElement}.</original>
<translation>This method is called after the <opaque>{docref XMLStartElement}</opaque> and possibly some <opaque>{docref XMLAttribute}</opaque>s have been written to <opaque>{param stream}</opaque>, and it may write <opaque>{docref XMLAttribute}</opaque>s and <opaque>{docref XMLCharacters}</opaque>, but should not write the <opaque>{docref XMLEndElement}</opaque>.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>This method is called after the {docref XMLStartElement} and
        the {docref XMLAttribute}s have been read from
        {param stream}, and it gets the {docref XMLAttribute}s as a
        parameter, and reads the {docref XMLCharacters} from {param stream},
        but should not read the {docref XMLEndElement}.  Or it should
        unread the {docref XMLEndElement} if it reads it.</original>
<translation>This method is called after the <opaque>{docref XMLStartElement}</opaque> and the <opaque>{docref XMLAttribute}</opaque>s have been read from <opaque>{param stream}</opaque>, and it gets the <opaque>{docref XMLAttribute}</opaque>s as a parameter, and reads the <opaque>{docref XMLCharacters}</opaque> from <opaque>{param stream}</opaque>, but should not read the <opaque>{docref XMLEndElement}</opaque>. Or it should unread the <opaque>{docref XMLEndElement}</opaque> if it reads it.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>This method is not supported for this class.</original>
<translation>This method is not supported for this class.</translation>
<comment>XMLInputStream.read-buffer-data-size</comment>
</string>

<string>
<original>This method returns the next {docref XMLToken} in the input
        stream.</original>
<translation>This method returns the next <opaque>{docref XMLToken}</opaque> in the input stream.</translation>
<comment>XMLInputStream.read-one</comment>
</string>

<string>
<original>This will only normally be used when the instance of the object
        will not end up in the XML part of the SOAP message, but will
        instead be somewhere else, such as in another part of a multipart
        message, or at an http: URL.  The id should be some sort of URN.
        If the id were being set for something with will be written out
        as an instance in the XML part of the SOAP message, the id
        should start with a '#'.</original>
<translation>This will only normally be used when the instance of the object will not end up in the XML part of the SOAP message, but will instead be somewhere else, such as in another part of a multipart message, or at an http: URL. The id should be some sort of URN. If the id were being set for something with will be written out as an instance in the XML part of the SOAP message, the id should start with a '#'.</translation>
<comment>SOAPMarshalContext.set-id</comment>
</string>

<string>
<original>Throws a {docref SOAPUnmarshalException} if there are incomplete
        or unmarshaled objects left.</original>
<translation>Throws a <opaque>{docref SOAPUnmarshalException}</opaque> if there are incomplete or unmarshaled objects left.</translation>
<comment>SOAPUnmarshalContext.check-leftover-unmarshaled-objects</comment>
</string>

<string>
<original>Unmarshals the response values from {param stream}, assuming
        that the code calling this will have already read the elements
        before the response values and will read the elements after
        the response values afterwards.</original>
<translation>Unmarshals the response values from <opaque>{param stream}</opaque>, assuming that the code calling this will have already read the elements before the response values and will read the elements after the response values afterwards.</translation>
<comment>SOAPRPCMessageReader.read-response-values</comment>
</string>

<string>
<original>Use a sequence of {ctext write-one} calls to generate a valid SOAP
        message, passing in first an {docref XMLStartDocument},
        followed by various {docref XMLStartElement}s and
        {docref XMLEndElement}s as needed, and finishing with
        an {docref XMLEndDocument}.  Standard SOAP
        verbiage will be added automatically
        (e.g., the version attribute on the starting xml tag).</original>
<translation>Use a sequence of <opaque>{ctext write-one}</opaque> calls to generate a valid SOAP message, passing in first an <opaque>{docref XMLStartDocument}</opaque>, followed by various <opaque>{docref XMLStartElement}</opaque>s and <opaque>{docref XMLEndElement}</opaque>s as needed, and finishing with an <opaque>{docref XMLEndDocument}</opaque>. Standard SOAP verbiage will be added automatically (e.g., the version attribute on the starting xml tag).</translation>
<comment>XMLOutputStream.write-one</comment>
</string>

<string>
<original>Used by SOAP Web Service methods which refer to types 
        that do not map directly to a standard Curl type:
        {itemize            
        || now 'xsd:date' uses DateTime.date
||--            {item xsd:date}
            {item xsd:time}
            {item xsd:duration}
            {item xsd:gYear}
            {item xsd:gYearMonth}
            {item xsd:gMonth}
            {item xsd:gMonthDay}
            {item xsd:Day}
            {item xsd:normalizedString}
            {item xsd:token}
            {item xsd:language}
            {item xsd:Name}
            {item xsd:NCName}
            {item xsd:ENTITY}
            {item xsd:ENTITIES}
            {item xsd:NMTOKEN}
            {item xsd:NMTOKENS}
            {item xsd:ID}
            {item xsd:IDREF}
            {item xsd:IDREFS}
        }</original>
<translation>Used by SOAP Web Service methods which refer to types that do not map directly to a standard Curl type: <curl name="itemize"><curl name="item">xsd:time</curl> <curl name="item">xsd:duration</curl> <curl name="item">xsd:gYear</curl> <curl name="item">xsd:gYearMonth</curl> <curl name="item">xsd:gMonth</curl> <curl name="item">xsd:gMonthDay</curl> <curl name="item">xsd:Day</curl> <curl name="item">xsd:normalizedString</curl> <curl name="item">xsd:token</curl> <curl name="item">xsd:language</curl> <curl name="item">xsd:Name</curl> <curl name="item">xsd:NCName</curl> <curl name="item">xsd:ENTITY</curl> <curl name="item">xsd:ENTITIES</curl> <curl name="item">xsd:NMTOKEN</curl> <curl name="item">xsd:NMTOKENS</curl> <curl name="item">xsd:ID</curl> <curl name="item">xsd:IDREF</curl> <curl name="item">xsd:IDREFS</curl></curl></translation>
<comment>XMLSimpleValue</comment>
</string>

<string>
<original>Used by thing which unmarshal objects either inside the XML part of
        a SOAP message or externally, to set the status and possibly object
        for a given id.</original>
<translation>Used by thing which unmarshal objects either inside the XML part of a SOAP message or externally, to set the status and possibly object for a given id.</translation>
<comment>SOAPUnmarshalContext.set-object</comment>
</string>

<string>
<original>Used by {docref DefaultSOAPTypeMapper.marshal}.</original>
<translation>Used by <opaque>{docref DefaultSOAPTypeMapper.marshal}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.get-marshal-proc</comment>
</string>

<string>
<original>Used by {docref DefaultSOAPTypeMapper.unmarshal}.</original>
<translation>Used by <opaque>{docref DefaultSOAPTypeMapper.unmarshal}</opaque>.</translation>
<comment>DefaultSOAPTypeMapper.get-unmarshal-proc</comment>
</string>

<string>
<original>Used by {docref SOAPRPCMessageReader.read-rpc-response}, and
        should generally only be used by things which are overriding that.</original>
<translation>Used by <opaque>{docref SOAPRPCMessageReader.read-rpc-response}</opaque>, and should generally only be used by things which are overriding that.</translation>
<comment>SOAPRPCMessageReader.handle-soap-1-1-fault</comment>
</string>

<string>
<original>Used by {docref SOAPRPCMessageWriter.write-rpc-request}, and
        should generally only be used by things which are overriding that.</original>
<translation>Used by <opaque>{docref SOAPRPCMessageWriter.write-rpc-request}</opaque>, and should generally only be used by things which are overriding that.</translation>
<comment>SOAPRPCMessageWriter.write-arguments</comment>
</string>

<string>
<original>Used for generated SOAP structure classes, 
        when field corresponding to an element
        that is optional (minOccurs='0') or nillable (xsi:nil='true')
        is a Curl type that does not admit a null value.</original>
<translation>Used for generated SOAP structure classes, when field corresponding to an element that is optional (minOccurs='0') or nillable (xsi:nil='true') is a Curl type that does not admit a null value.</translation>
<comment>Nullable</comment>
</string>

<string>
<original>Used for type ascriptions in an {docref XMLSimpleValue}.</original>
<translation>Used for type ascriptions in an <opaque>{docref XMLSimpleValue}</opaque>.</translation>
<comment>XMLSimpleType</comment>
</string>

<string>
<original>Used to check whether the {docref TextOutputStream} that the
        user supplied to the constructor is open.</original>
<translation>Used to check whether the <opaque>{docref TextOutputStream}</opaque> that the user supplied to the constructor is open.</translation>
<comment>XMLOutputStream.open?</comment>
</string>

<string>
<original>Used to generate a SOAP XML document. This class obviates the
        need for manual formatting and string handling.</original>
<translation>Used to generate a SOAP XML document. This class obviates the need for manual formatting and string handling.</translation>
<comment>XMLOutputStream</comment>
</string>

<string>
<original>User-supplied {docref TextOutputStream} to which the XML is
        to be written.</original>
<translation>User-supplied <opaque>{docref TextOutputStream}</opaque> to which the XML is to be written.</translation>
<comment>XMLOutputStream.default</comment>
</string>

<string>
<original>When an {ctext XMLEndElement} is generated by an
        {docref XMLInputStream}, this field will always contain the
        {docref XMLName} of the matching {docref XMLStartElement}.

        When an {ctext XMLEndElement} is generated by an end user,
        this field may be {ctext null}.</original>
<translation><p>When an <opaque>{ctext XMLEndElement}</opaque> is generated by an <opaque>{docref XMLInputStream}</opaque>, this field will always contain the <opaque>{docref XMLName}</opaque> of the matching <opaque>{docref XMLStartElement}</opaque>.</p>
<p>When an <opaque>{ctext XMLEndElement}</opaque> is generated by an end user, this field may be <opaque>{ctext null}</opaque>.</p></translation>
<comment>XMLEndElement.element</comment>
</string>

<string>
<original>When {docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}
        finds this entry, it will set
        {docref SOAPObjectType.nillable?} to this value as
        well as setting {docref SOAPObjectType.xml-type} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>When <opaque>{docref DefaultSOAPCurlTypeToXMLTypeMapper.curl-type-to-xml-type}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.nillable?}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.xml-type}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPCurlTypeToXMLTypeMapper.set-curl-type-to-xml-type</comment>
</string>

<string>
<original>When {docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}
        finds this entry, it will set
        {docref SOAPObjectType.nillable?} to this value as
        well as setting {docref SOAPObjectType.curl-type} in the new
        {docref SOAPObjectType} which it creates.</original>
<translation>When <opaque>{docref DefaultSOAPXMLTypeToCurlTypeMapper.xml-type-to-curl-type}</opaque> finds this entry, it will set <opaque>{docref SOAPObjectType.nillable?}</opaque> to this value as well as setting <opaque>{docref SOAPObjectType.curl-type}</opaque> in the new <opaque>{docref SOAPObjectType}</opaque> which it creates.</translation>
<comment>DefaultSOAPXMLTypeToCurlTypeMapper.set-xml-type-to-curl-type</comment>
</string>

<string>
<original>Whether or not type attributes should be written when marshaling
        {param object}.  This will be passed
        to {param marshaler} when it is called to marshal {param object}.</original>
<translation>Whether or not type attributes should be written when marshaling <opaque>{param object}</opaque>. This will be passed to <opaque>{param marshaler}</opaque> when it is called to marshal <opaque>{param object}</opaque>.</translation>
<comment>SOAPMarshalContext.set-marshaler</comment>
</string>

<string>
<original>Write out a SOAP message based on an array of values into
        a {docref XMLOutputStream}.</original>
<translation>Write out a SOAP message based on an array of values into a <opaque>{docref XMLOutputStream}</opaque>.</translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>Writes the contents of the user-supplied {docref XMLToken}
        in XML format to
        the {docref TextOutputStream} supplied to the constructor.</original>
<translation>Writes the contents of the user-supplied <opaque>{docref XMLToken}</opaque> in XML format to the <opaque>{docref TextOutputStream}</opaque> supplied to the constructor.</translation>
<comment>XMLOutputStream.write-one</comment>
</string>

<string>
<original>Writes user-supplied {docref XMLToken}s to a user-supplied
        {docref TextOutputStream}.

        Namespaces are handled appropriately: a namespace prefix is generated for each
        namespace, and appended to the appropriate elements
        and attributes.  The namespace attribute is inserted on the element that owns it.

        There is no guarantee that the output of this class will be well-formed
        XML.  The correctness of the output is dependent on the {docref XMLToken}s
        created by the user and supplied to this class.

        This class is customized for use with SOAP.
        Not all XML capability is supported.  For example,
        processing instructions are not supported, since they are not
        allowed in SOAP messages.</original>
<translation><p>Writes user-supplied <opaque>{docref XMLToken}</opaque>s to a user-supplied <opaque>{docref TextOutputStream}</opaque>.</p>
<p>Namespaces are handled appropriately: a namespace prefix is generated for each namespace, and appended to the appropriate elements and attributes. The namespace attribute is inserted on the element that owns it.</p>
<p>There is no guarantee that the output of this class will be well-formed XML. The correctness of the output is dependent on the <opaque>{docref XMLToken}</opaque>s created by the user and supplied to this class.</p>
<p>This class is customized for use with SOAP. Not all XML capability is supported. For example, processing instructions are not supported, since they are not allowed in SOAP messages.</p></translation>
<comment>XMLOutputStream</comment>
</string>

<string>
<original>XML type of this object type.  (Eg.
        {code {new XMLName, SOAPTypeMapper.xml-schema-uri, "string"}})
        Can be {ctext null}, meaning that this information is unknown for
        this type.</original>
<translation>XML type of this object type. (Eg. <opaque>{code {new XMLName, SOAPTypeMapper.xml-schema-uri, "string"}}</opaque>) Can be <opaque>{ctext null}</opaque>, meaning that this information is unknown for this type.</translation>
<comment>SOAPObjectType.default</comment>
</string>

<string>
<original>You must register one explicitly for the appropriate
        {docref SOAPObjectType}.</original>
<translation>You must register one explicitly for the appropriate <opaque>{docref SOAPObjectType}</opaque>.</translation>
<comment>SOAPAliasMarshaler</comment>
</string>

<string>
<original>compares {docref WSDLHTTPRPCPostClient.generated-using-version}
        with {docref wsdl-service-class-version}.</original>
<translation>compares <opaque>{docref WSDLHTTPRPCPostClient.generated-using-version}</opaque> with <opaque>{docref wsdl-service-class-version}</opaque>.</translation>
<comment>WSDLHTTPRPCPostClient.verify-service-version</comment>
</string>

<string>
<original>id for the object that the proc is interested in.</original>
<translation>id for the object that the proc is interested in.</translation>
<comment>SOAPUnmarshalContext.append-callback</comment>
</string>

<string>
<original>{docref DefaultSOAPMarshalContext} provides a basic implemenation 
        of this interface.</original>
<translation><opaque>{docref DefaultSOAPMarshalContext}</opaque> provides a basic implemenation of this interface.</translation>
<comment>SOAPMarshalContext</comment>
</string>

<string>
<original>{docref DefaultSOAPUnmarshalContext} provides a basic implemenation 
        of this interface.</original>
<translation><opaque>{docref DefaultSOAPUnmarshalContext}</opaque> provides a basic implemenation of this interface.</translation>
<comment>SOAPUnmarshalContext</comment>
</string>

<string>
<original>{docref SOAPCurlTypeToXMLTypeMapper} that will be passed to the
        marshalers.  And it will be used to fill in {param type} that
        was saved with the marshaler with
        {docref SOAPMarshalContext.set-marshaler}.</original>
<translation><opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> that will be passed to the marshalers. And it will be used to fill in <opaque>{param type}</opaque> that was saved with the marshaler with <opaque>{docref SOAPMarshalContext.set-marshaler}</opaque>.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>{docref SOAPCurlTypeToXMLTypeMapper} that will be used to fill in
        {param type} that was saved with the marshaler with
        {docref SOAPMarshalContext.set-marshaler}.</original>
<translation><opaque>{docref SOAPCurlTypeToXMLTypeMapper}</opaque> that will be used to fill in <opaque>{param type}</opaque> that was saved with the marshaler with <opaque>{docref SOAPMarshalContext.set-marshaler}</opaque>.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>{docref SOAPMarshalContext} that will be passed to the marshalers.</original>
<translation><opaque>{docref SOAPMarshalContext}</opaque> that will be passed to the marshalers.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>{docref SOAPObjectType} to check and either return if no
        further information can be filled in, otherwise use it as a
        basis for the new one.</original>
<translation><opaque>{docref SOAPObjectType}</opaque> to check and either return if no further information can be filled in, otherwise use it as a basis for the new one.</translation>
<comment>SOAPObjectType.fill-in-for-array-type</comment>
</string>

<string>
<original>{docref SOAPTypeMapper} that will be passed to the marshalers.</original>
<translation><opaque>{docref SOAPTypeMapper}</opaque> that will be passed to the marshalers.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>{docref XMLInputStream} always creates {ctext XMLAttribute}s with
        this field as a {docref String}, but {docref XMLOutputStream}
        will correctly process {ctext XMLAttribute}s
        with this field as an {docref XMLName} or an array of
        {docref XMLName}s.
  
        {docref XMLInputStream} will fill in {param xml-name-values} with
        a {docref XMLName} or an array of {docref XMLName}s that is the
        same as the {param value} looked up in the relevant name spaces,
        if appropriate.</original>
<translation><p><opaque>{docref XMLInputStream}</opaque> always creates <opaque>{ctext XMLAttribute}</opaque>s with this field as a <opaque>{docref String}</opaque>, but <opaque>{docref XMLOutputStream}</opaque> will correctly process <opaque>{ctext XMLAttribute}</opaque>s with this field as an <opaque>{docref XMLName}</opaque> or an array of <opaque>{docref XMLName}</opaque>s.</p>
<p><opaque>{docref XMLInputStream}</opaque> will fill in <opaque>{param xml-name-values}</opaque> with a <opaque>{docref XMLName}</opaque> or an array of <opaque>{docref XMLName}</opaque>s that is the same as the <opaque>{param value}</opaque> looked up in the relevant name spaces, if appropriate.</p></translation>
<comment>XMLAttribute.value</comment>
</string>

<string>
<original>{docref XMLInputStream} always creates {ctext XMLAttribute}s with
        {param value} as a {docref String}, but if that {docref String} looks
        like it contains one or more valid {docref XMLName}s then
        {docref XMLInputStream} will also set this field to an
        array of {docref XMLName}s.  If {param value}
        is an {docref XMLName} or an array of {docref XMLName}s, then
        this should be an array containing the same {docref XMLName}s.</original>
<translation><opaque>{docref XMLInputStream}</opaque> always creates <opaque>{ctext XMLAttribute}</opaque>s with <opaque>{param value}</opaque> as a <opaque>{docref String}</opaque>, but if that <opaque>{docref String}</opaque> looks like it contains one or more valid <opaque>{docref XMLName}</opaque>s then <opaque>{docref XMLInputStream}</opaque> will also set this field to an array of <opaque>{docref XMLName}</opaque>s. If <opaque>{param value}</opaque> is an <opaque>{docref XMLName}</opaque> or an array of <opaque>{docref XMLName}</opaque>s, then this should be an array containing the same <opaque>{docref XMLName}</opaque>s.</translation>
<comment>XMLAttribute.xml-name-values</comment>
</string>

<string>
<original>{docref XMLInputStream} always creates {ctext XMLCharacters} with
        {param characters}, but if that {docref String} looks like it
        could be one or more valid {docref XMLName}s then
        {docref XMLInputStream} will also set this field to a non-empty
        array of {docref XMLName}s.</original>
<translation><opaque>{docref XMLInputStream}</opaque> always creates <opaque>{ctext XMLCharacters}</opaque> with <opaque>{param characters}</opaque>, but if that <opaque>{docref String}</opaque> looks like it could be one or more valid <opaque>{docref XMLName}</opaque>s then <opaque>{docref XMLInputStream}</opaque> will also set this field to a non-empty array of <opaque>{docref XMLName}</opaque>s.</translation>
<comment>XMLCharacters.xml-name-values</comment>
</string>

<string>
<original>{docref XMLInputStream} may or may not provide a {docref XMLCharacters}
        between a {docref XMLStartElement} and a {docref XMLEndElement} if
        there is no non-whitespace text between them in the XML document.</original>
<translation><opaque>{docref XMLInputStream}</opaque> may or may not provide a <opaque>{docref XMLCharacters}</opaque> between a <opaque>{docref XMLStartElement}</opaque> and a <opaque>{docref XMLEndElement}</opaque> if there is no non-whitespace text between them in the XML document.</translation>
<comment>XMLCharacters</comment>
</string>

<string>
<original>{docref XMLInputStream} where the {docref XMLToken}s of SOAP
        XML data to be converted into Curl values are read from.</original>
<translation><opaque>{docref XMLInputStream}</opaque> where the <opaque>{docref XMLToken}</opaque>s of SOAP XML data to be converted into Curl values are read from.</translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>{docref XMLInputStream} where the {docref XMLToken}s of SOAP
        XML data to be converted into a Curl value are read from.</original>
<translation><opaque>{docref XMLInputStream}</opaque> where the <opaque>{docref XMLToken}</opaque>s of SOAP XML data to be converted into a Curl value are read from.</translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original>{docref XMLOutputStream} that will be passed to the marshalers for
        them to write XML into.  Normally this {docref XMLOutputStream}
        will be right before the end of a SOAP Body, when this
        is called.</original>
<translation><opaque>{docref XMLOutputStream}</opaque> that will be passed to the marshalers for them to write XML into. Normally this <opaque>{docref XMLOutputStream}</opaque> will be right before the end of a SOAP Body, when this is called.</translation>
<comment>SOAPMarshalContext.marshal-remaining-objects</comment>
</string>

<string>
<original>{docref XMLOutputStream} where the {docref XMLToken}s from
        convert {param value} into SOAP XML data will be written.</original>
<translation><opaque>{docref XMLOutputStream}</opaque> where the <opaque>{docref XMLToken}</opaque>s from convert <opaque>{param value}</opaque> into SOAP XML data will be written.</translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>{docref XMLOutputStream} where the {docref XMLToken}s of
        the SOAP XML data will be written.</original>
<translation><opaque>{docref XMLOutputStream}</opaque> where the <opaque>{docref XMLToken}</opaque>s of the SOAP XML data will be written.</translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>{docref XMLOutputStream} will do the proper namespace management to
        write out the {docref XMLName}s as the attribute's value, but it
        ignores this field and only uses the {param value}.</original>
<translation><opaque>{docref XMLOutputStream}</opaque> will do the proper namespace management to write out the <opaque>{docref XMLName}</opaque>s as the attribute's value, but it ignores this field and only uses the <opaque>{param value}</opaque>.</translation>
<comment>XMLAttribute.xml-name-values</comment>
</string>

<string>
<original>{exception SOAP-1-1-FaultException,
            filled in with the data from the Fault XML element.
        }
        {exception SOAPException,
            if there is a problem with the format of the Fault XML
            element.
        }</original>
<translation><curl name="exception"><opaque>SOAP-1-1-FaultException,</opaque>filled in with the data from the Fault XML element.</curl> <curl name="exception"><opaque>SOAPException,</opaque>if there is a problem with the format of the Fault XML element.</curl></translation>
<comment>SOAPRPCMessageReader.handle-soap-1-1-fault</comment>
</string>

<string>
<original>{exception SOAPException,
            if there is a Fault element in the Body of message.
            For a SOAP 1.1 fault it would throw a
            {docref SOAP-1-1-FaultException}.
        }
        {exception SOAPUnmarshalException,
            if there is a problem with the types being unmarshaled
            or if there is a problem with the format of the XML data.
        }</original>
<translation><curl name="exception"><opaque>SOAPException,</opaque>if there is a Fault element in the Body of message. For a SOAP 1.1 fault it would throw a <opaque>{docref SOAP-1-1-FaultException}</opaque>.</curl> <curl name="exception"><opaque>SOAPUnmarshalException,</opaque>if there is a problem with the types being unmarshaled or if there is a problem with the format of the XML data.</curl></translation>
<comment>SOAPMessageReader.read-response</comment>
</string>

<string>
<original>{exception SOAPMarshalException,
            if a marshaler can not be found,
            for problems with the types being marshaled 
            and for most other failures.
        }
        {exception SOAPException,
            for some other failures.
        }</original>
<translation><curl name="exception"><opaque>SOAPMarshalException,</opaque>if a marshaler can not be found, for problems with the types being marshaled and for most other failures.</curl> <curl name="exception"><opaque>SOAPException,</opaque>for some other failures.</curl></translation>
<comment>SOAPTypeMapper.marshal</comment>
</string>

<string>
<original>{exception SOAPMarshalException,
            if a there is a problem with the types being marshaled 
            and for most other failures in sending the request.
        }
        {exception SOAPException,
            for most other errors, and
            if there is a Fault element in the Body of message.
            For a SOAP 1.1 fault it would throw a
            {docref SOAP-1-1-FaultException}.
        }
        {exception SOAPUnmarshalException,
            if there is a problem with the types being unmarshaled
            or if there is a problem with the format of the XML data of
            the response.
        }</original>
<translation><curl name="exception"><opaque>SOAPMarshalException,</opaque>if a there is a problem with the types being marshaled and for most other failures in sending the request.</curl> <curl name="exception"><opaque>SOAPException,</opaque>for most other errors, and if there is a Fault element in the Body of message. For a SOAP 1.1 fault it would throw a <opaque>{docref SOAP-1-1-FaultException}</opaque>.</curl> <curl name="exception"><opaque>SOAPUnmarshalException,</opaque>if there is a problem with the types being unmarshaled or if there is a problem with the format of the XML data of the response.</curl></translation>
<comment>SOAPHTTPRPCPostCaller.call</comment>
</string>

<string>
<original>{exception SOAPMarshalException,
            if a there is a problem with the types being marshaled 
            and for most other failures.
        }
        {exception SOAPException,
            for some other failures.
        }</original>
<translation><curl name="exception"><opaque>SOAPMarshalException,</opaque>if a there is a problem with the types being marshaled and for most other failures.</curl> <curl name="exception"><opaque>SOAPException,</opaque>for some other failures.</curl></translation>
<comment>SOAPMessageWriter.write-request</comment>
</string>

<string>
<original>{exception SOAPUnmarshalException,
            if a unmarshaler can not be found,
            for XML data format errors and for most other failures.
        }
        {exception SOAPException,
            for some other failures.
        }</original>
<translation><curl name="exception"><opaque>SOAPUnmarshalException,</opaque>if a unmarshaler can not be found, for XML data format errors and for most other failures.</curl> <curl name="exception"><opaque>SOAPException,</opaque>for some other failures.</curl></translation>
<comment>SOAPTypeMapper.unmarshal</comment>
</string>

<string>
<original><![CDATA[{paragraph Consider the following XML fragment:
            {paragraph paragraph-left-indent=.3inch,
                |"<element1 xmlns:namespace1="www.microsoft.com">"|
                {br}
                |"    <element2 namespace1:attribute1="value1" />"|
                {br}
                |"</element1>"|
            }
            {paragraph The {ctext XMLName}
                for the elements and attributes
                will contain:
                {paragraph paragraph-left-indent=.3inch,
                    {docref XMLStartElement}: element1
                    {itemize
                        {item |"namespace = """|}
                        {item |"local-name = "element1""|}
                    }

                    {docref XMLStartElement}: element2
                    {itemize
                        {item |"namespace = """|}
                        {item |"local-name = "element2""|}
                    }

                    {docref XMLAttribute}: attribute1
                    {itemize
                        {item |"namespace = "www.microsoft.com""|}
                        {item |"local-name = "attribute1""|}
                    }

                    {docref XMLEndElement}: element2
                    {itemize
                        {item |"namespace = """|}
                        {item |"local-name = """|}
                    }

                    {docref XMLEndElement}: element1
                    {itemize
                        {item |"namespace = """|}
                        {item |"local-name = "element1""|}
                    }
                }
            }
            {paragraph Additional comments:

                Elements and attributes in XML can be labeled with a namespace prefix
                ({quote namespace1} in the example).  The prefix is used in XML as
                shorthand for a namespace URI.
                When XML is read by {docref XMLInputStream}, all names are stored
                in the {ctext XMLName} with the appropriate namespace URI rather
                than the prefix.
                When XML is written by {docref XMLOutputStream}, namespace/prefix
                attributes are added to the appropriate start element tags,
                and the prefixes are written with the names, i.e. "prefix:name".
            }
        }]]></original>
<translation><p>Consider the following XML fragment:
<p><opaque>paragraph-left-indent=.3inch,</opaque><![CDATA[<element1 xmlns:namespace1="www.microsoft.com"> ]]><opaque>{br}</opaque><![CDATA[ <element2 namespace1:attribute1="value1" /> ]]><opaque>{br}</opaque><![CDATA[ </element1>]]></p>
<p>The <opaque>{ctext XMLName}</opaque> for the elements and attributes will contain:<p><opaque>paragraph-left-indent=.3inch,</opaque><p><opaque>{docref XMLStartElement}</opaque>: element1 <curl name="itemize"><curl name="item">namespace \= ""</curl> <curl name="item">local-name \= "element1"</curl></curl></p><p><opaque>{docref XMLStartElement}</opaque>: element2 <curl name="itemize"><curl name="item">namespace \= ""</curl> <curl name="item">local-name \= "element2"</curl></curl></p><p><opaque>{docref XMLAttribute}</opaque>: attribute1 <curl name="itemize"><curl name="item">namespace \= "www.microsoft.com"</curl> <curl name="item">local-name \= "attribute1"</curl></curl></p><p><opaque>{docref XMLEndElement}</opaque>: element2 <curl name="itemize"><curl name="item">namespace \= ""</curl> <curl name="item">local-name \= ""</curl></curl></p><p><opaque>{docref XMLEndElement}</opaque>: element1 <curl name="itemize"><curl name="item">namespace \= ""</curl> <curl name="item">local-name \= "element1"</curl></curl></p></p></p>
<p><p>Additional comments:</p><p>Elements and attributes in XML can be labeled with a namespace prefix (<curl name="quote">namespace1</curl> in the example). The prefix is used in XML as shorthand for a namespace URI. When XML is read by <opaque>{docref XMLInputStream}</opaque>, all names are stored in the <opaque>{ctext XMLName}</opaque> with the appropriate namespace URI rather than the prefix. When XML is written by <opaque>{docref XMLOutputStream}</opaque>, namespace/prefix attributes are added to the appropriate start element tags, and the prefixes are written with the names, i.e. "prefix:name".</p></p>
</p></translation>
<comment>XMLName</comment>
</string>

</translation-dictionary>
