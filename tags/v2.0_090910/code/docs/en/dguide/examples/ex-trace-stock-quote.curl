||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{curl 7.0, 6.0 applet}
{applet manifest = "../manifest.mcurl"}

|| import the service package
{import * from COM.CDYNE.WS.PowerQuote}
|| instantiate the service class
{value
    || instantiate the service
    def service =  {DelayedStockQuote}
    || display elements
    def quote-display = {TextDisplay width = 1in}
    def trace-buffer = {StringBuf}
    def trace-display = 
        {TextArea 
            enabled? = false,
            height = 2in}
    def symbol-field =
        {TextField
            value = "IBM",
            width = 1in,
            {on ValueFinished at c:TextField do
                || clear trace output and display
                {trace-buffer.clear}
                {trace-display.unset-value}
                def symbol = c.value
                || call the method, using test license key
                def license-key = "0"
                def quote-data = {service.get-quote symbol, license-key}
                || display the result
                def quote = quote-data.last-trade-amount
                set quote-display.value = {String quote}
                || display the trace
                set trace-display.value = {trace-buffer.to-String}
            }}
    {paragraph 
        {small Stock Quote for} 
        {value symbol-field}
        {value quote-display}
        {CheckButton label = {text Trace?},
            {on ValueFinished at c:CheckButton do
                || toggle tracing
                set service.trace-stream = 
                    {if c.value 
                     then trace-buffer
                     else null}
                || trigger service call
                {symbol-field.handle-event {ValueFinished}}}}
        {hrule}
        {text-width-display trace-display}
    }
}
