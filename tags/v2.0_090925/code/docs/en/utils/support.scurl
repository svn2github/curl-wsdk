||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from CURL.IDE.DOCUMENTATION}
{import * from CURL.GUI.TEXT-EDIT}

|| styles
|| --------------------
{define-text-proc {xml-node ...}:any
    {return
        {monospace
            color = "purple",
            {value ...}
        }
    }
}

{define-text-proc {xml-attr ...}:any
    {return
        {monospace
            color = "purple",
            {value ...}
        }
    }
}

{define-proc {code-box ...}:Graphic
    {return
        {VBox
            background = "beige",
            ...
        }
    }
}

{define-text-proc {xml-default ...}:any
    {return
        {text [{italic default}
            {monospace color = "maroon",
            {value ...}]}
        }
    }
}

{define-text-proc {xml-required ...}:any
    {return
        {text [{italic required}]}
    }
}

{define-text-proc {TODO ...}:any
    {return
        {TextFlowBox
            background = "#FFDFA0",
            {text 
                color = "red", 
                font-family = "Comic Sans MS", 
                {value ...}}
        }}
}

{define-text-proc {preliminary ...}:any
    {return
        {TextFlowBox 
            background = "beige",
            width = 5in,
            border-width = 2px, 
            {bold Note:},
            {paragraph
                font-size = 0.8em,
                {value ...}}
        }}
}
{define-proc {privilege-note}:Visual
    {return
        {Frame background = "#DDD",
            {paragraph
                {bold Note about privilege:} Normal Curl applets can obtain data
                and communicate with resources in their home location,
                and other locations which permit such access by providing
                a curl-access.txt file.  Only privileged applets may
                obtain data from other sources.
                Thus, in order to call an external web service,
                or to obtain data from an external location,
                it is usually necessary for an applet to be privileged.
                
                See 
                {link href = {dguide.merge "security.curl"}, Security} and
                {link href = {dguide.merge "serving-curl-applets.curl#curlhostnames"},
                Letting Applets Access Web Sites}
                for more on Curl security provisions.
                
                These Developer Guide pages, of course, are not normally privileged.
                {Frame border-width = 1px,
                    {paragraph
                        At the moment, they are
                        {if {process-privileged?} 
                         then {bold color = "green", privileged}
                         else {bold color = "red", not privileged}}.
                    }}
                
                To grant privilege to the examples, you need to use the Curl Control Panel
                to grant privilege to the directory containing this page, 
                {monospace {value {{get-the-applet}.url.parent-dir.url.canonicalize}.local-filename}}
                and then issue the {monospace Reload Page} command.    
            }}
    }}

|| Curl IDE Documentation links 
|| --------------------
{let docsdir:String = "curl://install/docs/" & {get-host-locale}.language}
{let dguide:Url = {url docsdir & "/dguide/"}}
{let uguide:Url = {url docsdir & "/uguide/"}}

|| WSDK standards formats
|| --------------------
{define-text-proc {status ...}:Visual
    {return
        {text
            font-style = "italic",
            {splice ...}}}
}
{define-text-proc {conformance-level ...}:Visual
    {return
        {text
            font-family = "monospace",
            {splice ...}}}
}
{define-text-proc {focus-notes ...}:Visual
    {return
        {paragraph
            font-size = 9pt,
            {splice ...}}}
}
{define-proc {standard-ref name:String}:Visual
    {return
        {link href = {{get-the-applet}.url.merge "#" & name},
            hyperlink-color = "olive",
            {text
                font-weight = "bold",
                {value name}}}}
}
{define-proc {standard-heading name:String}:Visual
    {return
        {destination name = name,
            {text
                font-weight = "bold",
                {value name}}}}
}
{define-proc {conformance-table ...}:Graphic
    {return
        {Table 
            columns = 2, 
            cell-margin = 3px,
            font-size = 9pt,
            ...}}            
}
{define-proc {expandable 
                 label:Visual, 
                 content:Visual,
                 ...
             }:TreeControl
    {return
        {TreeControl 
            tree-connector-width = 0pt,
            selection-policy = "disabled",
            control-appearance-changeable? = true,
            data-model =
                {TreeModel root = 
                    {TreeNode node-data = label,
                        {TreeNode 
                            node-data = 
                                {TextFlowBox 
                                    text-breakable? = true, 
                                    content}}}},
            ...}}
}
|| graphic hierarchy navigation
{define-proc {for-each-graphic 
                 f:{proc-type {Graphic}:void}, 
                 g:Graphic}:void
    {f g}
    {type-switch g
     case b:Box do
        {for g in b.graphical-children do
            {for-each-graphic f, g}}}
}
{define-proc {prelude-line? line:StringBuf}:bool
    {return
        || herald comment prefix
        {line.prefix? |"|||"|} or
        || whitespace
        {line.trim-clone}.empty?
    }
}
{define-proc {strip-prelude-lines
                 buf:StringBuf,
                 prelude-line?:{proc-type {StringBuf}:bool}
             }:void
    {with-open-streams in = {buf.to-InputStream} do
        || read each line
        {while true do
            let pos:int64 = {in.tell}
            || check if prelude
            let skip?:bool =
                {if-non-null line = {in.read-line} then
                    {prelude-line? line}
                 else false}
            || until beyond prelude or done
            {if not skip? then
                {buf.remove 0, length = pos asa int}
                {break}}}}
    
}
|| example references
|| --------------------
{define-proc public {example-ref
                        loc:Url,
                        title:#String = null,
                        base-url:Url = {get-base-url},
                        manifest:ComponentManifest = {get-default-manifest},
                        package:OpenPackage = 
                            {OpenPackage 
                                CURL.IMPLICIT.APPLET,
                                CURL.IDE.DOCUMENTATION,
                                manifest = manifest},
                        ...
                    }:Graphic
    let buf:StringBuf = {read-from loc}
    {strip-prelude-lines buf, prelude-line?}
    let result:any = 
        {try
            {evaluate 
                base-url = loc,
                package = package,
                {format "\{example title = %w,\n %s\}",
                    title,
                    buf}}
         catch e:Exception do
            {paragraph
                Error in {bold {value loc}}:{br}                
                {text color = "red", {value e}}}}
    {return {Frame result, ...}}
}
{define-proc {x-example-ref
                 title:String = {message Example},
                 href:Url,
                 ...}:Visual
    let display:Graphic = 
        {example-ref title = title, href, ...}
    {return
        {text-width-display 
            {expandable
                border-width = 2px, 
                {bold {value title}},
                display}}}
}

