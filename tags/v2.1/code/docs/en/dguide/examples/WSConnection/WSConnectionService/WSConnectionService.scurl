|| This file was generated with COM.CURL.WSDK.WSDL
||  for WSDL file: file:///c:/eclipse/workspace_oss/curl-wsdk/trunk/code/docs/en/dguide/examples/WSConnection/WSConnectionService.wsdl

{define-class public WSConnectionService {inherits WSDLHTTPRPCPostClient}

  {method public {getDatabaseNames}:(_return:#{Array-of String})
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute}) =
        {self.call
            "getDatabaseNames",
            {{Array-of any}
            },
            {splice self.operations["getDatabaseNames"]}
        }
    {return
        responses[0] asa #{Array-of String}
    }
  }


  {method public {define-getDatabaseNames}:void
    set self.operations["getDatabaseNames"] = 
        {Arguments
            {{Array-of #XMLName}
            },
            {{Array-of SOAPObjectType}
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = {Array-of String},
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "getDatabaseNames",
            request-operation = {XMLName "http://www.curl.com/data", "getDatabaseNames"},
            default-namespace = "http://www.curl.com/data",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
    }
  }


  {method public {getDatabaseTables database:#String}:(_return:#{Array-of String})
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute}) =
        {self.call
            "getDatabaseTables",
            {{Array-of any}
                database
            },
            {splice self.operations["getDatabaseTables"]}
        }
    {return
        responses[0] asa #{Array-of String}
    }
  }


  {method public {define-getDatabaseTables}:void
    set self.operations["getDatabaseTables"] = 
        {Arguments
            {{Array-of #XMLName}
                {XMLName "", "database"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = {Array-of String},
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "getDatabaseTables",
            request-operation = {XMLName "http://www.curl.com/data", "getDatabaseTables"},
            default-namespace = "http://www.curl.com/data",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
    }
  }


  {method public {getFields database:#String, table:#String}:(_return:#{Array-of RecordFieldSpec})
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute}) =
        {self.call
            "getFields",
            {{Array-of any}
                database,
                table
            },
            {splice self.operations["getFields"]}
        }
    {return
        responses[0] asa #{Array-of RecordFieldSpec}
    }
  }


  {method public {define-getFields}:void
    set self.operations["getFields"] = 
        {Arguments
            {{Array-of #XMLName}
                {XMLName "", "database"},
                {XMLName "", "table"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName.unchecked "http://www.curl.com/data", "RecordFieldSpec[]"},
                    curl-type = {Array-of RecordFieldSpec},
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "getFields",
            request-operation = {XMLName "http://www.curl.com/data", "getFields"},
            default-namespace = "http://www.curl.com/data",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
    }
  }


  {method public {getData database:#String, query:#String, size_limit:int}:(_return:#String)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute}) =
        {self.call
            "getData",
            {{Array-of any}
                database,
                query,
                size_limit
            },
            {splice self.operations["getData"]}
        }
    {return
        responses[0] asa #String
    }
  }


  {method public {define-getData}:void
    set self.operations["getData"] = 
        {Arguments
            {{Array-of #XMLName}
                {XMLName "", "database"},
                {XMLName "", "query"},
                {XMLName "", "size_limit"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "int"},
                    curl-type = int
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "getData",
            request-operation = {XMLName "http://www.curl.com/data", "getData"},
            default-namespace = "http://www.curl.com/data",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
    }
  }


  {method public {execute database:#String, sql:#{Array-of String}}:(_return:int)
    let constant (responses:{Array-of any},
         headers:#{Array-of any},
         header-roles:#{Array-of #String},
         header-must-understands:#{Array-of bool},
         root-attributes:#{Array-of XMLAttribute}) =
        {self.call
            "execute",
            {{Array-of any}
                database,
                sql
            },
            {splice self.operations["execute"]}
        }
    {return
        responses[0] asa int
    }
  }


  {method public {define-execute}:void
    set self.operations["execute"] = 
        {Arguments
            {{Array-of #XMLName}
                {XMLName "", "database"},
                {XMLName "", "sql"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String,
                    nillable? = true
                },
                {SOAPObjectType
                    xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                    curl-type = {Array-of String},
                    nillable? = true
                }
            },
            {{Array-of #XMLName}
                {XMLName "", "return"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "int"},
                    curl-type = int
                }
            },
            "http://schemas.xmlsoap.org/soap/encoding/",
            soap-action = "execute",
            request-operation = {XMLName "http://www.curl.com/data", "execute"},
            default-namespace = "http://www.curl.com/data",
            rpc-style? = true,
            write-type-attribute? = true,
            write-encoding-attribute? = true
    }
  }

  {method protected {define-operations}:void
     {self.define-getDatabaseNames}
     {self.define-getDatabaseTables}
     {self.define-getFields}
     {self.define-getData}
     {self.define-execute}
  }

  {method public {register-types
                 }:(type-mapper:SOAPTypeMapper,
                    element-name-to-xml-type:SOAPElementNameToXMLTypeMapper,
                    xml-type-to-curl-type:SOAPXMLTypeToCurlTypeMapper,
                    curl-type-to-xml-type:SOAPCurlTypeToXMLTypeMapper,
                    xml-type-to-element-name:SOAPXMLTypeToElementNameMapper
                   )
    let constant type-mapper:DefaultSOAPTypeMapper =
        {DefaultSOAPTypeMapper}
    let constant element-name-to-xml-type:DefaultSOAPElementNameToXMLTypeMapper =
        {DefaultSOAPElementNameToXMLTypeMapper}
    let constant xml-type-to-curl-type:DefaultSOAPXMLTypeToCurlTypeMapper =
        {DefaultSOAPXMLTypeToCurlTypeMapper}
    let constant curl-type-to-xml-type:DefaultSOAPCurlTypeToXMLTypeMapper =
        {DefaultSOAPCurlTypeToXMLTypeMapper}
    let constant xml-type-to-element-name:DefaultSOAPXMLTypeToElementNameMapper =
        {DefaultSOAPXMLTypeToElementNameMapper}
    {do
        let constant soap-struct-marshaler:SOAPStructMarshaler =
        {SOAPStructMarshaler
            {SOAPObjectType
                xml-type = {XMLName "http://www.curl.com/data", "RecordFieldSpec"},
                curl-type = RecordFieldSpec,
                nillable? = true
            },
            {{Array-of #XMLName}
                {XMLName "", "name"},
                {XMLName "", "domain"},
                {XMLName "", "caption"},
                {XMLName "", "index"},
                {XMLName "", "nullable"},
                {XMLName "", "primary_key"}
            },
            {{Array-of SOAPObjectType}
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                    curl-type = String
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "boolean"},
                    curl-type = bool
                },
                {SOAPObjectType
                    xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "boolean"},
                    curl-type = bool
                }
            },
            {{Array-of String}
                "name",
                "domain",
                "caption",
                "index",
                "nullable",
                "primary_key"
            },
            element-name-to-xml-type = element-name-to-xml-type,
            xml-type-to-curl-type = xml-type-to-curl-type,
            curl-type-to-xml-type = curl-type-to-xml-type,
            xml-type-to-element-name = xml-type-to-element-name
        }
        {soap-struct-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName "http://www.curl.com/data", "RecordFieldSpec"},
                        curl-type = RecordFieldSpec
                    },
                    {SOAPObjectType
                        xml-type = {XMLName.unchecked "http://www.curl.com/data", "RecordFieldSpec[]"},
                        curl-type = {Array-of RecordFieldSpec},
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked "http://www.curl.com/data", "RecordFieldSpec[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {do
        let constant array-marshaler:SOAPArrayMarshaler =
            {SOAPArrayMarshaler.from-element-type-array
                {{Array-of SOAPObjectType}
                    {SOAPObjectType
                        xml-type = {XMLName SOAPTypeMapper.xml-schema-uri, "string"},
                        curl-type = String
                    },
                    {SOAPObjectType
                        xml-type = {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"},
                        curl-type = {Array-of String},
                        nillable? = true
                    }
                },
                array-types =
                    {{Array-of #XMLName}
                        {XMLName.unchecked SOAPTypeMapper.xml-schema-uri, "string[]"}
                    },
                xml-type-to-curl-type = xml-type-to-curl-type,
                curl-type-to-xml-type = curl-type-to-xml-type,
                xml-type-to-element-name = xml-type-to-element-name
            }
        {array-marshaler.register
            type-mapper = type-mapper,
            element-name-to-xml-type-mapper = element-name-to-xml-type,
            xml-type-to-curl-type-mapper = xml-type-to-curl-type,
            curl-type-to-xml-type-mapper = curl-type-to-xml-type,
            xml-type-to-element-name-mapper = xml-type-to-element-name
        }
    }
    {return
        type-mapper,
        element-name-to-xml-type,
        xml-type-to-curl-type,
        curl-type-to-xml-type,
        xml-type-to-element-name
    }
  }

  {constructor public
    {default
        service-location:Url =
            {abs-url "http://localhost/work/services/soap/s-wsconnection.php"},
            ...
    }
    {construct-super.WSDLHTTPRPCPostClient service-location,
        generated-using-version = "6",
        {splice ...}
    }
  }
}

