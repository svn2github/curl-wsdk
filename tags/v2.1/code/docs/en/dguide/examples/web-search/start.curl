||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0, 7.0, 8.0 applet}
{applet manifest = "manifest.mcurl",
    {compiler-directives careful? = true}
}
{import * from COM.MICROSOFT.SCHEMAS.LIVESEARCH._2008._03.SEARCH.Search}
{import * from COM.CURL.WSDK.RECORDSET-FOR}
{import * from COM.CURL.WSDK.SOAP}

|| instantiate the service class
{def SERVICE = 
    {LiveSearchService}
}
|| developed applications will need their own key
|| you can use this for a few tests while
|| you're getting your own key
{def APPID = 
    "7255C27169150569FD65DC4EA7B1583D7A5E8232"
}
|| simplified parameters
{define-proc {do-web-search 
                 query:String,
                 offset:uint = 0,
                 count:uint = 10                
             }:SearchResponse
    def request = 
        {SearchRequest.from-keywords 
            query = query, 
            appId = APPID,
            web = {WebRequest.from-keywords count = count, offset = offset},
            sources = {{Array-of SourceType} SourceType.web}}
    def response = {SERVICE.search request}
    {return response}
}
|| accumulate results
{define-proc {web-search 
                 query:String,
                 offset:uint = 0,
                 count:uint = 10        
             }:(RecordSet, SearchResponse)
    
    || recordset for organizing results
    def rs = {{RecordSet-for WebResult}}
    
    || get first chunk 
    def icount = 10 asa uint
    def response =
        {do-web-search query,
            offset = offset, 
            count = {min icount, count}}
    def results = {non-null response.web.results} 
    || TODO: what if its unspecified?
    set count = {min count, response.web.total}
    {with rs.batch-events? = true do
        {for result in results do
            {rs.append result}}
        {rs.commit}}
    
    || incrementally get more
    {while rs.size < count do
        def size = rs.size asa uint
        def from = size
        def ncount = {min icount, count - size}
        def next = 
            {do-web-search query,
                offset = offset,
                count = ncount}
        || merge with results
        def results = {non-null response.web.results} 
        def n = results.size
        {if n > 0 then
            {with rs.batch-events? = true do
                {for result in results do
                    {rs.append result}}
                {rs.commit}}}
        || got less than requested ==> must be done
        {if n < count then
            {break}}
        }
    
    || return accumulated results
    {return rs, response}
}
|| incremental results
{define-proc {async-web-search
                     query:String,
                     offset:uint = 0,
                     count:uint = 10       
             }:(RecordSet, SearchResponse)
    
    def rs = {{RecordSet-for WebResult}}
    
    || get first chunk
    def icount = 10 asa uint
    def response =
        {do-web-search query,
            offset = offset, 
            count = {min icount, count}}
    def results = {non-null response.web.results}
    set count = {min count, response.web.total}
    {with rs.batch-events? = true do
        {for result in results do
            {rs.append result}}
        {rs.commit}}
    
    || get more, asynchronously    
    let extend-results:{proc-type {}:void} =
        {proc {}:void
            def size = rs.size asa uint
            {if size < count then
                def from = size
                def ncount = {min icount, count - size}
                def handler =
                    {on e:SOAPHTTPRPCPostAsyncEvent do
                        {if-non-null responses = e.responses then
                            def next = responses[0] asa SearchResponse
                            def results = {non-null next.web.results}
                            || append results to recordset
                            def n = results.size
                            {if n > 0 then
                                {with rs.batch-events? = true do
                                    {for result in results do
                                        {rs.append result}}
                                    {rs.commit}}}
                            || request more if necessary
                            def need = count - rs.size asa uint
                            {if need > 0 and
                                || we must be done if got less than requested
                                n == ncount 
                             then
                                {extend-results}}
                         else
                            || TODO: notify of failure
                            {dump e.exception, e.canceled?}}}
                || TODO: cancel after some time limit
                def request = 
                    {SearchRequest.from-keywords 
                        query = query, 
                        appId = APPID,
                        web = {WebRequest.from-keywords count = ncount, offset = from},
                        sources = {{Array-of SourceType} SourceType.web}}
                def worker = {SERVICE.async-search request, handler}
            }}
    {extend-results}
    
    || return initial results
    {return rs, response}
}
|| strip html markup
{define-proc {get-text x:any}:String
    let buf:StringBuf = {StringBuf}
    {type-switch x
     case s:StringInterface do
        let n:int = 0
        {for c in s do
            {switch c 
             case '<' do {inc n}
             case '>' do {dec n}
             else
                {if n <= 0 then 
                    {buf.append c}}}}
     else
        {format out = buf, "%s", x}}
    {return {buf.to-String}}
}
|| specialized cell to show entire contents
{define-class public ExposeGridCell
  {inherits StandardRecordGridCell}  
  field display:ExposeFrame = 
      {ExposeFrame
        background = "white",
        active-traversal-container = null,
        text-breakable? = false,
        margin = 3pt,
        halign = "left"}
  {constructor public {default}
    {construct-super}
    {self.add-internal 
        {ClipFrame self.display}}
  }  
  {method public {refresh-data}:void
    {self.display.clear}
    {if-non-null r = self.record then
        def ref = {self.get-formatted-data}
        {self.display.add ref}}
  }
}
|| specialized cell to show link
{define-class public LinkGridCell
  {inherits ExposeGridCell}  
  {constructor public {default}
    {construct-super}
  }  
  {method public {refresh-data}:void
    {self.display.clear}
    {if-non-null r = self.record then
        def ref = {self.get-formatted-data}
        {self.display.add
            {link href = {url ref},
                {value ref}}}}
  }
}
|| applet layout
{document-style PlainDocument}
{set-document-properties 
    hstretch? = true, 
    vstretch? = true,
    margin = 3px}

{value
    def rg =
        {RecordGrid 
            width = {add-stretch},
            height = {add-stretch},
            automatic-columns? = false,
            {RecordGridColumn "title",
                width = 2in,
                cell-spec = ExposeGridCell,
                format-spec = get-text},
            {RecordGridColumn "url",
                header-spec = "URL",
                cell-spec = LinkGridCell,
                width = 2in},
            {RecordGridColumn "description",
                width = 3in,
                cell-spec = ExposeGridCell,
                format-spec = get-text},
            {RecordGridColumn "dateTime",
                width = 1.5in}}
    let subject:String = "Curl Web 2.0"
    let count:uint = 10
    def display =
        {VBox
            hstretch? = true,
            spacing = 3pt,
            {HBox
                valign = "top",
                {VBox
                    {bold WSDK Search Service},
                    {Table 
                        columns = 2,
                        {text Subject},
                        {TextField 
                            value = subject,
                            width = 2in,
                            {on ValueFinished at c:TextField do
                                set subject = c.value}},
                        {text Max Results},
                        {DropdownList 1, 5, 10, 20, 50, 100,
                            value = count,
                            vorigin = 70%,
                            {on ValueFinished at c:DropdownList do
                                set count = c.value asa uint}},
                        {skip},
                        {CommandButton label = {message Submit},
                            {on Action do
                                {with-busy-cursor
                                    def (rs, result) =
                                        {async-web-search subject,
                                            count = count} 
                                    set rg.user-data = result
                                    set rg.record-source = rs
                                }}}}},
                {Fill},
                {text Results from {link href = {url "http://www.live.com"}, bing}}
            },
            {hrule height = 3pt},
            rg}    
    display
}
