||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{value
    def name = "COM.CURL.WSDK"
    def version = "1.1"
    def dirname = name & "." & version
    
    {DeploySpecs  
        caption = {lmessage deploy WSDK},

        || SOURCE distribution
        || ====================

        || duplicate source tree  
        || --------------------                      
        || -- code (copy)
        {DeploySpec  
            "code/project.cprj",
            "deploy-source",
            "src/code"
        },
        || -- samples (copy)
        || ---- NOTE: not yet available
        || -- support (copy)
        {DeploySpec
            "support/project.cprj",
            "deploy", 
||--            "src/support"
            "src/tests"
        },
        || -- tools (copy)
        {DeploySpec
            "tools/project.cprj",
            "deploy", 
            "src/tools"
        },
        || incorporate test framework 
        || --------------------
        {DeploySpec
            "lib/CDU/project.cprj",
            "deploy", 
            "src/lib/CDU"
        },
        || -- build scripts (copy)
        {DeployAction
            caption = {lmessage copy 'build' scripts},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                def target = {target-root.concat "src/build"}
                {create-Directory target,
                    error-if-exists? = false}
                def files =
                    {StringArray
                        "deploy.curl",
                        "deploy-batch.curl",
                        "deploy-specs.scurl"}
                {for file in files do
                    {copy 
                        {source-root.concat "build/" & file},
                        {target.concat file},
                        error-if-exists? = false}}}
        },

        || LIBRARY distribution
        || ====================
        
        || build library (pcurl)
        || -------------------- 
        {DeploySpec  
            "code/project.cprj",
            "deploy",
            "deploy/" & dirname
        },

        || DOCS distribution
        || ====================
        
        || documentation {copy + docs)
        || -------------------- 
        {DeploySpec 
            "code/project.cprj",
            "deploy-docs",
            "docs-install/" & dirname
        },
        || dguide index
        || -------------------- 
        {DeployAction
            caption = {lmessage Generate DGuide Index},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                def contents-loc =
                    {target-root.concat
                        "docs-install/" & dirname 
                        & "/docs/en/dguide/_contents.scurl"}
                {generate-dguide-index contents-loc.parent}
            }},

        || final steps
        || ====================
        
        || clean source control directories
        || --------------------
        {DeployAction
            caption = {lmessage clean .svn},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                {clean-svn-directories target-root}
            }},
        || BOILERPLATE material {copy)
        || -------------------- 
        {DeployAction
            caption = {lmessage copy BOILERPLATE},
            {proc {self:DeployAction,
                   source-root:Url,
                   target-root:Url}:void
                {copy 
                    {source-root.concat "LICENSE"},
                    {target-root.concat "LICENSE"},
                    error-if-exists? = false}
                {copy 
                    {source-root.concat "NOTICE"},
                    {target-root.concat "NOTICE"},
                    error-if-exists? = false} 
                {copy 
                    {source-root.concat "README.txt"},
                    {target-root.concat "README.txt"},
                    error-if-exists? = false} 
            }}
    }
}
