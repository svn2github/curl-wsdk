||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| SOAPListMarshaler.curl

|| SOAPListMarshaler
{define-class public open SOAPListMarshaler
  {inherits SOAPMarshaler}
  field public constant item-type:SOAPObjectType

  {constructor public {default
                          || curl-type and xml-type must be filled in.
                          type:SOAPObjectType,
                          item-type:SOAPObjectType
                      }
    {construct-super.SOAPMarshaler type}
    set self.item-type = item-type
  }

  {method public open {default-marshal
                          stream:{OutputStream-of XMLToken},
                          val:any,

                          || xml-type and curl-type required
                          type:SOAPObjectType,
                          element:XMLName,

                          encoding:#String, ||default? (multiple urls poss.)
                          context:SOAPMarshalContext,
                          current-mapper:SOAPTypeMapper,
                          curl-type-to-xml-type:SOAPCurlTypeToXMLTypeMapper,
                          marshal-proc:SOAPTypeMapper.MarshalProc,
                          write-type-attribute?:bool = true,
                          multiple-reference:SOAPTypeMultipleReference =
                              SOAPTypeMultipleReference.unknown
                      }:(worked?:bool)
    {self.check-type type, true}

    {marshal-type-check type}
    let constant null?:bool = {type-of val} == Null
    {if write-type-attribute? then
        {marshal-write-type-attribute stream, type}
    }
    
    let out:StringBuf = {StringBuf}
    let out-xml-name-values:#{Array-of XMLName}
    {with-compiler-directives 
        allow-any-calls? = true,
        allow-implicit-any-casts? = true
     do 
        || TODO: verify input type
        || - this works with Array, or null, or anything iterable
        {if-non-null val then
            {for x key i in val do
                def characters =
                    {marshal-to-XMLCharacters
                        x,
                        self.item-type,
                        current-mapper,
                        curl-type-to-xml-type
                    }
                {if-non-null characters then
                    {if i > 0 then
                        {out.append ' '}}
                    {out.concat characters.characters}
                    {if-non-null xnv = characters.xml-name-values then
                        {if out-xml-name-values == null then
                            set out-xml-name-values =
                                {new {Array-of XMLName}.from-size,
                                    i, {XMLName.unchecked "", ""}
                                }
                        }
                        {if i > 0 then
                            {out-xml-name-values.set-size
                                i, {XMLName.unchecked "", ""}
                            }
                        }
                        {out-xml-name-values.concat xnv}
                    }
                }
            }
        }
    }

    || handle id/href stuff for non-null things
    set multiple-reference =
        {marshal-handle-id-href
            stream,
            val,
            type,
            encoding,
            context,
            multiple-reference,
            SOAPTypeMultipleReference.single,
            marshal-proc,
            write-type-attribute? = write-type-attribute?
        }
    {if null? then
        {marshal-write-nil-type stream, type}
        {return true}
     elseif multiple-reference == SOAPTypeMultipleReference.single or
        multiple-reference == SOAPTypeMultipleReference.multiple-instance
     then
        {stream.write-one
            {XMLCharacters
                {out.to-String},
                xml-name-values = out-xml-name-values
            }
        }
    }

    {return true}
  }

  {method public open {default-unmarshal
                          stream:XMLInputStream,
                          attributes:#{Array-of XMLAttribute},

                          || xml-type and curl-type required
                          type:SOAPObjectType,

                          default-encoding:#String, ||default? (multiple urls poss.)
                          context:SOAPUnmarshalContext,
                          current-mapper:SOAPTypeMapper,
                          xml-type-to-curl-type:SOAPXMLTypeToCurlTypeMapper,
                          || TODO: where would this be overridden ?
                          check-type-attribute?:bool = false
                      }:(value:any, worked?:bool)
    {self.check-type type, false}

    {return
        {refable-unmarshal-proc
            #String,
            {proc {obj:any, type:Type}:any
                {return obj}
            },
            {proc {
                      characters:#XMLCharacters,
                      type:Type
                  }:(ref-object:any, return-object:any)
                    {if-non-null characters then
                        def item-type = 
                            {if-non-null type = self.item-type.curl-type then
                                type
                             else
                                String
                            } 
                        {with-compiler-directives allow-any-calls? = true do
                            let xs:any = {new {Array-of.construct item-type}}
                            let i:int = 0
                            def str = characters.characters
                            {for s in {str.split} do
                                {if not s.empty? then
                                    def xml-name-values =
                                        {if characters.xml-name-values != null
                                            and
                                            i < characters.xml-name-values.size 
                                         then
                                            {new {Array-of XMLName}, 
                                                characters.xml-name-values[i]}
                                         else
                                            null
                                        }
                                    def c =
                                        {XMLCharacters
                                            s,
                                            xml-name-values = xml-name-values
                                        }
                                    let x:any =
                                        {unmarshal-from-XMLCharacters
                                            c,
                                            self.item-type,
                                            current-mapper,
                                            xml-type-to-curl-type
                                        }
                                    {xs.append x}
                                    {inc i}
                                }
                            }
                            {return xs, xs}
                        }
                     else
                        {return null, null}
                    }
            },
            stream,
            attributes,
            type,
            default-encoding,
            context,
            current-mapper,
            xml-type-to-curl-type,
            check-type-attribute? = check-type-attribute?
        }
    }
  }

  {getter public open {encodings}:{Array-of #String}
    {return {new {Array-of #String}, null, efficient-size = 1}}
  }
}
