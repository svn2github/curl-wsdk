||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-proc public {required-keyword what:String}:any
    {error {lmessage Required keyword argument {value what}}}
}

{define-class public abstract open WSDLHTTPRPCPostClient

  field public constant soap-caller:SOAPHTTPRPCPostCaller

  field public constant service-location:Url
  
  {doc-next ||== WSDLHTTPRPCPostClient.generated-using-version
    {purpose 
        The {docref wsdl-service-class-version} 
        used to generate this class.
    }}
  field public constant generated-using-version:String

  {constructor public {default 
                          service-location:Url,
                          generated-using-version:String = "1"
                      }
    
    set self.generated-using-version = generated-using-version
    {self.verify-service-version}

    set self.service-location = service-location

    let constant (type-mapper:SOAPTypeMapper,
        element-name-to-xml-type:SOAPElementNameToXMLTypeMapper,
        xml-type-to-curl-type:SOAPXMLTypeToCurlTypeMapper,
        curl-type-to-xml-type:SOAPCurlTypeToXMLTypeMapper,
        xml-type-to-element-name:SOAPXMLTypeToElementNameMapper) =
        {self.register-types}

    set self.soap-caller =
        {new SOAPHTTPRPCPostCaller,
            message-writer =
                {new SOAPRPCMessageWriter,
                    type-mapper = type-mapper,
                    element-name-to-xml-type = element-name-to-xml-type,
                    xml-type-to-curl-type = xml-type-to-curl-type,
                    curl-type-to-xml-type = curl-type-to-xml-type,
                    xml-type-to-element-name = xml-type-to-element-name
                },
            message-reader =
                {new SOAPRPCMessageReader,
                    type-mapper = type-mapper,
                    element-name-to-xml-type = element-name-to-xml-type,
                    xml-type-to-curl-type = xml-type-to-curl-type,
                    curl-type-to-xml-type = curl-type-to-xml-type,
                    xml-type-to-element-name = xml-type-to-element-name
                }
        }
  }
  
  {doc-next  ||== WSDLHTTPRPCPostClient.trace-stream
    {purpose
        If not {ctext null}, SOAP requests and responses will
        be output to this stream.
    }
  }
  {getter public open {trace-stream}:#TextOutputStream
    {return self.soap-caller.trace-stream}
  }
  {setter public open {trace-stream val:#TextOutputStream}:void
    set self.soap-caller.trace-stream = val
  }

  {method public abstract open {register-types
                               }:(type-mapper:SOAPTypeMapper,
                                  element-name-to-xml-type:SOAPElementNameToXMLTypeMapper,
                                  xml-type-to-curl-type:SOAPXMLTypeToCurlTypeMapper,
                                  curl-type-to-xml-type:SOAPCurlTypeToXMLTypeMapper,
                                  xml-type-to-element-name:SOAPXMLTypeToElementNameMapper)
  }
  
  {doc-next ||== WSDLHTTPRPCPostClient.verify-service-version
    {purpose 
        Checks the consistency of this generated service class.}
    {details
        compares {docref WSDLHTTPRPCPostClient.generated-using-version}
        with {docref wsdl-service-class-version}.
    }}
  {method public open {verify-service-version}:void
    {if self.generated-using-version != wsdl-service-class-version then
        {throw-soap-exception
            {message
                This service package was generated using 
                WSDL service class version {value self.generated-using-version}
                but the current version is {value wsdl-service-class-version}
            }}}
  }
}
