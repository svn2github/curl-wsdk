||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public serializable StandardXDMProcessingInstruction 
  {inherits XDMProcessingInstruction, StandardXDMNode}
  field private _target:String
  field private _data:String

  {getter public {target}:String
    {return self._target}
  }
  {setter public {target val:String}:void
    {self.assure-modifiable}
    set self._target = val
    {self.trigger-xdm-event {XDMNodeModified self}}
  }

  {getter public {data}:String
    {return self._data}
  }
  {setter public {data val:String}:void
    {self.assure-modifiable}
    set self._data = val
    {self.trigger-xdm-event {XDMNodeModified self}}
  }
  
  {constructor public {default 
                          target:String, 
                          data:String}
    set self._target = target
    set self._data = data
  }
  
  {method public {get-text}:String
    {return self.data}
  }
  
  {getter public {xmlname}:XDMName
    {return {XDMName "", self.target}}
  }
  
  {getter public {prefix}:String
    {return ""}
  }

  {getter public {qualified-name}:String
    {return self.xmlname.local-name}
  }
  
  field private _document:#XDMDocument
  {getter public {document}:#XDMDocument
    {return self._document}
  }

  {setter protected {document document:#XDMDocument}:void
    set self._document = document
  }  

  {method public {clone}:StandardXDMProcessingInstruction
    {return {StandardXDMProcessingInstruction self.target, self.data}}
  }

  {method public {to-XML
                     out:#TextOutputStream = null,
                     indentation:int = 1
                 }:String
    let return?:bool = out == null
    {if return? then
        set out = {StringBuf}
    }
    
    {out.write-one-string "<?"}
    {out.write-one-string self.target}
    {out.write-one ' '}
    {out.write-one-string self.data}
    {out.write-one-string "?>"}
    
    {return {if return? then {(out asa StringBuf).to-String} else ""}}
  }
}
