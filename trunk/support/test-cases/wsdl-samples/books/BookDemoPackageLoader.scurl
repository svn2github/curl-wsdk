||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{doc-next
    {purpose
        This class is handles requests to load the {docref package}s of Curl
        source generated from WSDL files.
    }
}
{define-class public open BookDemoPackageLoader
  field protected service-data:BookDemoServiceData

  {doc-next
    {purpose
        Creates a {docref BookDemoPackageLoader}.
    }
    {parameter
        service-data,
        A {docref BookDemoServiceData} that holds a list of {docref package}s as
        they get loaded.
    }
  }
  {constructor public {default service-data:BookDemoServiceData}
    set self.service-data = service-data
  }

  {doc-next
    {purpose
        Loads all the {docref package}s in a {docref manifest}.
    }
    {parameter
        mloc,
        A {docref Url} specifying the location of a {docref manifest}.
    }
  }
  {method protected open {load-all-packages mloc:Url}:void
    let m:ComponentManifest = {import-manifest mloc, check-out-of-date? = true}
    {for cs in m do
        {try
            let pname:#String = cs.name
            {if-non-null pname then
                let pkg:Package =
                    {import-package 
                        manifest = m,
                        {make-package-selector pname}
                    }
                let index:int =
                    {self.service-data.packages.find
                        pkg,
                        equality-proc =
                            {proc {p1:Package,
                                   p2:Package}:bool
                                {return
                                    p1.name == p2.name
                                }
                            }
                    }
                {if index == -1 then
                    {self.service-data.packages.append pkg}
                }
            }
         catch e:Exception do
            {dump e}
        }
    }
  }

  {doc-next
    {purpose
        Loads a named {docref package} from a {docref manifest}.
    }
    {parameter
        name,
        A {docref String} specifying the name of the {docref package} to load.
    }
    {parameter
        mloc,
        A {docref Url} specifying the location of a {docref manifest}.
    }
  }
  {method protected open {load-package name:String, mloc:Url}:void
    let m:ComponentManifest = {import-manifest mloc, check-out-of-date? = true}
    {for cs in m do
        {try
            let pname:#String = cs.name
            {if-non-null pname then
                {if pname == name then
                    let pkg:Package =
                        {import-package 
                            manifest = m,
                            {make-package-selector pname}
                        }
                    let index:int = {self.service-data.packages.find
                                        pkg,
                                        equality-proc =
                                            {proc {p1:Package,
                                                   p2:Package}:bool
                                                {return
                                                    p1.name == p2.name
                                                }
                                            }
                                    }
                    {if index == -1 then
                        {self.service-data.packages.append pkg}
                    }
                }
            }
         catch e:Exception do
            {dump e}
        }
    }
  }
}
