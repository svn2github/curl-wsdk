||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{curl 6.0 applet}

{applet manifest = "manifest.mcurl"}

{document-style PlainDocument}

{set-document-properties
    hstretch? = true,
    vstretch? = true
}

{import * from COM.CURL.WSDK.SAMPLES.BOOK-DEMO}
{import * from COM.CURL.WSDK.WSDL}

{title heading? = false, Book Package Generator}

{value
    || Specify the services you'd like to use
    let services:StringArray =
        {new StringArray,
            || Amazon
            "http://soap.amazon.com/schemas3/AmazonWebServices.wsdl",
            || Barnes & Noble
            ||   {get-price String}:#String
            "http://www.abundanttech.com/webservices/bnprice/bnprice.wsdl",
            || ISBNInformation
            ||   {get-isbninformation String}:#String
            "http://www.webservicex.com/isbn.asmx?WSDL",
            || LookyBookService
            ||   {do-keyword-search String}:#{Array-of BookInfo}
            ||   {do-keyword-search-ex}:#{Array-of BookInfo}
            ||   {get-info String}:#BookInfo
            "http://www.winisp.net/cheeso/books/books.asmx?WSDL"
        }
    || Make sure the applet is run locally so the files can be written to disk
    {if-non-null {get-the-applet}.url.local-filename then
        || Create a generator
        let generator:BookDemoPackageGenerator = {new BookDemoPackageGenerator}
        || Build a RecordSet of wsdl-specs from the services specified above
        let wsdl-specs:RecordSet =
            {new RecordSet,
                {new RecordFields,
                    {new RecordField, "wsdl", domain = String}
                }
            }
        || Perform a cursory check to make sure the servers are responding.
        || NOTE: This doesn't necessarily mean the services themselves are
        ||       currently functional.
        let timeout:Time = 5s
        {for s key k in services do
            || Extract http://hostname
            let hostname:String = {url s}.stem.name
            || Get rid of the http:// portion
            let index:int = {hostname.find '/', search-direction = "backward"}
            {if index > -1 and index < hostname.size then
                set hostname = {hostname.tail index + 1}
            }
            {if {RemoteMethodDelegate.ping-wsdl-server hostname, timeout} then
                {wsdl-specs.append {new RecordData, wsdl = s}}
            }
        }
        || Create a ComponentManifest to hold the information about
        || which packages were actually generated
        let component-manifest:ComponentManifest = {ComponentManifest}
        set component-manifest.direct-delegates =
            {{ReadOnlyArray-of ComponentManifest}
                {get-default-manifest}
            }
        || Generate the packages and write the manifest
        let manifest-location:Url = {generator.generate
                                        component-manifest,
                                        wsdl-specs,
                                        {{get-the-applet}.url.merge "wsdl/"}
                                    }
        || Display the results
        {VBox
            halign = "center",
            spacing = 2pt,
            {RecordGrid
                width = {make-elastic},
                height = 5cm,
                record-source = wsdl-specs
            },
            {VBox
                background = "#DDEEFF",
                "The manifest was written to the following location:",
                manifest-location
            }
        }
     else
        {VBox
            halign = "center",
            {Fill},
            {bold color = "red",
                This applet needs to write files to disk,
                so it must be run from the filesystem, not over http.
            },
            {Fill}
        }
    }
}
