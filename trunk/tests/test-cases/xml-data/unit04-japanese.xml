<Unit title = " 。2 - カールのプラットホームの概観"> <Lesson>  <Topic title = " 。目的">   <Sequence>    <Slide picture = "../images/objective.gif">
        。このレッスンを完了した後, あなたはできる: 
            <itemize>      <item>
          。理解しなさいカールの利点を
          。。解決は
              </item>      <item>
          。記述しなさいカールのプラットホームを
              </item>      <item>
          。理解しなさい実行時間の環境を
              </item>      <item>
          。解決を記述しなさいカールの言語と作成されることができる

              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。レッスン目標
          </heading>
       。このレッスンはカールの解決をもたらし,  網の技術の位置を
論議する。それが今日の企業に寄与する色々な方法でいかに使用
されることができるか関係者は学ぶ。
        </Note>  </Topic>  <Topic title = " 。今日網の技術">   <Sequence>    <Slide picture = "../images/technology-today.gif">
        。典型的なweb サイトは今日多くの技術の混合物を含むかもし
れない。
          </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。Today4a..s 網の技術
          </heading>
       。今日網の適用は多数と困難へ統合する技術を書かれている, 
あるべきであるよりはるかに困難にプログラミングの仕事をさせ
る。例えば, 本が含むかもしれなかった誰かを販売する場所: 
          <itemize>     <item>
         。主要なページのプロダクト像のhtml  テキスト
            </item>     <item>
         。目録の滝のように落ちるメニューのためのジヤバ・スクリプ
ト
            </item>     <item>
         。ジャワのscroller のアプレット発表する大きい取り引きを

            </item>     <item>
         。買物客を助けるactiveX 計算機制御
            </item>     <item>
         。注文用紙を処理するa のcgi 原稿
            </item>     <item>
         。a C++ の適用取る目録からの在庫を
            </item>    </itemize>   </Note>  </Topic>  <Topic title = " 。ビジネス含意">   <Sequence>    <Slide picture = "../images/HelpWanted.gif">     <paragraph>
         。網の場所は次のとおりである: 
            </paragraph>     <itemize>      <item>
          。懸命に設計し, 統合するため
              </item>      <item>
          。成長すること困難
              </item>      <item>
          。高価維持するため
              </item>      <item>
          。機能性で限る
              </item>     </itemize>     <paragraph>
         。技術はまた統合するために複雑になることができる
            </paragraph>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。網の適用
          </heading>    <paragraph>
        。,  開発者はサーバーのほとんどの計算をし
, 網のブラウザーへhtml 背部として結果を送信させる, これによ
り他の問題をもたらす: 
          </paragraph>    <itemize>     <item>
         。大きいダウンロード- html ダウンロードのサイズを後押しす
るレイアウトを扱うように要求する余分コーディングが
            </item>     <item>
         。遅い応答は- 動的にフレームまたはページ内のどの新しいデ
ータでも更新するため, web  サーバ送り直し, ブラウザーは全体
のフレームかページを描き直さなければならない。典型的な適用
とこれを比較しなさい, スクリーンの唯一に小さい部品- 更新済
がある部品- がredrawn である。
            </item>     <item>
         。一緒に送られる柔軟性のなさ- html 力データとレイアウト情
報。これは提供する顧客の処理データの限られた柔軟性を
            </item>    </itemize>   </Note>  </Topic>  <Topic title = " 。範例の転位">   <Sequence>    <Slide picture = "../images/paradigm.gif">     <paragraph>
         。現在, ほとんどの計算はサーバーで起こる。これはで起因で
きる: 
            </paragraph>     <itemize>      <item>
          。大きいダウンロード
              </item>      <item>
          。遅い応答時間
              </item>      <item>
          。柔軟性のなさ
              </item>      <item>
          。大きいサーバーは荷を積む
              </item>     </itemize>     <paragraph>
         。カールは卓上へ移すデータ提示と機能を
            </paragraph>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。明日網
          </heading>    <paragraph>
        。卓上へ提示と機能移すことによって, 会社は網インタ
ーフェイスの上で下記のもののポンプでくむことができる: 
          </paragraph>    <itemize>     <item>
         。直接処理
            </item>     <item>
         。流線形にした相互作用を
            </item>     <item>
         。実時間計算
            </item>     <item>
         。即刻の応答時間
            </item>    </itemize>    <itemize>     <item>     </item>     <item>     </item>     <item>     </item>    </itemize>   </Note>  </Topic>  <Topic title = " 。カールの解決">   <Sequence>    <Slide picture = "../images/advantages.gif">     <paragraph>
         。実行時間の環境を提供する行う顧客の卓上レベルの機能性を

            </paragraph>     <itemize>      <item>
          。ページは&quot; 住んでいる&quot; 網の
              </item>      <item>
          。より小さく, より速いダウンロード
              </item>      <item>
          。急速な応答時間
              </item>      <item>
          。緩和したサーバー負荷を
              </item>      <item>
          。提供するより豊富なユーザーの経験を
              </item>     </itemize>     <paragraph>
         。企業の適用の開発そして配達のために適した要求する: 
            </paragraph>     <itemize>      <item>
          。相互データ運転されたユーザー・インターフェース
              </item>      <item>
          。データ視覚化と処理
              </item>      <item>
          。進めた形態の提示と処理を
              </item>      <item>
          。XML と網サービスによるサーバー統合
              </item>      <item>
          。offline 実行機能
              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。カールのプラットホームの利点
          </heading>
       。速度- より速い網の性能は
          <itemize>     <item>
         。配るexecutables - 高いspeed/efficient のダウンロード…
を
            </item>     <item>
         。手続き型グラフィックは減らす普通洗練された, scalable 内
容のために必要なファイルサイズを
            </item>     <item>
         。倍力をweb ページまたは適用の配達そして蓄積と同様, 処理
している顧客側面は減らすサーバー交通を
            </item>    </itemize>
       。深さ- 豊富な内容及び相互ユーザーの経験は
          <itemize>     <item>
         。十分に適用レベルの機能性は提供する大幅により豊富な, 相
互ユーザーの経験を
            </item>     <item>
         。豊富なグラフィック
            </item>    </itemize>
       。便利- 1 つの言語は
          <itemize>     <item>
         。組み込むテキスト書式作成, グラフィック,  scripting, 及
びオブジェクト志向プログラミングを
            </item>     <item>
         。独立した装置
            </item>     <item>
         。を既存のサーバー技術(非対称多重処理システム
, JSP, ColdFusion 等は。使う) 
            </item>    </itemize>   </Note>  </Topic>  <Topic title = " 。カールのプラットホームは含んでいる... ">   <Sequence>    <Slide>     <paragraph>
         。カール
         。。言語は
            </paragraph>     <itemize>      <item>
          。設計した網の使用のために特に
              </item>      <item>
          。言語を統合した結合する: 
              </item>      <itemize>       <item>
           。豊富なテキスト書式作成及びレイアウト(e.g.HTML) 
                </item>       <item>
           。速く, 容易な提示scripting (例えばジヤバ・スクリプト
) 
                </item>       <item>
           。十分に特色にしたオブジェクト志向プログラミングを
                </item>      </itemize>     </itemize>     <paragraph>
         。サージ
         。。実行時間の環境は
            </paragraph>     <itemize>      <item>
          。カールの言語のための実行プラットホーム, 作り付けのAPIs 
の広汎なコレクション
              </item>      <item>
          いつ荷を積
まれるか
              </item>     </itemize>     <paragraph>
         。サージの実験室
         。。統合された開発の環境(Ide) 
            </paragraph>     <itemize>      <item>
          。強制的なカールのアプレットをすぐにそして容易に作成する
のをあなたが助ける続きの用具
              </item>      <item>
          。急速な適用開発
              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。カールのプラットホーム
          </heading>
       。カールのプラットホームは完全な適用レベルの機能性及び大
幅により豊富な, 相互ユーザーの経験の提供によって網のページ
と適用の次世代の開発そして配置を可能にする。とりわけ, カー
ル株式会社はサージ観覧のカールの内容のための実行時間の環境
を,  及びサージの実験室ide のカールの内容を作成する為の開発
者の環境に提供する。
          <heading>
        。カールの言語
          </heading>
       。従ってカールの言語は網の内容の表現のための単一の, 凝集
性の言語基礎であり,  現在の網デザイナーが経験する不連続を避
ける今日の刺激的な場所を作成する言語の変化の技術がなければ
ならない。
        </Note>  </Topic>  <Topic title = " 。か. ">   <Sequence>    <Slide picture = "../images/starting-surge.gif">     <enumerate>      <item>
          。ユーザーはカールの内容を含んでいる新しいweb ページへ運
行するために選ぶリンクを
                <itemize>        <item>
            。ブラウザーはサーバーへ送る要求を
                  </item>        <item>
            。要求された内容はサーバーから届く
                  </item>       </itemize>      </item>      <item>
          。ブラウザーは解釈する情報を
                <itemize>        <item>
            。カールの内容は確認される
                  </item>        <item>
            。カールの内容を扱いサージの実行時間の環境は始まる
                  </item>        <item>
            。カールの内容は動くことができるブラウザーでhtml でまたは
独立アプレットとして埋め込まれて
                  </item>       </itemize>      </item>     </enumerate>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。進水させるサージの実行時間の環境を
          </heading>    <paragraph>
        。ブラウザーはサーバーへ要求を送る。サーバーは要求を受
け取り,  ブラウザーへ要求された情報を送返す。ブラウザーはユ
ーザーへそして情報を解釈し,  表示する。
          </paragraph>    <paragraph>
        。, ブラウザー
は情報を受け取り, サージのランタイムの環境を進水させる。ア
プレットの処理は顧客で行われ, 内容はブラウザーのユーザーへ
示される。
          </paragraph>   </Note>  </Topic>  <Topic title = " 。連続したアプレット">   <Sequence>    <Slide picture = "../images/jit.gif">     <paragraph>
         。プラットホームの独立
            </paragraph>     <itemize>      <item>
          。同じ
                <monospace>
           。curl 
                </monospace>
          。ファイルはどのプラットホームでも不変と実行されることが
できる
              </item>      <item>
          。カールの内容はランタイムのjust-in-time (JIT)  編集者に
よって編集され, 解釈される
              </item>     </itemize>     <paragraph>
         。増加評価
            </paragraph>     <itemize>      <item>
          。待っていないページを作成し始めるように読ま
れる
              </item>      <item>
          。html へ類似した
              </item>     </itemize>     <paragraph>
         。不精な蓄積, 
            </paragraph>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。プラットホームの独立
          </heading>
       。カールの言語は設計によってプラットホーム独立している。
それは顧客のプラットホームの変化による渡す適用機能性に均一
インターフェイスを提供する。従って,  カールの言語で作成され
たアプレットはネットスケープとie 両方で同一に見る。最終的に
これは高性能パーソナルコンピュータから置上箱とネットワーク
コンピュータ細胞の電話と個人的なデジタル助手のような資源限
られた環境までを通って及ぶ。
          <heading>
        。Just-In-Time (JIT) 編集者
          </heading>
       。カールの言語原始コードと内容はJIT の編集者によって編集
される。プログラムが動くと同時にJIT は実行可能な機械コード
の混合物に原文の原始コードを編集する。
          <heading>
        。JIT の編集者は寄与する
          </heading>
       。カールの内容は原始ファイルとして顧客に直接伝えられ, 時
間にちょうど編集されるので, サーバーで動的に発生し, pre 蓄
積のための必要性のない実行のための顧客に伝えられることがで
きる。
        </Note>  </Topic>  <Topic title = " 。サージの実行時間の環境コミュニケーション">   <Sequence>    <Slide picture = "../images/Communication.gif">     <paragraph>
         。既存の網の標準及び技術のInteroperates 
            </paragraph>     <itemize>      <item>
          。使用http かhttps はサーバーによって伝達し合うために議定
に記録する
              </item>      <item>
          。をサーバー言語(非対称多重処理システム,  
JSP, ColdFusion, PHP, perl, c, 等は。使う) 
              </item>      <item>
          。XML データを分析し使用する原産のXML SAX2  のパーサーを

              </item>      <item>
          。網サービスに連絡する使用石鹸インターフェイス
              </item>      <item>
          。動的にサーバーからのカールの内容を発生させるできるまた

              </item>     </itemize>     <paragraph>
         。html かジヤバ・スクリプトとは違って,  サージのランタイ
ムはサーバー要求自体を出し, 結果を解釈できる
            </paragraph>     <itemize>      <item>
          。動かされたサーバー原稿は使用し, 同じ適用内の結果を
              </item>      <item>
          。ページはデータのレイアウトを埋め込まないで大急ぎで作成
されることができる
              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。動かすカールのアプレットを
          </heading>
       。方法間の主要な相違はサーバー側面の技術とhtml かジヤバ・
スクリプトのweb ページ及びカールのweb ページカールのweb ペ
ージが連続した適用であることである伝達し合う。カールのプラ
ットホームで造られるアプレットはサーバーによって直接伝達し
合うことによって最初のダウンロードされた内容を越える付加的
なデータを要求できる。アプレットが動いていると同時にこれは
またサージに実行時間の環境が動的に内容を含むようにする。
          <heading>
        。インターオペラビリティ
          </heading>
       。カールの言語は1 つの開発の環境に既存の網の技術の機能性
を組み込み, 拡大する。カールのプラットホームは既存の網の技
術と,html, cgi 及びジヤバ・スクリプト, 及び複合メディアの生
気用具のような使用されることができるかまたはそれらの代わり
に使用されることができる。カールのプラットホームは
leveraging に最初に顧客焦点を合わせられる。それは開発者に簡
単なテキストの表示からの差込として現在のブラウザーされる複
雑な事実上の現実の環境へ高性能顧客インターフェイスを, 造る
機能をまたは非常にcustomizable 適用の内で提供する。石鹸と網
サービスのような出現の標準を利用するためにプラットホームは
またあなたがきれいに提示からデータを分けることを可能にする
。
        </Note>  </Topic>  <Topic title = " 。構成とVersioning ">   <Sequence>    <Slide>     <paragraph>
         。構成管理は含んでいる
            </paragraph>     <itemize>      <item>
          。後方に両立性
              </item>      <item>
          。upgrades/updates の同一証明
              </item>     </itemize>     <paragraph>
         ように
            </paragraph>     <itemize>      <item>
          あるものがの個々の顧客に
              </item>      <item>
          。サージの実行時間の環境は個々の図書館のレベルで要求する
更新を(またはさかのぼって有効にする) 
              </item>     </itemize>     <paragraph>
         。両方とも後方に提供し, 進める両立性を
            </paragraph>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。顧客構成
          </heading>
       。あなたがあなたのソフトウェアを改善するたびにカールのプ
ラットホームは顧客構成すべてを更新する困難な問題を解決する
。ユーザーがカールのプラットホームで造られるアプレットを動
かすたびにサージの実行時間の環境は必要な実行環境を定めるフ
ァイルの内で指定される。
        </Note>  </Topic>  <Topic title = " 。保証と特権">   <Sequence>    <Slide picture = "../images/control-panel.gif">     <paragraph>
         。保証
            </paragraph>     <itemize>      <item>
          。&quot; Sandbox &quot; モデル
              </item>      <item>
          。エンドユーザーには見えない
              </item>      <item>
          。unprivileged アプレットにないホスト資源またはネットワー
クへのディフォルトのアクセスが
              </item>      <item>
          。privileged アプレットを持っている完全なアクセスを
              </item>      <item>
          。特権を許可する能力はシステム管理責任者によって制御され
る
              </item>     </itemize>     <paragraph>
         。システム皿アイコンは現われ
る: 
            </paragraph>     <itemize>      <item>
          。拾い読みするカールのアプレットを
              </item>      <item>
          。動くサージの実験室Ide 
              </item>     </itemize>     <paragraph>
         。指定する使用サージのコントロール・パネル: 
            </paragraph>     <itemize>      <item>
          。privileged 位置を
              </item>      <item>
          。好み
              </item>      <item>
          。デバッガーの選択
              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。保証と特権
          </heading>    <paragraph>
        。通常, カールのプラットホームで造られるアプレットは
unprivileged 動かすが, あるアプレットに同じをの制限されてい
ないアクセス与えるためにシステム管理責任者かエンドユーザー
はサージの実行時間の環境を形成できるデスクトップの適用が動
かす
          </paragraph>    <paragraph>
        。顧客の特権
のデータベースはこのデータベースの店位置(局所システムとホス
トの登録簿定める) のリストアプレットが含んでいる特権モード
で動くために。アプレットを含んでいる位置が特権のデータベー
スにリストされていれば, アプレットは特権モードで動く。そう
でなかったら, それからアプレットは正常なアプレットの
sandbox の制限に応じてある
          </paragraph>    <paragraph>
        。エンドユーザーにその中のホストまたは公正な特定の登録簿
の全体の内容へ特権実行を可能にすることの選択がある。彼らは
またアプレットを取り出すためにssl 関係が使用されるように要
求できる。遮断を防ぐためにssl 関係はデータを暗号化し, ホス
トをそれ保障するために署名された証明書を実際にであるシステ
ムある要求使用する。特権的アクセスがあるためにエンドユーザ
ーにまたローカルファイルシステムで登録簿を指定できる
          </paragraph>    <paragraph>
        。カールの内容のすべてはアプレットによって荷を積んだ(パッ
ケージで, 含まれたファイルは, 精巧なプロシージャ, 等によっ
て荷を積まれて。満足する) アプレットからの特権を受継ぐ。こ
れはアプレット自体がするために何をただすることに含まれたコ
ードを限る。
          </paragraph>   </Note>  </Topic>  <Topic title = " 。ブラウザーの配置の建築">   <Sequence>    <Slide picture = "../images/DeployArch.gif">    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。パッケージのローディング
          </heading>
       。サージの実行時間の環境は必要とされるni ouzite 標準的な
図書館及び支持のパッケージに荷を積む。
          <heading>
        。構成管理
          </heading>
       。構成管理は前の版の両立性を後方に保証し, 顧客機械で必要
な環境に荷を積む。Upgrade/update が顧客機械で必要ならそれは
またエンドユーザーを知らせる。
          <heading>
        。プロセス管理
          </heading>
       。プロセス管理は記憶と糸プロセスの管理を含んでいる。
          <heading>
        。入力／出力
          </heading>
       。入力／出力は標準的な入出力機能性を含んでいるネットワー
クコミュニケーションと顧客側面の耐久性があるデータを含んで
いる。
          <heading>
        。JIT の編集者
          </heading>
       。プログラムが動くと同時にJIT は実行可能な機械コードの混
合物に原文の原始コードを編集する。
          <heading>
        。ホストのOs インターフェイス
          </heading>
       。インターフェイス顧客機械のアプレットとホストのos の間に
確立される, 例えばマイクロソフトWindows(r) 。
          <heading>
        。顧客データ持続
          </heading>
       。ファイルへ書かないで顧客でデータの少量を貯えるためにカ
ールの言語の耐久性があるデータシステムを使用しなさい。
        </Note>  </Topic>  <Topic title = " 。解決のデモンストレーション">   <Sequence>    <Slide picture = "../images/Commerce.gif">    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>    <heading>
        。カールの解決
          </heading>
       。どこでも相互, 強く, 写実的な, 高性能網の適用のための必
要性が, カールのプラットホームある理想的がある!  プラットホ
ームは相互アプレット, 第2 及び3D を含む多くの業務用ソフトの
ために賭博, 動的データ視覚化, 及び生気の適用実行されること
ができる。
        </Note>  </Topic>  <Topic title = " 。概要">   <Sequence>    <Slide>
        。このレッスンでは, あなたは次を学ぶべきである: 
            <itemize>      <item>
          。カールのプラットホームの利点
              </item>      <item>
          。カールのプラットホームで造られるアプレットは顧客機械で
処理される
              </item>      <item>
          。これらのアプレットは動的にサーバーからの付加的なデータ
を直接要求できる
              </item>      <item>
          。既存の網の技術のこれらのアプレットのinteroperate 
              </item>      <item>
          。これらのアプレットはである独立したプラットホーム
              </item>      <item>
          。カールのプラットホームは多くの業務用ソフトのために実行
されることができる
              </item>     </itemize>    </Slide>   </Sequence>   <WorkedExample>   </WorkedExample>   <Note>   </Note>  </Topic> </Lesson></Unit>